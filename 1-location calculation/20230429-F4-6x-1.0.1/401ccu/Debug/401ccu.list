
401ccu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800c290  0800c290  0001c290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c320  0800c320  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800c320  0800c320  0001c320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c328  0800c328  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c328  0800c328  0001c328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c32c  0800c32c  0001c32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800c330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001854  20000168  0800c494  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200019bc  0800c494  000219bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cc6  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b24  00000000  00000000  00038e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003c980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0003de78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a027  00000000  00000000  0003f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5e5  00000000  00000000  0005921f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009214e  00000000  00000000  00073804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e4c  00000000  00000000  001059a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000168 	.word	0x20000168
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c274 	.word	0x0800c274

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000016c 	.word	0x2000016c
 80001d4:	0800c274 	.word	0x0800c274

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_ldivmod>:
 8000b40:	b97b      	cbnz	r3, 8000b62 <__aeabi_ldivmod+0x22>
 8000b42:	b972      	cbnz	r2, 8000b62 <__aeabi_ldivmod+0x22>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bfbe      	ittt	lt
 8000b48:	2000      	movlt	r0, #0
 8000b4a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b4e:	e006      	blt.n	8000b5e <__aeabi_ldivmod+0x1e>
 8000b50:	bf08      	it	eq
 8000b52:	2800      	cmpeq	r0, #0
 8000b54:	bf1c      	itt	ne
 8000b56:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b5a:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5e:	f000 b9f5 	b.w	8000f4c <__aeabi_idiv0>
 8000b62:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	db09      	blt.n	8000b82 <__aeabi_ldivmod+0x42>
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db1a      	blt.n	8000ba8 <__aeabi_ldivmod+0x68>
 8000b72:	f000 f883 	bl	8000c7c <__udivmoddi4>
 8000b76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7e:	b004      	add	sp, #16
 8000b80:	4770      	bx	lr
 8000b82:	4240      	negs	r0, r0
 8000b84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db1b      	blt.n	8000bc4 <__aeabi_ldivmod+0x84>
 8000b8c:	f000 f876 	bl	8000c7c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr
 8000ba8:	4252      	negs	r2, r2
 8000baa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bae:	f000 f865 	bl	8000c7c <__udivmoddi4>
 8000bb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bba:	b004      	add	sp, #16
 8000bbc:	4240      	negs	r0, r0
 8000bbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc2:	4770      	bx	lr
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	f000 f857 	bl	8000c7c <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4252      	negs	r2, r2
 8000bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b9aa 	b.w	8000f4c <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f83c 	bl	8000c7c <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2lz>:
 8000c10:	b538      	push	{r3, r4, r5, lr}
 8000c12:	2200      	movs	r2, #0
 8000c14:	2300      	movs	r3, #0
 8000c16:	4604      	mov	r4, r0
 8000c18:	460d      	mov	r5, r1
 8000c1a:	f7ff ff0b 	bl	8000a34 <__aeabi_dcmplt>
 8000c1e:	b928      	cbnz	r0, 8000c2c <__aeabi_d2lz+0x1c>
 8000c20:	4620      	mov	r0, r4
 8000c22:	4629      	mov	r1, r5
 8000c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c28:	f000 b80a 	b.w	8000c40 <__aeabi_d2ulz>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c32:	f000 f805 	bl	8000c40 <__aeabi_d2ulz>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	bd38      	pop	{r3, r4, r5, pc}
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2ulz>:
 8000c40:	b5d0      	push	{r4, r6, r7, lr}
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__aeabi_d2ulz+0x34>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	4606      	mov	r6, r0
 8000c48:	460f      	mov	r7, r1
 8000c4a:	f7ff fc81 	bl	8000550 <__aeabi_dmul>
 8000c4e:	f7ff ff57 	bl	8000b00 <__aeabi_d2uiz>
 8000c52:	4604      	mov	r4, r0
 8000c54:	f7ff fc02 	bl	800045c <__aeabi_ui2d>
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <__aeabi_d2ulz+0x38>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f7ff fc78 	bl	8000550 <__aeabi_dmul>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4630      	mov	r0, r6
 8000c66:	4639      	mov	r1, r7
 8000c68:	f7ff faba 	bl	80001e0 <__aeabi_dsub>
 8000c6c:	f7ff ff48 	bl	8000b00 <__aeabi_d2uiz>
 8000c70:	4621      	mov	r1, r4
 8000c72:	bdd0      	pop	{r4, r6, r7, pc}
 8000c74:	3df00000 	.word	0x3df00000
 8000c78:	41f00000 	.word	0x41f00000

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468e      	mov	lr, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14d      	bne.n	8000d26 <__udivmoddi4+0xaa>
 8000c8a:	428a      	cmp	r2, r1
 8000c8c:	4694      	mov	ip, r2
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0xe8>
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b152      	cbz	r2, 8000cac <__udivmoddi4+0x30>
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	f1c2 0120 	rsb	r1, r2, #32
 8000c9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ca2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca6:	ea41 0e03 	orr.w	lr, r1, r3
 8000caa:	4094      	lsls	r4, r2
 8000cac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb0:	0c21      	lsrs	r1, r4, #16
 8000cb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb6:	fa1f f78c 	uxth.w	r7, ip
 8000cba:	fb08 e316 	mls	r3, r8, r6, lr
 8000cbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cc2:	fb06 f107 	mul.w	r1, r6, r7
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x64>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cd2:	f080 811f 	bcs.w	8000f14 <__udivmoddi4+0x298>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 811c 	bls.w	8000f14 <__udivmoddi4+0x298>
 8000cdc:	3e02      	subs	r6, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf0:	fb00 f707 	mul.w	r7, r0, r7
 8000cf4:	42a7      	cmp	r7, r4
 8000cf6:	d90a      	bls.n	8000d0e <__udivmoddi4+0x92>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	f080 810a 	bcs.w	8000f18 <__udivmoddi4+0x29c>
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	f240 8107 	bls.w	8000f18 <__udivmoddi4+0x29c>
 8000d0a:	4464      	add	r4, ip
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d12:	1be4      	subs	r4, r4, r7
 8000d14:	2600      	movs	r6, #0
 8000d16:	b11d      	cbz	r5, 8000d20 <__udivmoddi4+0xa4>
 8000d18:	40d4      	lsrs	r4, r2
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d909      	bls.n	8000d3e <__udivmoddi4+0xc2>
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	f000 80ef 	beq.w	8000f0e <__udivmoddi4+0x292>
 8000d30:	2600      	movs	r6, #0
 8000d32:	e9c5 0100 	strd	r0, r1, [r5]
 8000d36:	4630      	mov	r0, r6
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	fab3 f683 	clz	r6, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d14a      	bne.n	8000ddc <__udivmoddi4+0x160>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xd4>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 80f9 	bhi.w	8000f42 <__udivmoddi4+0x2c6>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb61 0303 	sbc.w	r3, r1, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	469e      	mov	lr, r3
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e0      	beq.n	8000d20 <__udivmoddi4+0xa4>
 8000d5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d62:	e7dd      	b.n	8000d20 <__udivmoddi4+0xa4>
 8000d64:	b902      	cbnz	r2, 8000d68 <__udivmoddi4+0xec>
 8000d66:	deff      	udf	#255	; 0xff
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	f040 8092 	bne.w	8000e96 <__udivmoddi4+0x21a>
 8000d72:	eba1 010c 	sub.w	r1, r1, ip
 8000d76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7a:	fa1f fe8c 	uxth.w	lr, ip
 8000d7e:	2601      	movs	r6, #1
 8000d80:	0c20      	lsrs	r0, r4, #16
 8000d82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d86:	fb07 1113 	mls	r1, r7, r3, r1
 8000d8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8e:	fb0e f003 	mul.w	r0, lr, r3
 8000d92:	4288      	cmp	r0, r1
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x12c>
 8000d96:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x12a>
 8000da0:	4288      	cmp	r0, r1
 8000da2:	f200 80cb 	bhi.w	8000f3c <__udivmoddi4+0x2c0>
 8000da6:	4643      	mov	r3, r8
 8000da8:	1a09      	subs	r1, r1, r0
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1110 	mls	r1, r7, r0, r1
 8000db4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x156>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x154>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	f200 80bb 	bhi.w	8000f46 <__udivmoddi4+0x2ca>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	eba4 040e 	sub.w	r4, r4, lr
 8000dd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dda:	e79c      	b.n	8000d16 <__udivmoddi4+0x9a>
 8000ddc:	f1c6 0720 	rsb	r7, r6, #32
 8000de0:	40b3      	lsls	r3, r6
 8000de2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dea:	fa20 f407 	lsr.w	r4, r0, r7
 8000dee:	fa01 f306 	lsl.w	r3, r1, r6
 8000df2:	431c      	orrs	r4, r3
 8000df4:	40f9      	lsrs	r1, r7
 8000df6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e02:	0c20      	lsrs	r0, r4, #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fb09 1118 	mls	r1, r9, r8, r1
 8000e0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e10:	fb08 f00e 	mul.w	r0, r8, lr
 8000e14:	4288      	cmp	r0, r1
 8000e16:	fa02 f206 	lsl.w	r2, r2, r6
 8000e1a:	d90b      	bls.n	8000e34 <__udivmoddi4+0x1b8>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e24:	f080 8088 	bcs.w	8000f38 <__udivmoddi4+0x2bc>
 8000e28:	4288      	cmp	r0, r1
 8000e2a:	f240 8085 	bls.w	8000f38 <__udivmoddi4+0x2bc>
 8000e2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e48:	458e      	cmp	lr, r1
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x1e2>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e54:	d26c      	bcs.n	8000f30 <__udivmoddi4+0x2b4>
 8000e56:	458e      	cmp	lr, r1
 8000e58:	d96a      	bls.n	8000f30 <__udivmoddi4+0x2b4>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	4461      	add	r1, ip
 8000e5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e62:	fba0 9402 	umull	r9, r4, r0, r2
 8000e66:	eba1 010e 	sub.w	r1, r1, lr
 8000e6a:	42a1      	cmp	r1, r4
 8000e6c:	46c8      	mov	r8, r9
 8000e6e:	46a6      	mov	lr, r4
 8000e70:	d356      	bcc.n	8000f20 <__udivmoddi4+0x2a4>
 8000e72:	d053      	beq.n	8000f1c <__udivmoddi4+0x2a0>
 8000e74:	b15d      	cbz	r5, 8000e8e <__udivmoddi4+0x212>
 8000e76:	ebb3 0208 	subs.w	r2, r3, r8
 8000e7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e82:	fa22 f306 	lsr.w	r3, r2, r6
 8000e86:	40f1      	lsrs	r1, r6
 8000e88:	431f      	orrs	r7, r3
 8000e8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8e:	2600      	movs	r6, #0
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	f1c2 0320 	rsb	r3, r2, #32
 8000e9a:	40d8      	lsrs	r0, r3
 8000e9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea4:	4091      	lsls	r1, r2
 8000ea6:	4301      	orrs	r1, r0
 8000ea8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb8:	0c0b      	lsrs	r3, r1, #16
 8000eba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ebe:	fb00 f60e 	mul.w	r6, r0, lr
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x260>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed2:	d22f      	bcs.n	8000f34 <__udivmoddi4+0x2b8>
 8000ed4:	429e      	cmp	r6, r3
 8000ed6:	d92d      	bls.n	8000f34 <__udivmoddi4+0x2b8>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	1b9b      	subs	r3, r3, r6
 8000ede:	b289      	uxth	r1, r1
 8000ee0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eec:	fb06 f30e 	mul.w	r3, r6, lr
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x28a>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000efc:	d216      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d914      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000f02:	3e02      	subs	r6, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f0c:	e738      	b.n	8000d80 <__udivmoddi4+0x104>
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e705      	b.n	8000d20 <__udivmoddi4+0xa4>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e3      	b.n	8000ce0 <__udivmoddi4+0x64>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6f8      	b.n	8000d0e <__udivmoddi4+0x92>
 8000f1c:	454b      	cmp	r3, r9
 8000f1e:	d2a9      	bcs.n	8000e74 <__udivmoddi4+0x1f8>
 8000f20:	ebb9 0802 	subs.w	r8, r9, r2
 8000f24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7a3      	b.n	8000e74 <__udivmoddi4+0x1f8>
 8000f2c:	4646      	mov	r6, r8
 8000f2e:	e7ea      	b.n	8000f06 <__udivmoddi4+0x28a>
 8000f30:	4620      	mov	r0, r4
 8000f32:	e794      	b.n	8000e5e <__udivmoddi4+0x1e2>
 8000f34:	4640      	mov	r0, r8
 8000f36:	e7d1      	b.n	8000edc <__udivmoddi4+0x260>
 8000f38:	46d0      	mov	r8, sl
 8000f3a:	e77b      	b.n	8000e34 <__udivmoddi4+0x1b8>
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	e732      	b.n	8000da8 <__udivmoddi4+0x12c>
 8000f42:	4630      	mov	r0, r6
 8000f44:	e709      	b.n	8000d5a <__udivmoddi4+0xde>
 8000f46:	4464      	add	r4, ip
 8000f48:	3802      	subs	r0, #2
 8000f4a:	e742      	b.n	8000dd2 <__udivmoddi4+0x156>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <pwmzhongduankongzhi>:
bujinpwm dianji[4];

uint16_t dingshi;

void pwmzhongduankongzhi(void)
{
 8000f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f54:	b088      	sub	sp, #32
 8000f56:	af00      	add	r7, sp, #0

	//如果用的不是pwm方式，首先交换引脚电平给出脉冲�??
	//jjj[0] = TIM4->CNT;

	if(PWMKUANDU > 0 )//判断电机方向，增加绝对位置或者减少绝对位
 8000f58:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <pwmzhongduankongzhi+0x1a8>)
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d01d      	beq.n	8000f9c <pwmzhongduankongzhi+0x4c>
	{
		if(dianji[0].dangqiansudu > 0)dianji[0].dangqianweizhi++;
 8000f60:	4b66      	ldr	r3, [pc, #408]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	f173 0300 	sbcs.w	r3, r3, #0
 8000f6c:	db08      	blt.n	8000f80 <pwmzhongduankongzhi+0x30>
 8000f6e:	4b63      	ldr	r3, [pc, #396]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000f70:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000f74:	1c50      	adds	r0, r2, #1
 8000f76:	f143 0100 	adc.w	r1, r3, #0
 8000f7a:	4b60      	ldr	r3, [pc, #384]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000f7c:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
		if(dianji[0].dangqiansudu < 0)dianji[0].dangqianweizhi--;
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	da08      	bge.n	8000f9c <pwmzhongduankongzhi+0x4c>
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000f8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000f90:	1e54      	subs	r4, r2, #1
 8000f92:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000f96:	4b59      	ldr	r3, [pc, #356]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000f98:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
	}

	//判断电机正转还是反转
	if(dianji[0].dangqiansudu > 0)
 8000f9c:	4b57      	ldr	r3, [pc, #348]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	2a01      	cmp	r2, #1
 8000fa4:	f173 0300 	sbcs.w	r3, r3, #0
 8000fa8:	db6e      	blt.n	8001088 <pwmzhongduankongzhi+0x138>
	{
		dianji[0].yudingsudu = dianji[0].zuidasudu;
 8000faa:	4b54      	ldr	r3, [pc, #336]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fb0:	4952      	ldr	r1, [pc, #328]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000fb2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		//设置方向引脚输出-20230322
		//--------------------------------------------------------------速度控制�???-20230322
		if(dianji[0].yudingsudu > dianji[0].dangqiansudu)// 如果没有达到�???大度，继续加�???-20230322
 8000fb6:	4b51      	ldr	r3, [pc, #324]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000fb8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	4282      	cmp	r2, r0
 8000fc4:	418b      	sbcs	r3, r1
 8000fc6:	da07      	bge.n	8000fd8 <pwmzhongduankongzhi+0x88>
		{
			dianji[0].sudukongzhi = 1;
 8000fc8:	494c      	ldr	r1, [pc, #304]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000fca:	f04f 0201 	mov.w	r2, #1
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd6:	e018      	b.n	800100a <pwmzhongduankongzhi+0xba>
		}else{
				if(dianji[0].yudingsudu == dianji[0].dangqiansudu)
 8000fd8:	4b48      	ldr	r3, [pc, #288]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000fda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	4299      	cmp	r1, r3
 8000fe6:	bf08      	it	eq
 8000fe8:	4290      	cmpeq	r0, r2
 8000fea:	d107      	bne.n	8000ffc <pwmzhongduankongzhi+0xac>
				{
					dianji[0].sudukongzhi = 0;//否则不加�???-20230322
 8000fec:	4943      	ldr	r1, [pc, #268]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000ffa:	e006      	b.n	800100a <pwmzhongduankongzhi+0xba>
				}else{
					dianji[0].sudukongzhi = -1;//否则不加�???-20230322
 8000ffc:	493f      	ldr	r1, [pc, #252]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e9c1 2304 	strd	r2, r3, [r1, #16]
				}
			}
		dianji[0].tingzhiweizhi = dianji[0].dangqianweizhi + dianji[0].dangqiansudu;// 计算得到当前停止�??????
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 800100c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001010:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	eb10 0802 	adds.w	r8, r0, r2
 800101a:	eb41 0903 	adc.w	r9, r1, r3
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8001020:	e9c3 8906 	strd	r8, r9, [r3, #24]
		// 判断电机是否�???要减�???-20230322
		if(dianji[0].tingzhiweizhi >= dianji[0].yudingweizhi)
 8001024:	4b35      	ldr	r3, [pc, #212]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8001026:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800102a:	4b34      	ldr	r3, [pc, #208]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 800102c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001030:	4290      	cmp	r0, r2
 8001032:	eb71 0303 	sbcs.w	r3, r1, r3
 8001036:	db06      	blt.n	8001046 <pwmzhongduankongzhi+0xf6>
		{
			dianji[0].sudukongzhi = -1;
 8001038:	4930      	ldr	r1, [pc, #192]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 800103a:	f04f 32ff 	mov.w	r2, #4294967295
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
		dianji[0].dangqiansudu = dianji[0].dangqiansudu + dianji[0].sudukongzhi;
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8001048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 800104e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001052:	1884      	adds	r4, r0, r2
 8001054:	61bc      	str	r4, [r7, #24]
 8001056:	eb41 0303 	adc.w	r3, r1, r3
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 800105e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001062:	e9c3 1200 	strd	r1, r2, [r3]
		//DINGSHIQICHONGZHI =jiasuliebiao[ dianji[0].dangqiansudu];// 设置定时器中断时�??????
		//DINGSHIQICHONGZHI = 32000000 / ( sqrt(250000 + 2 * 50000 * dianji[0].dangqiansudu));
		DINGSHIQICHONGZHI = dianji[0].dingshi;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8001068:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <pwmzhongduankongzhi+0x1a8>)
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
		//---------------------------------------------------------------
		if(PWMKUANDU == 0)
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <pwmzhongduankongzhi+0x1a8>)
 8001072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <pwmzhongduankongzhi+0x138>
		{
			while(DINGSHIQIZHI <= ccr);
 8001078:	bf00      	nop
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <pwmzhongduankongzhi+0x1a8>)
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d9fb      	bls.n	800107a <pwmzhongduankongzhi+0x12a>
			PWMKUANDU = ccr;
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <pwmzhongduankongzhi+0x1a8>)
 8001084:	2264      	movs	r2, #100	; 0x64
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	if(dianji[0].dangqiansudu < 0)
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	2b00      	cmp	r3, #0
 8001090:	da7f      	bge.n	8001192 <pwmzhongduankongzhi+0x242>
	{
		//设置方向引脚输出-20230322
		dianji[0].yudingsudu = -dianji[0].zuidasudu;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 8001094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001098:	2100      	movs	r1, #0
 800109a:	4250      	negs	r0, r2
 800109c:	6138      	str	r0, [r7, #16]
 800109e:	eb61 0303 	sbc.w	r3, r1, r3
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 80010a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80010aa:	e9c3 1202 	strd	r1, r2, [r3, #8]
		//--------------------------------------------------------------速度控制�???-20230322
		if(dianji[0].yudingsudu < dianji[0].dangqiansudu)// 如果没有达到�???大度，继续加�???-20230322
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 80010b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	4290      	cmp	r0, r2
 80010bc:	eb71 0303 	sbcs.w	r3, r1, r3
 80010c0:	da07      	bge.n	80010d2 <pwmzhongduankongzhi+0x182>
		{
			dianji[0].sudukongzhi = -1;
 80010c2:	490e      	ldr	r1, [pc, #56]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80010d0:	e01d      	b.n	800110e <pwmzhongduankongzhi+0x1be>
		}else{
			if(dianji[0].yudingsudu == dianji[0].dangqiansudu)
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 80010d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	4299      	cmp	r1, r3
 80010e0:	bf08      	it	eq
 80010e2:	4290      	cmpeq	r0, r2
 80010e4:	d10c      	bne.n	8001100 <pwmzhongduankongzhi+0x1b0>
			{
				dianji[0].sudukongzhi = 0;//否则不加�???-20230322
 80010e6:	4905      	ldr	r1, [pc, #20]	; (80010fc <pwmzhongduankongzhi+0x1ac>)
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80010f4:	e00b      	b.n	800110e <pwmzhongduankongzhi+0x1be>
 80010f6:	bf00      	nop
 80010f8:	40014000 	.word	0x40014000
 80010fc:	20000188 	.word	0x20000188
			}else{
				dianji[0].sudukongzhi = 1;//否则不加�???-20230322
 8001100:	495a      	ldr	r1, [pc, #360]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001102:	f04f 0201 	mov.w	r2, #1
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
		}
		dianji[0].tingzhiweizhi = dianji[0].dangqianweizhi + dianji[0].dangqiansudu;// 计算得到当前停止�??????
 800110e:	4b57      	ldr	r3, [pc, #348]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001110:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001114:	4b55      	ldr	r3, [pc, #340]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	1884      	adds	r4, r0, r2
 800111c:	60bc      	str	r4, [r7, #8]
 800111e:	eb41 0303 	adc.w	r3, r1, r3
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4b51      	ldr	r3, [pc, #324]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001126:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800112a:	e9c3 1206 	strd	r1, r2, [r3, #24]
		// 判断电机是否�???要减�???-20230322
		if(dianji[0].tingzhiweizhi <= dianji[0].yudingweizhi)
 800112e:	4b4f      	ldr	r3, [pc, #316]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001130:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001134:	494d      	ldr	r1, [pc, #308]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001136:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
 800113a:	4290      	cmp	r0, r2
 800113c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001140:	db06      	blt.n	8001150 <pwmzhongduankongzhi+0x200>
		{
			dianji[0].sudukongzhi = 1;
 8001142:	494a      	ldr	r1, [pc, #296]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001144:	f04f 0201 	mov.w	r2, #1
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
		dianji[0].dangqiansudu = dianji[0].dangqiansudu + dianji[0].sudukongzhi;
 8001150:	4b46      	ldr	r3, [pc, #280]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001156:	4b45      	ldr	r3, [pc, #276]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001158:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800115c:	1884      	adds	r4, r0, r2
 800115e:	603c      	str	r4, [r7, #0]
 8001160:	eb41 0303 	adc.w	r3, r1, r3
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001168:	e9d7 1200 	ldrd	r1, r2, [r7]
 800116c:	e9c3 1200 	strd	r1, r2, [r3]
		//DINGSHIQICHONGZHI =jiasuliebiao[ -dianji[0].dangqiansudu];// 设置定时器中断时�??????
		//DINGSHIQICHONGZHI = 32000000 / ( sqrt(250000 + 2 * 50000 * (-dianji[0].dangqiansudu)));
		DINGSHIQICHONGZHI = dianji[0].dingshi;
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001172:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001176:	4b3e      	ldr	r3, [pc, #248]	; (8001270 <pwmzhongduankongzhi+0x320>)
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
		//---------------------------------------------------------------
		if(PWMKUANDU == 0)
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <pwmzhongduankongzhi+0x320>)
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	2b00      	cmp	r3, #0
 8001180:	d107      	bne.n	8001192 <pwmzhongduankongzhi+0x242>
		{
			while(DINGSHIQIZHI <= ccr);
 8001182:	bf00      	nop
 8001184:	4b3a      	ldr	r3, [pc, #232]	; (8001270 <pwmzhongduankongzhi+0x320>)
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	2b64      	cmp	r3, #100	; 0x64
 800118a:	d9fb      	bls.n	8001184 <pwmzhongduankongzhi+0x234>
			PWMKUANDU = ccr;
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <pwmzhongduankongzhi+0x320>)
 800118e:	2264      	movs	r2, #100	; 0x64
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}

	if(dianji[0].dangqiansudu == 0)
 8001192:	4b36      	ldr	r3, [pc, #216]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	4313      	orrs	r3, r2
 800119a:	d145      	bne.n	8001228 <pwmzhongduankongzhi+0x2d8>
	{
		PWMKUANDU = 0;
 800119c:	4b34      	ldr	r3, [pc, #208]	; (8001270 <pwmzhongduankongzhi+0x320>)
 800119e:	2200      	movs	r2, #0
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
			if(dianji[0].dangqianweizhi < dianji[0].yudingweizhi)
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <pwmzhongduankongzhi+0x31c>)
 80011a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <pwmzhongduankongzhi+0x31c>)
 80011aa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80011ae:	4290      	cmp	r0, r2
 80011b0:	eb71 0303 	sbcs.w	r3, r1, r3
 80011b4:	da14      	bge.n	80011e0 <pwmzhongduankongzhi+0x290>
			{
				  dianji[0].yudingsudu = dianji[0].zuidasudu;
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <pwmzhongduankongzhi+0x31c>)
 80011b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011bc:	492b      	ldr	r1, [pc, #172]	; (800126c <pwmzhongduankongzhi+0x31c>)
 80011be:	e9c1 2302 	strd	r2, r3, [r1, #8]
				  dianji[0].dangqiansudu = 1;
 80011c2:	492a      	ldr	r1, [pc, #168]	; (800126c <pwmzhongduankongzhi+0x31c>)
 80011c4:	f04f 0201 	mov.w	r2, #1
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9c1 2300 	strd	r2, r3, [r1]
				  while(DINGSHIQIZHI <= ccr);
 80011d0:	bf00      	nop
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <pwmzhongduankongzhi+0x320>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d9fb      	bls.n	80011d2 <pwmzhongduankongzhi+0x282>
				  PWMKUANDU = ccr;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <pwmzhongduankongzhi+0x320>)
 80011dc:	2264      	movs	r2, #100	; 0x64
 80011de:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(dianji[0].dangqianweizhi > dianji[0].yudingweizhi)
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <pwmzhongduankongzhi+0x31c>)
 80011e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80011e6:	4921      	ldr	r1, [pc, #132]	; (800126c <pwmzhongduankongzhi+0x31c>)
 80011e8:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
 80011ec:	4290      	cmp	r0, r2
 80011ee:	eb71 0303 	sbcs.w	r3, r1, r3
 80011f2:	da19      	bge.n	8001228 <pwmzhongduankongzhi+0x2d8>
			{
				  dianji[0].yudingsudu = -dianji[0].zuidasudu;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <pwmzhongduankongzhi+0x31c>)
 80011f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011fa:	2100      	movs	r1, #0
 80011fc:	f1d2 0a00 	rsbs	sl, r2, #0
 8001200:	eb61 0b03 	sbc.w	fp, r1, r3
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001206:	e9c3 ab02 	strd	sl, fp, [r3, #8]
				  dianji[0].dangqiansudu = -1;
 800120a:	4918      	ldr	r1, [pc, #96]	; (800126c <pwmzhongduankongzhi+0x31c>)
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	e9c1 2300 	strd	r2, r3, [r1]
				  while(DINGSHIQIZHI <= ccr);
 8001218:	bf00      	nop
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <pwmzhongduankongzhi+0x320>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d9fb      	bls.n	800121a <pwmzhongduankongzhi+0x2ca>
				  PWMKUANDU = ccr;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <pwmzhongduankongzhi+0x320>)
 8001224:	2264      	movs	r2, #100	; 0x64
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
			}
	}
	if(dianji[0].dangqiansudu > 0)
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <pwmzhongduankongzhi+0x31c>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	2a01      	cmp	r2, #1
 8001230:	f173 0300 	sbcs.w	r3, r3, #0
 8001234:	db07      	blt.n	8001246 <pwmzhongduankongzhi+0x2f6>
		{
		dianji[0].shijifangxiang = 1;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001238:	2201      	movs	r2, #1
 800123a:	649a      	str	r2, [r3, #72]	; 0x48
			FANGXIANGZHENG;
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <pwmzhongduankongzhi+0x324>)
 8001242:	f001 ff93 	bl	800316c <HAL_GPIO_WritePin>
		}
	if(dianji[0].dangqiansudu < 0)
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da07      	bge.n	8001260 <pwmzhongduankongzhi+0x310>
		{
		dianji[0].shijifangxiang = 0;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <pwmzhongduankongzhi+0x31c>)
 8001252:	2200      	movs	r2, #0
 8001254:	649a      	str	r2, [r3, #72]	; 0x48
			FANGXIANGFAN;
 8001256:	2201      	movs	r2, #1
 8001258:	2102      	movs	r1, #2
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <pwmzhongduankongzhi+0x324>)
 800125c:	f001 ff86 	bl	800316c <HAL_GPIO_WritePin>
		}
	//jjj[1] = TIM4->CNT;
	//判断下一个脉冲所�?????????要延迟的时间，设置定时器�?????????
	// 如果目标位置和当前位置重合，做出动作
}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800126a:	bf00      	nop
 800126c:	20000188 	.word	0x20000188
 8001270:	40014000 	.word	0x40014000
 8001274:	40020000 	.word	0x40020000

08001278 <s2b2>:
//参数1 初始速度
//参数2 加速度
//参数3 目标速度
//返回达到目标速度所需的步数
uint64_t s2b2(uint64_t u,uint64_t a ,uint64_t s)
{
 8001278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800127c:	b088      	sub	sp, #32
 800127e:	af00      	add	r7, sp, #0
 8001280:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001284:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t i = 0,x;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//chuankoufasong(210,s);

	x =(uint64_t) (s * s);
 8001294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001298:	fb03 f202 	mul.w	r2, r3, r2
 800129c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012a0:	fb01 f303 	mul.w	r3, r1, r3
 80012a4:	441a      	add	r2, r3
 80012a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a8:	fba3 8903 	umull	r8, r9, r3, r3
 80012ac:	eb02 0309 	add.w	r3, r2, r9
 80012b0:	4699      	mov	r9, r3
 80012b2:	e9c7 8904 	strd	r8, r9, [r7, #16]
 80012b6:	e9c7 8904 	strd	r8, r9, [r7, #16]
	//chuankoufasong(211,x);
	//chuankoufasong(213,a);
	x = (x - u*u)/2/a;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	fb03 f202 	mul.w	r2, r3, r2
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	441a      	add	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	fba3 4503 	umull	r4, r5, r3, r3
 80012d2:	1953      	adds	r3, r2, r5
 80012d4:	461d      	mov	r5, r3
 80012d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012da:	ebb2 0a04 	subs.w	sl, r2, r4
 80012de:	eb63 0b05 	sbc.w	fp, r3, r5
 80012e2:	f04f 0000 	mov.w	r0, #0
 80012e6:	f04f 0100 	mov.w	r1, #0
 80012ea:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80012ee:	ea40 70cb 	orr.w	r0, r0, fp, lsl #31
 80012f2:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80012f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fa:	f7ff fc71 	bl	8000be0 <__aeabi_uldivmod>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//chuankoufasong(212,x);
	return x;
 8001306:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001318 <shishisuduyunsuan>:

//使用外部速度计算器时，周期性调用此函数计算速度
//最小速度的平方加2倍加速度
void shishisuduyunsuan(void)
{
 8001318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800131c:	b08c      	sub	sp, #48	; 0x30
 800131e:	af00      	add	r7, sp, #0
	if(dianji[0].dangqiansudu < 0)
 8001320:	4b75      	ldr	r3, [pc, #468]	; (80014f8 <shishisuduyunsuan+0x1e0>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	2b00      	cmp	r3, #0
 8001328:	da68      	bge.n	80013fc <shishisuduyunsuan+0xe4>
	dianji[0].dingshi = 32000000 / ( sqrt(250000 + 2 * 10000 * (-dianji[0].dangqiansudu)));
 800132a:	4b73      	ldr	r3, [pc, #460]	; (80014f8 <shishisuduyunsuan+0x1e0>)
 800132c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	1b10      	subs	r0, r2, r4
 800133a:	eb63 0105 	sbc.w	r1, r3, r5
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	008b      	lsls	r3, r1, #2
 8001348:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800134c:	0082      	lsls	r2, r0, #2
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	ebb0 0804 	subs.w	r8, r0, r4
 8001356:	eb61 0905 	sbc.w	r9, r1, r5
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800136a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800136e:	4690      	mov	r8, r2
 8001370:	4699      	mov	r9, r3
 8001372:	eb18 0a04 	adds.w	sl, r8, r4
 8001376:	eb49 0b05 	adc.w	fp, r9, r5
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001386:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800138a:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800138e:	4692      	mov	sl, r2
 8001390:	469b      	mov	fp, r3
 8001392:	ebba 0304 	subs.w	r3, sl, r4
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	eb6b 0305 	sbc.w	r3, fp, r5
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80013aa:	4629      	mov	r1, r5
 80013ac:	014b      	lsls	r3, r1, #5
 80013ae:	4621      	mov	r1, r4
 80013b0:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 80013b4:	4621      	mov	r1, r4
 80013b6:	014a      	lsls	r2, r1, #5
 80013b8:	4950      	ldr	r1, [pc, #320]	; (80014fc <shishisuduyunsuan+0x1e4>)
 80013ba:	1851      	adds	r1, r2, r1
 80013bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80013be:	f143 0300 	adc.w	r3, r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013c8:	f7ff f894 	bl	80004f4 <__aeabi_l2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	ec43 2b10 	vmov	d0, r2, r3
 80013d4:	f00a f878 	bl	800b4c8 <sqrt>
 80013d8:	ec53 2b10 	vmov	r2, r3, d0
 80013dc:	a144      	add	r1, pc, #272	; (adr r1, 80014f0 <shishisuduyunsuan+0x1d8>)
 80013de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013e2:	f7ff f9df 	bl	80007a4 <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fb87 	bl	8000b00 <__aeabi_d2uiz>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <shishisuduyunsuan+0x1e0>)
 80013f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	if(dianji[0].dangqiansudu >= 0)
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <shishisuduyunsuan+0x1e0>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db6d      	blt.n	80014e2 <shishisuduyunsuan+0x1ca>
	dianji[0].dingshi = 32000000 / ( sqrt(250000 + 2 * 10000 * (dianji[0].dangqiansudu)));
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <shishisuduyunsuan+0x1e0>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 0400 	mov.w	r4, #0
 8001414:	f04f 0500 	mov.w	r5, #0
 8001418:	008d      	lsls	r5, r1, #2
 800141a:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
 800141e:	0084      	lsls	r4, r0, #2
 8001420:	4620      	mov	r0, r4
 8001422:	4629      	mov	r1, r5
 8001424:	1884      	adds	r4, r0, r2
 8001426:	613c      	str	r4, [r7, #16]
 8001428:	4159      	adcs	r1, r3
 800142a:	6179      	str	r1, [r7, #20]
 800142c:	f04f 0000 	mov.w	r0, #0
 8001430:	f04f 0100 	mov.w	r1, #0
 8001434:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001438:	464c      	mov	r4, r9
 800143a:	00e1      	lsls	r1, r4, #3
 800143c:	4644      	mov	r4, r8
 800143e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8001442:	4644      	mov	r4, r8
 8001444:	00e0      	lsls	r0, r4, #3
 8001446:	4604      	mov	r4, r0
 8001448:	460d      	mov	r5, r1
 800144a:	4621      	mov	r1, r4
 800144c:	1a89      	subs	r1, r1, r2
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	4629      	mov	r1, r5
 8001452:	eb61 0103 	sbc.w	r1, r1, r3
 8001456:	60f9      	str	r1, [r7, #12]
 8001458:	f04f 0000 	mov.w	r0, #0
 800145c:	f04f 0100 	mov.w	r1, #0
 8001460:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001464:	464c      	mov	r4, r9
 8001466:	0121      	lsls	r1, r4, #4
 8001468:	4644      	mov	r4, r8
 800146a:	ea41 7114 	orr.w	r1, r1, r4, lsr #28
 800146e:	4644      	mov	r4, r8
 8001470:	0120      	lsls	r0, r4, #4
 8001472:	4604      	mov	r4, r0
 8001474:	460d      	mov	r5, r1
 8001476:	4621      	mov	r1, r4
 8001478:	1889      	adds	r1, r1, r2
 800147a:	6039      	str	r1, [r7, #0]
 800147c:	4629      	mov	r1, r5
 800147e:	eb43 0101 	adc.w	r1, r3, r1
 8001482:	6079      	str	r1, [r7, #4]
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001490:	4629      	mov	r1, r5
 8001492:	014b      	lsls	r3, r1, #5
 8001494:	4621      	mov	r1, r4
 8001496:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 800149a:	4621      	mov	r1, r4
 800149c:	014a      	lsls	r2, r1, #5
 800149e:	4917      	ldr	r1, [pc, #92]	; (80014fc <shishisuduyunsuan+0x1e4>)
 80014a0:	1851      	adds	r1, r2, r1
 80014a2:	6239      	str	r1, [r7, #32]
 80014a4:	f143 0300 	adc.w	r3, r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
 80014aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014ae:	f7ff f821 	bl	80004f4 <__aeabi_l2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	ec43 2b10 	vmov	d0, r2, r3
 80014ba:	f00a f805 	bl	800b4c8 <sqrt>
 80014be:	ec53 2b10 	vmov	r2, r3, d0
 80014c2:	a10b      	add	r1, pc, #44	; (adr r1, 80014f0 <shishisuduyunsuan+0x1d8>)
 80014c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014c8:	f7ff f96c 	bl	80007a4 <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb14 	bl	8000b00 <__aeabi_d2uiz>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <shishisuduyunsuan+0x1e0>)
 80014de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 80014e2:	bf00      	nop
 80014e4:	3730      	adds	r7, #48	; 0x30
 80014e6:	46bd      	mov	sp, r7
 80014e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	00000000 	.word	0x00000000
 80014f4:	417e8480 	.word	0x417e8480
 80014f8:	20000188 	.word	0x20000188
 80014fc:	0003d090 	.word	0x0003d090

08001500 <duankou1qingchu>:
	}

	return inok;
}
void duankou1qingchu(void)//端口3清除数据
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
	uint32_t i;
	for(i = 0; i < jieshou1zongchangdu;i ++)
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e007      	b.n	800151c <duankou1qingchu+0x1c>
		{
			jieshou1[ i ] = 0;
 800150c:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <duankou1qingchu+0x40>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < jieshou1zongchangdu;i ++)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3301      	adds	r3, #1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <duankou1qingchu+0x44>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4293      	cmp	r3, r2
 8001526:	d3f1      	bcc.n	800150c <duankou1qingchu+0xc>
		}
		jieshou1tim = 0;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <duankou1qingchu+0x48>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
		jieshou1changdu = 0;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <duankou1qingchu+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	200002c8 	.word	0x200002c8
 8001544:	20000000 	.word	0x20000000
 8001548:	200002f8 	.word	0x200002f8
 800154c:	200002f4 	.word	0x200002f4

08001550 <duankou1xunhuan>:

void duankou1xunhuan(void)//端口3循环处理事件
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	jieshou1tim++;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <duankou1xunhuan+0x30>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <duankou1xunhuan+0x30>)
 800155c:	6013      	str	r3, [r2, #0]
	if(jieshou1changdu == 0)//如果没有接收到数据，就将错误溢出设置成0
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <duankou1xunhuan+0x34>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <duankou1xunhuan+0x1c>
	{
		jieshou1tim = 0;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <duankou1xunhuan+0x30>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
	}
	if(jieshou1tim > 1000)
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <duankou1xunhuan+0x30>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001574:	d901      	bls.n	800157a <duankou1xunhuan+0x2a>
	{
		duankou1qingchu();
 8001576:	f7ff ffc3 	bl	8001500 <duankou1qingchu>
	}

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200002f8 	.word	0x200002f8
 8001584:	200002f4 	.word	0x200002f4

08001588 <USART1_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint8_t d;

	if(jieshou1zongchangdu > jieshou1changdu)
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <USART1_IRQHandler+0x48>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <USART1_IRQHandler+0x4c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d90e      	bls.n	80015ba <USART1_IRQHandler+0x32>
		{
			jieshou1[ jieshou1changdu ] = USART1->DR;
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <USART1_IRQHandler+0x50>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <USART1_IRQHandler+0x4c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b2d1      	uxtb	r1, r2
 80015a6:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <USART1_IRQHandler+0x54>)
 80015a8:	54d1      	strb	r1, [r2, r3]
			jieshou1tim = 0;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <USART1_IRQHandler+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
			jieshou1changdu++;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <USART1_IRQHandler+0x4c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <USART1_IRQHandler+0x4c>)
 80015b8:	6013      	str	r3, [r2, #0]

		}
	d = USART1->DR;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <USART1_IRQHandler+0x50>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	71fb      	strb	r3, [r7, #7]
	d=d;
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <USART1_IRQHandler+0x5c>)
 80015c2:	f004 fe47 	bl	8006254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000000 	.word	0x20000000
 80015d4:	200002f4 	.word	0x200002f4
 80015d8:	40011000 	.word	0x40011000
 80015dc:	200002c8 	.word	0x200002c8
 80015e0:	200002f8 	.word	0x200002f8
 80015e4:	20000568 	.word	0x20000568

080015e8 <chuankoufasongzi>:




uint8_t chuankoufasongzi(uint8_t x)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	uint8_t zi[2];

	zi[0] = x;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	733b      	strb	r3, [r7, #12]

	HAL_UART_Transmit(duankou, zi, 1, 100);
 80015f6:	f107 010c 	add.w	r1, r7, #12
 80015fa:	2364      	movs	r3, #100	; 0x64
 80015fc:	2201      	movs	r2, #1
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <chuankoufasongzi+0x28>)
 8001600:	f004 fd65 	bl	80060ce <HAL_UART_Transmit>
	return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000568 	.word	0x20000568

08001614 <chuankoufasongshuzi>:


uint8_t shuzidaowenbenwenben[20], shuzidaowenbenlinshi[20];
uint8_t* chuankoufasongshuzi(int32_t shuzi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

	int8_t i = 0,u = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	2300      	movs	r3, #0
 8001622:	73bb      	strb	r3, [r7, #14]
	if(shuzi < 0)//先判断是否需要加负号
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	da0d      	bge.n	8001646 <chuankoufasongshuzi+0x32>
	{
		shuzi = -shuzi;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	425b      	negs	r3, r3
 800162e:	607b      	str	r3, [r7, #4]
		shuzidaowenbenwenben[ i ] = '-';
 8001630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001634:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <chuankoufasongshuzi+0xd4>)
 8001636:	212d      	movs	r1, #45	; 0x2d
 8001638:	54d1      	strb	r1, [r2, r3]
		i++;
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3301      	adds	r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	73fb      	strb	r3, [r7, #15]
	}

	do
	{
			shuzidaowenbenlinshi[ u ] = (shuzi%10);
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4b28      	ldr	r3, [pc, #160]	; (80016ec <chuankoufasongshuzi+0xd8>)
 800164a:	fb83 1302 	smull	r1, r3, r3, r2
 800164e:	1099      	asrs	r1, r3, #2
 8001650:	17d3      	asrs	r3, r2, #31
 8001652:	1ac9      	subs	r1, r1, r3
 8001654:	460b      	mov	r3, r1
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	1ad1      	subs	r1, r2, r3
 800165e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001662:	b2c9      	uxtb	r1, r1
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <chuankoufasongshuzi+0xdc>)
 8001666:	54d1      	strb	r1, [r2, r3]
			shuzi /= 10;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a20      	ldr	r2, [pc, #128]	; (80016ec <chuankoufasongshuzi+0xd8>)
 800166c:	fb82 1203 	smull	r1, r2, r2, r3
 8001670:	1092      	asrs	r2, r2, #2
 8001672:	17db      	asrs	r3, r3, #31
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	607b      	str	r3, [r7, #4]
			u++;
 8001678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3301      	adds	r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	73bb      	strb	r3, [r7, #14]
	} while(shuzi > 0);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	dcdd      	bgt.n	8001646 <chuankoufasongshuzi+0x32>
	u--;
 800168a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b01      	subs	r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	73bb      	strb	r3, [r7, #14]
	for(;u>=0;u--)
 8001696:	e015      	b.n	80016c4 <chuankoufasongshuzi+0xb0>
	{
		shuzidaowenbenwenben[ i ] = shuzidaowenbenlinshi[ u ] + 48;
 8001698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <chuankoufasongshuzi+0xdc>)
 800169e:	5cd2      	ldrb	r2, [r2, r3]
 80016a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a4:	3230      	adds	r2, #48	; 0x30
 80016a6:	b2d1      	uxtb	r1, r2
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <chuankoufasongshuzi+0xd4>)
 80016aa:	54d1      	strb	r1, [r2, r3]
		i++;
 80016ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	73fb      	strb	r3, [r7, #15]
	for(;u>=0;u--)
 80016b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	3b01      	subs	r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	73bb      	strb	r3, [r7, #14]
 80016c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	dae5      	bge.n	8001698 <chuankoufasongshuzi+0x84>
	}


	HAL_UART_Transmit(duankou, shuzidaowenbenwenben ,i,100);
 80016cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	2364      	movs	r3, #100	; 0x64
 80016d4:	4904      	ldr	r1, [pc, #16]	; (80016e8 <chuankoufasongshuzi+0xd4>)
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <chuankoufasongshuzi+0xe0>)
 80016d8:	f004 fcf9 	bl	80060ce <HAL_UART_Transmit>

	return shuzidaowenbenwenben;
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <chuankoufasongshuzi+0xd4>)
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200002fc 	.word	0x200002fc
 80016ec:	66666667 	.word	0x66666667
 80016f0:	20000310 	.word	0x20000310
 80016f4:	20000568 	.word	0x20000568

080016f8 <chuankoufasong>:

void chuankoufasong(uint8_t tou,uint32_t zi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
	  chuankoufasongzi(tou);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff6e 	bl	80015e8 <chuankoufasongzi>
	  chuankoufasongshuzi(zi);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff80 	bl	8001614 <chuankoufasongshuzi>
	  chuankoufasongzi(200);
 8001714:	20c8      	movs	r0, #200	; 0xc8
 8001716:	f7ff ff67 	bl	80015e8 <chuankoufasongzi>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <reverse>:
}


// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
 8001722:	b480      	push	{r7}
 8001724:	b087      	sub	sp, #28
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3b01      	subs	r3, #1
 8001734:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001736:	e018      	b.n	800176a <reverse+0x48>
        temp = str[i];
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	441a      	add	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	440b      	add	r3, r1
 800174e:	7812      	ldrb	r2, [r2, #0]
 8001750:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
        i++;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
        j--;
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b01      	subs	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbe2      	blt.n	8001738 <reverse+0x16>
    }
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
    while (x) {
 8001790:	e01d      	b.n	80017ce <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <intToStr+0x80>)
 8001796:	fb83 1302 	smull	r1, r3, r3, r2
 800179a:	1099      	asrs	r1, r3, #2
 800179c:	17d3      	asrs	r3, r2, #31
 800179e:	1ac9      	subs	r1, r1, r3
 80017a0:	460b      	mov	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	1ad1      	subs	r1, r2, r3
 80017aa:	b2ca      	uxtb	r2, r1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	1c59      	adds	r1, r3, #1
 80017b0:	6179      	str	r1, [r7, #20]
 80017b2:	4619      	mov	r1, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	440b      	add	r3, r1
 80017b8:	3230      	adds	r2, #48	; 0x30
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <intToStr+0x80>)
 80017c2:	fb82 1203 	smull	r1, r2, r2, r3
 80017c6:	1092      	asrs	r2, r2, #2
 80017c8:	17db      	asrs	r3, r3, #31
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	60fb      	str	r3, [r7, #12]
    while (x) {
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1de      	bne.n	8001792 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80017d4:	e007      	b.n	80017e6 <intToStr+0x66>
        str[i++] = '0';
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	617a      	str	r2, [r7, #20]
 80017dc:	461a      	mov	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	4413      	add	r3, r2
 80017e2:	2230      	movs	r2, #48	; 0x30
 80017e4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbf3      	blt.n	80017d6 <intToStr+0x56>

    reverse(str, i);
 80017ee:	6979      	ldr	r1, [r7, #20]
 80017f0:	68b8      	ldr	r0, [r7, #8]
 80017f2:	f7ff ff96 	bl	8001722 <reverse>
    //str[i] =200;// '\0';
    return i;
 80017f6:	697b      	ldr	r3, [r7, #20]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	66666667 	.word	0x66666667
 8001804:	00000000 	.word	0x00000000

08001808 <ftoa>:
//st[0]=210;
//l = ftoa((double)-123.456, (char*)&st[1], 2);
//HAL_UART_Transmit(&huart1, st ,l+2,100);//可以直接这样发送数字

uint32_t ftoa(double n, char* res, int afterpoint)//会在末尾添加结束符号，所以不能越界-20230409
{
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    // Extract integer part
	int i=0;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
	if(n < 0)
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001826:	f7ff f905 	bl	8000a34 <__aeabi_dcmplt>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00a      	beq.n	8001846 <ftoa+0x3e>
	{
		n = -n;
 8001830:	68bc      	ldr	r4, [r7, #8]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001838:	e9c7 4502 	strd	r4, r5, [r7, #8]
		i = 1;
 800183c:	2301      	movs	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
		res[0] = '-';
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	222d      	movs	r2, #45	; 0x2d
 8001844:	701a      	strb	r2, [r3, #0]
	}
    int ipart = (int)n;
 8001846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800184a:	f7ff f931 	bl	8000ab0 <__aeabi_d2iz>
 800184e:	4603      	mov	r3, r0
 8001850:	61bb      	str	r3, [r7, #24]

    // Extract floating part
    double fpart = n - (double)ipart;
 8001852:	69b8      	ldr	r0, [r7, #24]
 8001854:	f7fe fe12 	bl	800047c <__aeabi_i2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001860:	f7fe fcbe 	bl	80001e0 <__aeabi_dsub>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // convert integer part to string
    if(ipart == 0)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <ftoa+0x84>
    {
        i += intToStr(ipart, res+i, 1)  ;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	2201      	movs	r2, #1
 800187a:	4619      	mov	r1, r3
 800187c:	69b8      	ldr	r0, [r7, #24]
 800187e:	f7ff ff7f 	bl	8001780 <intToStr>
 8001882:	4602      	mov	r2, r0
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	4413      	add	r3, r2
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e00b      	b.n	80018a4 <ftoa+0x9c>
    }else
    {
        i += intToStr(ipart, res+i, 0) ;
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	69b8      	ldr	r0, [r7, #24]
 8001898:	f7ff ff72 	bl	8001780 <intToStr>
 800189c:	4602      	mov	r2, r0
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	61fb      	str	r3, [r7, #28]
    }


    // check for display option after point
    if (afterpoint != 0) {
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d02a      	beq.n	8001900 <ftoa+0xf8>
        res[i] = '.'; // add dot
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	222e      	movs	r2, #46	; 0x2e
 80018b2:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f7fe fde1 	bl	800047c <__aeabi_i2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	ec43 2b11 	vmov	d1, r2, r3
 80018c2:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8001910 <ftoa+0x108>
 80018c6:	f009 fd8f 	bl	800b3e8 <pow>
 80018ca:	ec53 2b10 	vmov	r2, r3, d0
 80018ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018d2:	f7fe fe3d 	bl	8000550 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	e9c7 2304 	strd	r2, r3, [r7, #16]

        i += intToStr((int)fpart, res + i + 1, afterpoint)+1;
 80018de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e2:	f7ff f8e5 	bl	8000ab0 <__aeabi_d2iz>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3301      	adds	r3, #1
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff ff45 	bl	8001780 <intToStr>
 80018f6:	4603      	mov	r3, r0
 80018f8:	3301      	adds	r3, #1
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	61fb      	str	r3, [r7, #28]

    }

    return i;
 8001900:	69fb      	ldr	r3, [r7, #28]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bdb0      	pop	{r4, r5, r7, pc}
 800190a:	bf00      	nop
 800190c:	f3af 8000 	nop.w
 8001910:	00000000 	.word	0x00000000
 8001914:	40240000 	.word	0x40240000

08001918 <TIM1_UP_TIM10_IRQHandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TIM1_UP_TIM10_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	xitongshijian++;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <TIM1_UP_TIM10_IRQHandler+0x28>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	1c50      	adds	r0, r2, #1
 8001924:	f143 0100 	adc.w	r1, r3, #0
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <TIM1_UP_TIM10_IRQHandler+0x28>)
 800192a:	e9c3 0100 	strd	r0, r1, [r3]
	shishisuduyunsuan();
 800192e:	f7ff fcf3 	bl	8001318 <shishisuduyunsuan>
	//duankoupanduan();
	duankou1xunhuan();
 8001932:	f7ff fe0d 	bl	8001550 <duankou1xunhuan>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8001938:	f003 fd6a 	bl	8005410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000398 	.word	0x20000398
 8001944:	20000490 	.word	0x20000490

08001948 <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	pwmzhongduankongzhi();
 800194c:	f7ff fb00 	bl	8000f50 <pwmzhongduankongzhi>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001952:	f003 fd5d 	bl	8005410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200004d8 	.word	0x200004d8

08001960 <jisuanjueduijuli_6x>:
int64_t jisuanjueduijuli_3x(int64_t a,int64_t b,int64_t c)
{
	return sqrt(a*a + b*b + c*c);
}
int64_t jisuanjueduijuli_6x(int64_t a,int64_t b,int64_t c,int64_t d,int64_t e,int64_t f)
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b094      	sub	sp, #80	; 0x50
 8001966:	af00      	add	r7, sp, #0
 8001968:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800196c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	return sqrt(a*a + b*b + c*c + d*d +e*e + f*f);
 8001970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001974:	fb03 f102 	mul.w	r1, r3, r2
 8001978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800197a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	18ca      	adds	r2, r1, r3
 8001982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001984:	fba3 8903 	umull	r8, r9, r3, r3
 8001988:	eb02 0309 	add.w	r3, r2, r9
 800198c:	4699      	mov	r9, r3
 800198e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001992:	fb03 f102 	mul.w	r1, r3, r2
 8001996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	18ca      	adds	r2, r1, r3
 80019a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a2:	fba3 4503 	umull	r4, r5, r3, r3
 80019a6:	1953      	adds	r3, r2, r5
 80019a8:	461d      	mov	r5, r3
 80019aa:	eb18 0304 	adds.w	r3, r8, r4
 80019ae:	623b      	str	r3, [r7, #32]
 80019b0:	eb49 0305 	adc.w	r3, r9, r5
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
 80019b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ba:	fb03 f102 	mul.w	r1, r3, r2
 80019be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	18ca      	adds	r2, r1, r3
 80019c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ca:	fba3 ab03 	umull	sl, fp, r3, r3
 80019ce:	eb02 030b 	add.w	r3, r2, fp
 80019d2:	469b      	mov	fp, r3
 80019d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80019d8:	460b      	mov	r3, r1
 80019da:	eb13 030a 	adds.w	r3, r3, sl
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	4613      	mov	r3, r2
 80019e2:	eb43 030b 	adc.w	r3, r3, fp
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019ec:	fb03 f102 	mul.w	r1, r3, r2
 80019f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	18ca      	adds	r2, r1, r3
 80019fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019fc:	fba3 1303 	umull	r1, r3, r3, r3
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a02:	460b      	mov	r3, r1
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a0c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001a10:	4623      	mov	r3, r4
 8001a12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a16:	4602      	mov	r2, r0
 8001a18:	189b      	adds	r3, r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	462a      	mov	r2, r5
 8001a20:	eb42 0303 	adc.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001a2e:	fb03 f202 	mul.w	r2, r3, r2
 8001a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a36:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	441a      	add	r2, r3
 8001a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a44:	fba3 1303 	umull	r1, r3, r3, r3
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a50:	18d3      	adds	r3, r2, r3
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
 8001a54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a58:	4623      	mov	r3, r4
 8001a5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a5e:	4602      	mov	r2, r0
 8001a60:	189b      	adds	r3, r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	460b      	mov	r3, r1
 8001a66:	462a      	mov	r2, r5
 8001a68:	eb42 0303 	adc.w	r3, r2, r3
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a72:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001a76:	fb03 f202 	mul.w	r2, r3, r2
 8001a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a7e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	441a      	add	r2, r3
 8001a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a8c:	fba3 1303 	umull	r1, r3, r3, r3
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a92:	460b      	mov	r3, r1
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	18d3      	adds	r3, r2, r3
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a9c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	189b      	adds	r3, r3, r2
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	460b      	mov	r3, r1
 8001aae:	462a      	mov	r2, r5
 8001ab0:	eb42 0303 	adc.w	r3, r2, r3
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aba:	f7fe fd1b 	bl	80004f4 <__aeabi_l2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	ec43 2b10 	vmov	d0, r2, r3
 8001ac6:	f009 fcff 	bl	800b4c8 <sqrt>
 8001aca:	ec53 2b10 	vmov	r2, r3, d0
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f89d 	bl	8000c10 <__aeabi_d2lz>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
}
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	3750      	adds	r7, #80	; 0x50
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ae8 <chabu_6x>:

	  dianji[0].yudingweizhi = jisuanjueduijuli_3x(zhouqishiweizhi[0] - zhouyudingweizhi[0],zhouqishiweizhi[1] - zhouyudingweizhi[1],zhouqishiweizhi[2] - zhouyudingweizhi[2]);
	  HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_1);
}
void chabu_6x(int64_t a,int64_t b,int64_t c,int64_t d,int64_t e,int64_t f)
{
 8001ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aec:	b093      	sub	sp, #76	; 0x4c
 8001aee:	af08      	add	r7, sp, #32
 8001af0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001af4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  HAL_TIM_PWM_Stop(&htim9,TIM_CHANNEL_1);
 8001af8:	2100      	movs	r1, #0
 8001afa:	4858      	ldr	r0, [pc, #352]	; (8001c5c <chabu_6x+0x174>)
 8001afc:	f003 fb26 	bl	800514c <HAL_TIM_PWM_Stop>
	  dianji[0].dangqianweizhi = 0;
 8001b00:	4957      	ldr	r1, [pc, #348]	; (8001c60 <chabu_6x+0x178>)
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	  zhouqishiweizhi[0] = zhoushijiweizhi[0];
 8001b0e:	4b55      	ldr	r3, [pc, #340]	; (8001c64 <chabu_6x+0x17c>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	4954      	ldr	r1, [pc, #336]	; (8001c68 <chabu_6x+0x180>)
 8001b16:	e9c1 2300 	strd	r2, r3, [r1]
	  zhouqishiweizhi[1] = zhoushijiweizhi[1];
 8001b1a:	4b52      	ldr	r3, [pc, #328]	; (8001c64 <chabu_6x+0x17c>)
 8001b1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b20:	4951      	ldr	r1, [pc, #324]	; (8001c68 <chabu_6x+0x180>)
 8001b22:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  zhouqishiweizhi[2] = zhoushijiweizhi[2];
 8001b26:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <chabu_6x+0x17c>)
 8001b28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b2c:	494e      	ldr	r1, [pc, #312]	; (8001c68 <chabu_6x+0x180>)
 8001b2e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  zhouqishiweizhi[3] = zhoushijiweizhi[3];
 8001b32:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <chabu_6x+0x17c>)
 8001b34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b38:	494b      	ldr	r1, [pc, #300]	; (8001c68 <chabu_6x+0x180>)
 8001b3a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  zhouqishiweizhi[4] = zhoushijiweizhi[4];
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <chabu_6x+0x17c>)
 8001b40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b44:	4948      	ldr	r1, [pc, #288]	; (8001c68 <chabu_6x+0x180>)
 8001b46:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  zhouqishiweizhi[5] = zhoushijiweizhi[5];
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <chabu_6x+0x17c>)
 8001b4c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b50:	4945      	ldr	r1, [pc, #276]	; (8001c68 <chabu_6x+0x180>)
 8001b52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  zhouyudingweizhi[0] = a;
 8001b56:	4945      	ldr	r1, [pc, #276]	; (8001c6c <chabu_6x+0x184>)
 8001b58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b5c:	e9c1 2300 	strd	r2, r3, [r1]
	  zhouyudingweizhi[1] = b;
 8001b60:	4942      	ldr	r1, [pc, #264]	; (8001c6c <chabu_6x+0x184>)
 8001b62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b66:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  zhouyudingweizhi[2] = c;
 8001b6a:	4940      	ldr	r1, [pc, #256]	; (8001c6c <chabu_6x+0x184>)
 8001b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b70:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  zhouyudingweizhi[3] = d;
 8001b74:	493d      	ldr	r1, [pc, #244]	; (8001c6c <chabu_6x+0x184>)
 8001b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  zhouyudingweizhi[4] = e;
 8001b7e:	493b      	ldr	r1, [pc, #236]	; (8001c6c <chabu_6x+0x184>)
 8001b80:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b84:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  zhouyudingweizhi[5] = f;
 8001b88:	4938      	ldr	r1, [pc, #224]	; (8001c6c <chabu_6x+0x184>)
 8001b8a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	  //dianji[0].zuidasudu = s2b2(500,32000 ,64000);//设置�??????大�?�度
	  chuankoufasong(219,dianji[0].zuidasudu);
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <chabu_6x+0x178>)
 8001b94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	20db      	movs	r0, #219	; 0xdb
 8001b9e:	f7ff fdab 	bl	80016f8 <chuankoufasong>

	  dianji[0].yudingweizhi = jisuanjueduijuli_6x(zhouqishiweizhi[0] - zhouyudingweizhi[0],zhouqishiweizhi[1] - zhouyudingweizhi[1],zhouqishiweizhi[2] - zhouyudingweizhi[2],zhouqishiweizhi[3] - zhouyudingweizhi[3],zhouqishiweizhi[4] - zhouyudingweizhi[4],zhouqishiweizhi[5] - zhouyudingweizhi[5]);
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <chabu_6x+0x180>)
 8001ba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <chabu_6x+0x184>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	1a86      	subs	r6, r0, r2
 8001bb0:	613e      	str	r6, [r7, #16]
 8001bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <chabu_6x+0x180>)
 8001bba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <chabu_6x+0x184>)
 8001bc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bc4:	1a86      	subs	r6, r0, r2
 8001bc6:	60be      	str	r6, [r7, #8]
 8001bc8:	eb61 0303 	sbc.w	r3, r1, r3
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <chabu_6x+0x180>)
 8001bd0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <chabu_6x+0x184>)
 8001bd6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bda:	1a84      	subs	r4, r0, r2
 8001bdc:	eb61 0503 	sbc.w	r5, r1, r3
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <chabu_6x+0x180>)
 8001be2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <chabu_6x+0x184>)
 8001be8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001bec:	ebb0 0802 	subs.w	r8, r0, r2
 8001bf0:	eb61 0903 	sbc.w	r9, r1, r3
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <chabu_6x+0x180>)
 8001bf6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <chabu_6x+0x184>)
 8001bfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c00:	ebb0 0a02 	subs.w	sl, r0, r2
 8001c04:	eb61 0b03 	sbc.w	fp, r1, r3
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <chabu_6x+0x180>)
 8001c0a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <chabu_6x+0x184>)
 8001c10:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c14:	1a86      	subs	r6, r0, r2
 8001c16:	603e      	str	r6, [r7, #0]
 8001c18:	eb61 0303 	sbc.w	r3, r1, r3
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001c26:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c2a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c2e:	e9cd 4500 	strd	r4, r5, [sp]
 8001c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c3a:	f7ff fe91 	bl	8001960 <jisuanjueduijuli_6x>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4907      	ldr	r1, [pc, #28]	; (8001c60 <chabu_6x+0x178>)
 8001c44:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_1);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4804      	ldr	r0, [pc, #16]	; (8001c5c <chabu_6x+0x174>)
 8001c4c:	f003 fae2 	bl	8005214 <HAL_TIM_PWM_Start_IT>
}
 8001c50:	bf00      	nop
 8001c52:	372c      	adds	r7, #44	; 0x2c
 8001c54:	46bd      	mov	sp, r7
 8001c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200004d8 	.word	0x200004d8
 8001c60:	20000188 	.word	0x20000188
 8001c64:	200003a0 	.word	0x200003a0
 8001c68:	20000440 	.word	0x20000440
 8001c6c:	200003f0 	.word	0x200003f0

08001c70 <gengxinshijiweizhi_6x>:
	zhoushijiweizhi[0] = zhouqishiweizhi[0]+(zhouyudingweizhi[0] - zhouqishiweizhi[0])*dianji[0].dangqianweizhi/dianji[0].yudingweizhi;
	zhoushijiweizhi[1] = zhouqishiweizhi[1]+(zhouyudingweizhi[1] - zhouqishiweizhi[1])*dianji[0].dangqianweizhi/dianji[0].yudingweizhi;
	zhoushijiweizhi[2] = zhouqishiweizhi[2]+(zhouyudingweizhi[2] - zhouqishiweizhi[2])*dianji[0].dangqianweizhi/dianji[0].yudingweizhi;
}
void gengxinshijiweizhi_6x(void)
{
 8001c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c74:	b0a1      	sub	sp, #132	; 0x84
 8001c76:	af00      	add	r7, sp, #0
	zhoushijiweizhi[0] = zhouqishiweizhi[0]+(zhouyudingweizhi[0] - zhouqishiweizhi[0])*dianji[0].dangqianweizhi/dianji[0].yudingweizhi;
 8001c78:	4b9f      	ldr	r3, [pc, #636]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001c7a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001c7e:	4b9f      	ldr	r3, [pc, #636]	; (8001efc <gengxinshijiweizhi_6x+0x28c>)
 8001c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c84:	4b9c      	ldr	r3, [pc, #624]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	1a84      	subs	r4, r0, r2
 8001c8c:	eb61 0503 	sbc.w	r5, r1, r3
 8001c90:	4b9b      	ldr	r3, [pc, #620]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001c92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c96:	fb02 f005 	mul.w	r0, r2, r5
 8001c9a:	fb04 f103 	mul.w	r1, r4, r3
 8001c9e:	4401      	add	r1, r0
 8001ca0:	fba4 8902 	umull	r8, r9, r4, r2
 8001ca4:	eb01 0309 	add.w	r3, r1, r9
 8001ca8:	4699      	mov	r9, r3
 8001caa:	4b95      	ldr	r3, [pc, #596]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001cac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	f7fe ff44 	bl	8000b40 <__aeabi_ldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	eb1a 0102 	adds.w	r1, sl, r2
 8001cc0:	6539      	str	r1, [r7, #80]	; 0x50
 8001cc2:	eb4b 0303 	adc.w	r3, fp, r3
 8001cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8001cc8:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <gengxinshijiweizhi_6x+0x294>)
 8001cca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001cce:	e9c3 1200 	strd	r1, r2, [r3]
	zhoushijiweizhi[1] = zhouqishiweizhi[1]+(zhouyudingweizhi[1] - zhouqishiweizhi[1])*dianji[0].dangqianweizhi/dianji[0].yudingweizhi;
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001cd4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001cd8:	4b88      	ldr	r3, [pc, #544]	; (8001efc <gengxinshijiweizhi_6x+0x28c>)
 8001cda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cde:	4b86      	ldr	r3, [pc, #536]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001ce0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ce4:	1a86      	subs	r6, r0, r2
 8001ce6:	64be      	str	r6, [r7, #72]	; 0x48
 8001ce8:	eb61 0303 	sbc.w	r3, r1, r3
 8001cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cee:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001cf0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001cf4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	fb02 f001 	mul.w	r0, r2, r1
 8001cfe:	4641      	mov	r1, r8
 8001d00:	fb01 f103 	mul.w	r1, r1, r3
 8001d04:	4401      	add	r1, r0
 8001d06:	4640      	mov	r0, r8
 8001d08:	fba0 2302 	umull	r2, r3, r0, r2
 8001d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d0e:	4613      	mov	r3, r2
 8001d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d14:	18cb      	adds	r3, r1, r3
 8001d16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d18:	4b79      	ldr	r3, [pc, #484]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001d1a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001d1e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d22:	f7fe ff0d 	bl	8000b40 <__aeabi_ldivmod>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	18a1      	adds	r1, r4, r2
 8001d2c:	6439      	str	r1, [r7, #64]	; 0x40
 8001d2e:	eb45 0303 	adc.w	r3, r5, r3
 8001d32:	647b      	str	r3, [r7, #68]	; 0x44
 8001d34:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <gengxinshijiweizhi_6x+0x294>)
 8001d36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001d3a:	e9c3 1202 	strd	r1, r2, [r3, #8]
	zhoushijiweizhi[2] = zhouqishiweizhi[2]+(zhouyudingweizhi[2] - zhouqishiweizhi[2])*dianji[0].dangqianweizhi/dianji[0].yudingweizhi;
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001d40:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001d44:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <gengxinshijiweizhi_6x+0x28c>)
 8001d46:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d4a:	4b6b      	ldr	r3, [pc, #428]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001d4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d50:	1a86      	subs	r6, r0, r2
 8001d52:	63be      	str	r6, [r7, #56]	; 0x38
 8001d54:	eb61 0303 	sbc.w	r3, r1, r3
 8001d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d5a:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001d5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001d60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001d64:	4649      	mov	r1, r9
 8001d66:	fb02 f001 	mul.w	r0, r2, r1
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	fb01 f103 	mul.w	r1, r1, r3
 8001d70:	4401      	add	r1, r0
 8001d72:	4640      	mov	r0, r8
 8001d74:	fba0 2302 	umull	r2, r3, r0, r2
 8001d78:	677b      	str	r3, [r7, #116]	; 0x74
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	673b      	str	r3, [r7, #112]	; 0x70
 8001d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d80:	18cb      	adds	r3, r1, r3
 8001d82:	677b      	str	r3, [r7, #116]	; 0x74
 8001d84:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001d86:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001d8a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001d8e:	f7fe fed7 	bl	8000b40 <__aeabi_ldivmod>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	18a1      	adds	r1, r4, r2
 8001d98:	6339      	str	r1, [r7, #48]	; 0x30
 8001d9a:	eb45 0303 	adc.w	r3, r5, r3
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001da0:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <gengxinshijiweizhi_6x+0x294>)
 8001da2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001da6:	e9c3 1204 	strd	r1, r2, [r3, #16]
	zhoushijiweizhi[3] = zhouqishiweizhi[3]+(zhouyudingweizhi[3] - zhouqishiweizhi[3])*dianji[0].dangqianweizhi/dianji[0].yudingweizhi;
 8001daa:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001dac:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001db0:	4b52      	ldr	r3, [pc, #328]	; (8001efc <gengxinshijiweizhi_6x+0x28c>)
 8001db2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001db6:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001db8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001dbc:	1a86      	subs	r6, r0, r2
 8001dbe:	62be      	str	r6, [r7, #40]	; 0x28
 8001dc0:	eb61 0303 	sbc.w	r3, r1, r3
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001dc8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001dcc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	fb02 f001 	mul.w	r0, r2, r1
 8001dd6:	4641      	mov	r1, r8
 8001dd8:	fb01 f103 	mul.w	r1, r1, r3
 8001ddc:	4401      	add	r1, r0
 8001dde:	4640      	mov	r0, r8
 8001de0:	fba0 2302 	umull	r2, r3, r0, r2
 8001de4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001de6:	4613      	mov	r3, r2
 8001de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dec:	18cb      	adds	r3, r1, r3
 8001dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001df2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001df6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001dfa:	f7fe fea1 	bl	8000b40 <__aeabi_ldivmod>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	18a1      	adds	r1, r4, r2
 8001e04:	6239      	str	r1, [r7, #32]
 8001e06:	eb45 0303 	adc.w	r3, r5, r3
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <gengxinshijiweizhi_6x+0x294>)
 8001e0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e12:	e9c3 1206 	strd	r1, r2, [r3, #24]
	zhoushijiweizhi[4] = zhouqishiweizhi[4]+(zhouyudingweizhi[4] - zhouqishiweizhi[4])*dianji[0].dangqianweizhi/dianji[0].yudingweizhi;
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001e18:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001e1c:	4b37      	ldr	r3, [pc, #220]	; (8001efc <gengxinshijiweizhi_6x+0x28c>)
 8001e1e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e22:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001e24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e28:	1a86      	subs	r6, r0, r2
 8001e2a:	61be      	str	r6, [r7, #24]
 8001e2c:	eb61 0303 	sbc.w	r3, r1, r3
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001e34:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001e38:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	fb02 f001 	mul.w	r0, r2, r1
 8001e42:	4641      	mov	r1, r8
 8001e44:	fb01 f103 	mul.w	r1, r1, r3
 8001e48:	4401      	add	r1, r0
 8001e4a:	4640      	mov	r0, r8
 8001e4c:	fba0 2302 	umull	r2, r3, r0, r2
 8001e50:	667b      	str	r3, [r7, #100]	; 0x64
 8001e52:	4613      	mov	r3, r2
 8001e54:	663b      	str	r3, [r7, #96]	; 0x60
 8001e56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e58:	18cb      	adds	r3, r1, r3
 8001e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001e5e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001e62:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e66:	f7fe fe6b 	bl	8000b40 <__aeabi_ldivmod>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	18a1      	adds	r1, r4, r2
 8001e70:	6139      	str	r1, [r7, #16]
 8001e72:	eb45 0303 	adc.w	r3, r5, r3
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <gengxinshijiweizhi_6x+0x294>)
 8001e7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e7e:	e9c3 1208 	strd	r1, r2, [r3, #32]
	zhoushijiweizhi[5] = zhouqishiweizhi[5]+(zhouyudingweizhi[5] - zhouqishiweizhi[5])*dianji[0].dangqianweizhi/dianji[0].yudingweizhi;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001e84:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <gengxinshijiweizhi_6x+0x28c>)
 8001e8a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <gengxinshijiweizhi_6x+0x288>)
 8001e90:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e94:	1a86      	subs	r6, r0, r2
 8001e96:	60be      	str	r6, [r7, #8]
 8001e98:	eb61 0303 	sbc.w	r3, r1, r3
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001ea0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001ea4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	fb02 f001 	mul.w	r0, r2, r1
 8001eae:	4641      	mov	r1, r8
 8001eb0:	fb01 f103 	mul.w	r1, r1, r3
 8001eb4:	4401      	add	r1, r0
 8001eb6:	4640      	mov	r0, r8
 8001eb8:	fba0 2302 	umull	r2, r3, r0, r2
 8001ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec4:	18cb      	adds	r3, r1, r3
 8001ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <gengxinshijiweizhi_6x+0x290>)
 8001eca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001ece:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001ed2:	f7fe fe35 	bl	8000b40 <__aeabi_ldivmod>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	18a1      	adds	r1, r4, r2
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	eb45 0303 	adc.w	r3, r5, r3
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <gengxinshijiweizhi_6x+0x294>)
 8001ee6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001eea:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
}
 8001eee:	bf00      	nop
 8001ef0:	3784      	adds	r7, #132	; 0x84
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ef8:	20000440 	.word	0x20000440
 8001efc:	200003f0 	.word	0x200003f0
 8001f00:	20000188 	.word	0x20000188
 8001f04:	200003a0 	.word	0x200003a0

08001f08 <fs>:
//--------------------------------------------------------
void fs(uint8_t tou,double num)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	ed87 0b00 	vstr	d0, [r7]
 8001f14:	73fb      	strb	r3, [r7, #15]
	zilen = ftoa(num , (char*)&zi[1] , 0 );
 8001f16:	2100      	movs	r1, #0
 8001f18:	4811      	ldr	r0, [pc, #68]	; (8001f60 <fs+0x58>)
 8001f1a:	ed97 0b00 	vldr	d0, [r7]
 8001f1e:	f7ff fc73 	bl	8001808 <ftoa>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <fs+0x5c>)
 8001f28:	701a      	strb	r2, [r3, #0]
	  zi[0] =tou;
 8001f2a:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <fs+0x60>)
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	7013      	strb	r3, [r2, #0]
	  zi[zilen+1] = 200;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <fs+0x5c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <fs+0x60>)
 8001f38:	21c8      	movs	r1, #200	; 0xc8
 8001f3a:	54d1      	strb	r1, [r2, r3]
	  zilen++;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <fs+0x5c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <fs+0x5c>)
 8001f46:	701a      	strb	r2, [r3, #0]
	  CDC_Transmit_FS(zi, zilen+1);
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <fs+0x5c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4805      	ldr	r0, [pc, #20]	; (8001f68 <fs+0x60>)
 8001f52:	f008 fdc5 	bl	800aae0 <CDC_Transmit_FS>
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000325 	.word	0x20000325
 8001f64:	20000388 	.word	0x20000388
 8001f68:	20000324 	.word	0x20000324

08001f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f70:	b088      	sub	sp, #32
 8001f72:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f74:	f000 fd3c 	bl	80029f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f78:	f000 fa12 	bl	80023a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f7c:	f000 fb60 	bl	8002640 <MX_GPIO_Init>
  MX_TIM9_Init();
 8001f80:	f000 faca 	bl	8002518 <MX_TIM9_Init>
  MX_TIM11_Init();
 8001f84:	f000 fb0e 	bl	80025a4 <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 8001f88:	f008 fcec 	bl	800a964 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001f8c:	f000 fb2e 	bl	80025ec <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001f90:	f000 fa72 	bl	8002478 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, uartdata, 1);
 8001f94:	2201      	movs	r2, #1
 8001f96:	4937      	ldr	r1, [pc, #220]	; (8002074 <main+0x108>)
 8001f98:	4837      	ldr	r0, [pc, #220]	; (8002078 <main+0x10c>)
 8001f9a:	f004 f92a 	bl	80061f2 <HAL_UART_Receive_IT>
  //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
  HAL_TIM_Base_Start_IT(&htim1);
 8001f9e:	4837      	ldr	r0, [pc, #220]	; (800207c <main+0x110>)
 8001fa0:	f003 f822 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_1);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4836      	ldr	r0, [pc, #216]	; (8002080 <main+0x114>)
 8001fa8:	f003 f934 	bl	8005214 <HAL_TIM_PWM_Start_IT>

  dianji[0].zuidasudu = s2b2(500,8000 ,16000);//设置�??????大�?�度
 8001fac:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9cd 2300 	strd	r2, r3, [sp]
 8001fb8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	f7ff f956 	bl	8001278 <s2b2>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	492c      	ldr	r1, [pc, #176]	; (8002084 <main+0x118>)
 8001fd2:	e9c1 2308 	strd	r2, r3, [r1, #32]
  zhoushijiweizhi[0] = 0;
 8001fd6:	492c      	ldr	r1, [pc, #176]	; (8002088 <main+0x11c>)
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9c1 2300 	strd	r2, r3, [r1]
  zhoushijiweizhi[1] = 0;
 8001fe4:	4928      	ldr	r1, [pc, #160]	; (8002088 <main+0x11c>)
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9c1 2302 	strd	r2, r3, [r1, #8]
  zhoushijiweizhi[2] = 0;
 8001ff2:	4925      	ldr	r1, [pc, #148]	; (8002088 <main+0x11c>)
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9c1 2304 	strd	r2, r3, [r1, #16]
  zhoushijiweizhi[3] = 0;
 8002000:	4921      	ldr	r1, [pc, #132]	; (8002088 <main+0x11c>)
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9c1 2306 	strd	r2, r3, [r1, #24]
  zhoushijiweizhi[4] = 0;
 800200e:	491e      	ldr	r1, [pc, #120]	; (8002088 <main+0x11c>)
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9c1 2308 	strd	r2, r3, [r1, #32]
  zhoushijiweizhi[5] = 0;
 800201c:	491a      	ldr	r1, [pc, #104]	; (8002088 <main+0x11c>)
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  chabu_6x(5000,-2000,30000,123000,-88653,9);
 800202a:	f04f 0209 	mov.w	r2, #9
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002036:	4a15      	ldr	r2, [pc, #84]	; (800208c <main+0x120>)
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002040:	4a13      	ldr	r2, [pc, #76]	; (8002090 <main+0x124>)
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800204a:	f247 5230 	movw	r2, #30000	; 0x7530
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	e9cd 2300 	strd	r2, r3, [sp]
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <main+0x128>)
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
 800205c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002060:	f04f 0100 	mov.w	r1, #0
 8002064:	f7ff fd40 	bl	8001ae8 <chabu_6x>
  HAL_Delay(1000);
 8002068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800206c:	f000 fd32 	bl	8002ad4 <HAL_Delay>
  while (zhoushijiweizhi[1] != zhouyudingweizhi[1])
 8002070:	e0b7      	b.n	80021e2 <main+0x276>
 8002072:	bf00      	nop
 8002074:	200002e8 	.word	0x200002e8
 8002078:	20000568 	.word	0x20000568
 800207c:	20000490 	.word	0x20000490
 8002080:	200004d8 	.word	0x200004d8
 8002084:	20000188 	.word	0x20000188
 8002088:	200003a0 	.word	0x200003a0
 800208c:	fffea5b3 	.word	0xfffea5b3
 8002090:	0001e078 	.word	0x0001e078
 8002094:	fffff830 	.word	0xfffff830
  {
	  jici++;
 8002098:	4bbc      	ldr	r3, [pc, #752]	; (800238c <main+0x420>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f112 0801 	adds.w	r8, r2, #1
 80020a2:	f143 0900 	adc.w	r9, r3, #0
 80020a6:	4bb9      	ldr	r3, [pc, #740]	; (800238c <main+0x420>)
 80020a8:	e9c3 8900 	strd	r8, r9, [r3]
	  fs(201,(double)jici);HAL_Delay(10);
 80020ac:	4bb7      	ldr	r3, [pc, #732]	; (800238c <main+0x420>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fa15 	bl	80004e4 <__aeabi_ul2d>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	ec43 2b10 	vmov	d0, r2, r3
 80020c2:	20c9      	movs	r0, #201	; 0xc9
 80020c4:	f7ff ff20 	bl	8001f08 <fs>
 80020c8:	200a      	movs	r0, #10
 80020ca:	f000 fd03 	bl	8002ad4 <HAL_Delay>
	  fs(202,(double)dianji[0].dangqianweizhi);HAL_Delay(10);
 80020ce:	4bb0      	ldr	r3, [pc, #704]	; (8002390 <main+0x424>)
 80020d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fa0c 	bl	80004f4 <__aeabi_l2d>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	ec43 2b10 	vmov	d0, r2, r3
 80020e4:	20ca      	movs	r0, #202	; 0xca
 80020e6:	f7ff ff0f 	bl	8001f08 <fs>
 80020ea:	200a      	movs	r0, #10
 80020ec:	f000 fcf2 	bl	8002ad4 <HAL_Delay>
	  fs(203,(double)dianji[0].dangqiansudu);HAL_Delay(10);
 80020f0:	4ba7      	ldr	r3, [pc, #668]	; (8002390 <main+0x424>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe f9fb 	bl	80004f4 <__aeabi_l2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	ec43 2b10 	vmov	d0, r2, r3
 8002106:	20cb      	movs	r0, #203	; 0xcb
 8002108:	f7ff fefe 	bl	8001f08 <fs>
 800210c:	200a      	movs	r0, #10
 800210e:	f000 fce1 	bl	8002ad4 <HAL_Delay>

	  gengxinshijiweizhi_6x();
 8002112:	f7ff fdad 	bl	8001c70 <gengxinshijiweizhi_6x>
	  	fs(204,(double)zhoushijiweizhi[0]);HAL_Delay(1);
 8002116:	4b9f      	ldr	r3, [pc, #636]	; (8002394 <main+0x428>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe f9e8 	bl	80004f4 <__aeabi_l2d>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	ec43 2b10 	vmov	d0, r2, r3
 800212c:	20cc      	movs	r0, #204	; 0xcc
 800212e:	f7ff feeb 	bl	8001f08 <fs>
 8002132:	2001      	movs	r0, #1
 8002134:	f000 fcce 	bl	8002ad4 <HAL_Delay>
		fs(205,(double)zhoushijiweizhi[1]);HAL_Delay(1);
 8002138:	4b96      	ldr	r3, [pc, #600]	; (8002394 <main+0x428>)
 800213a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe f9d7 	bl	80004f4 <__aeabi_l2d>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	ec43 2b10 	vmov	d0, r2, r3
 800214e:	20cd      	movs	r0, #205	; 0xcd
 8002150:	f7ff feda 	bl	8001f08 <fs>
 8002154:	2001      	movs	r0, #1
 8002156:	f000 fcbd 	bl	8002ad4 <HAL_Delay>
		fs(206,(double)zhoushijiweizhi[2]); HAL_Delay(1);
 800215a:	4b8e      	ldr	r3, [pc, #568]	; (8002394 <main+0x428>)
 800215c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f7fe f9c6 	bl	80004f4 <__aeabi_l2d>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	ec43 2b10 	vmov	d0, r2, r3
 8002170:	20ce      	movs	r0, #206	; 0xce
 8002172:	f7ff fec9 	bl	8001f08 <fs>
 8002176:	2001      	movs	r0, #1
 8002178:	f000 fcac 	bl	8002ad4 <HAL_Delay>
	  	fs(207,(double)zhoushijiweizhi[3]);HAL_Delay(1);
 800217c:	4b85      	ldr	r3, [pc, #532]	; (8002394 <main+0x428>)
 800217e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe f9b5 	bl	80004f4 <__aeabi_l2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ec43 2b10 	vmov	d0, r2, r3
 8002192:	20cf      	movs	r0, #207	; 0xcf
 8002194:	f7ff feb8 	bl	8001f08 <fs>
 8002198:	2001      	movs	r0, #1
 800219a:	f000 fc9b 	bl	8002ad4 <HAL_Delay>
		fs(208,(double)zhoushijiweizhi[4]);HAL_Delay(1);
 800219e:	4b7d      	ldr	r3, [pc, #500]	; (8002394 <main+0x428>)
 80021a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7fe f9a4 	bl	80004f4 <__aeabi_l2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	ec43 2b10 	vmov	d0, r2, r3
 80021b4:	20d0      	movs	r0, #208	; 0xd0
 80021b6:	f7ff fea7 	bl	8001f08 <fs>
 80021ba:	2001      	movs	r0, #1
 80021bc:	f000 fc8a 	bl	8002ad4 <HAL_Delay>
		fs(209,(double)zhoushijiweizhi[5]); HAL_Delay(1);
 80021c0:	4b74      	ldr	r3, [pc, #464]	; (8002394 <main+0x428>)
 80021c2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe f993 	bl	80004f4 <__aeabi_l2d>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	ec43 2b10 	vmov	d0, r2, r3
 80021d6:	20d1      	movs	r0, #209	; 0xd1
 80021d8:	f7ff fe96 	bl	8001f08 <fs>
 80021dc:	2001      	movs	r0, #1
 80021de:	f000 fc79 	bl	8002ad4 <HAL_Delay>
  while (zhoushijiweizhi[1] != zhouyudingweizhi[1])
 80021e2:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <main+0x428>)
 80021e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021e8:	4b6b      	ldr	r3, [pc, #428]	; (8002398 <main+0x42c>)
 80021ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021ee:	4299      	cmp	r1, r3
 80021f0:	bf08      	it	eq
 80021f2:	4290      	cmpeq	r0, r2
 80021f4:	f47f af50 	bne.w	8002098 <main+0x12c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  chabu_6x(100,200,500,1000,50000,-5000);
 80021f8:	4a68      	ldr	r2, [pc, #416]	; (800239c <main+0x430>)
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002202:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800220e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800221a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9cd 2300 	strd	r2, r3, [sp]
 8002226:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	f04f 0064 	mov.w	r0, #100	; 0x64
 8002232:	f04f 0100 	mov.w	r1, #0
 8002236:	f7ff fc57 	bl	8001ae8 <chabu_6x>
  HAL_Delay(1000);
 800223a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800223e:	f000 fc49 	bl	8002ad4 <HAL_Delay>
  while (1)
  {
	  jici++;
 8002242:	4b52      	ldr	r3, [pc, #328]	; (800238c <main+0x420>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	1c54      	adds	r4, r2, #1
 800224a:	f143 0500 	adc.w	r5, r3, #0
 800224e:	4b4f      	ldr	r3, [pc, #316]	; (800238c <main+0x420>)
 8002250:	e9c3 4500 	strd	r4, r5, [r3]
	  fs(201,(double)jici);HAL_Delay(1);
 8002254:	4b4d      	ldr	r3, [pc, #308]	; (800238c <main+0x420>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe f941 	bl	80004e4 <__aeabi_ul2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	ec43 2b10 	vmov	d0, r2, r3
 800226a:	20c9      	movs	r0, #201	; 0xc9
 800226c:	f7ff fe4c 	bl	8001f08 <fs>
 8002270:	2001      	movs	r0, #1
 8002272:	f000 fc2f 	bl	8002ad4 <HAL_Delay>
	  fs(202,(double)dianji[0].dangqianweizhi);HAL_Delay(1);
 8002276:	4b46      	ldr	r3, [pc, #280]	; (8002390 <main+0x424>)
 8002278:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe f938 	bl	80004f4 <__aeabi_l2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	ec43 2b10 	vmov	d0, r2, r3
 800228c:	20ca      	movs	r0, #202	; 0xca
 800228e:	f7ff fe3b 	bl	8001f08 <fs>
 8002292:	2001      	movs	r0, #1
 8002294:	f000 fc1e 	bl	8002ad4 <HAL_Delay>
	  fs(203,(double)dianji[0].dangqiansudu);HAL_Delay(1);
 8002298:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <main+0x424>)
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	f7fe f927 	bl	80004f4 <__aeabi_l2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	ec43 2b10 	vmov	d0, r2, r3
 80022ae:	20cb      	movs	r0, #203	; 0xcb
 80022b0:	f7ff fe2a 	bl	8001f08 <fs>
 80022b4:	2001      	movs	r0, #1
 80022b6:	f000 fc0d 	bl	8002ad4 <HAL_Delay>
	  gengxinshijiweizhi_6x();
 80022ba:	f7ff fcd9 	bl	8001c70 <gengxinshijiweizhi_6x>
	  	fs(204,(double)zhoushijiweizhi[0]);HAL_Delay(1);
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <main+0x428>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe f914 	bl	80004f4 <__aeabi_l2d>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	ec43 2b10 	vmov	d0, r2, r3
 80022d4:	20cc      	movs	r0, #204	; 0xcc
 80022d6:	f7ff fe17 	bl	8001f08 <fs>
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 fbfa 	bl	8002ad4 <HAL_Delay>
		fs(205,(double)zhoushijiweizhi[1]);HAL_Delay(1);
 80022e0:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <main+0x428>)
 80022e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	f7fe f903 	bl	80004f4 <__aeabi_l2d>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	ec43 2b10 	vmov	d0, r2, r3
 80022f6:	20cd      	movs	r0, #205	; 0xcd
 80022f8:	f7ff fe06 	bl	8001f08 <fs>
 80022fc:	2001      	movs	r0, #1
 80022fe:	f000 fbe9 	bl	8002ad4 <HAL_Delay>
		fs(206,(double)zhoushijiweizhi[2]); HAL_Delay(1);
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <main+0x428>)
 8002304:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe f8f2 	bl	80004f4 <__aeabi_l2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	ec43 2b10 	vmov	d0, r2, r3
 8002318:	20ce      	movs	r0, #206	; 0xce
 800231a:	f7ff fdf5 	bl	8001f08 <fs>
 800231e:	2001      	movs	r0, #1
 8002320:	f000 fbd8 	bl	8002ad4 <HAL_Delay>
	  	fs(207,(double)zhoushijiweizhi[3]);HAL_Delay(1);
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <main+0x428>)
 8002326:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe f8e1 	bl	80004f4 <__aeabi_l2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	ec43 2b10 	vmov	d0, r2, r3
 800233a:	20cf      	movs	r0, #207	; 0xcf
 800233c:	f7ff fde4 	bl	8001f08 <fs>
 8002340:	2001      	movs	r0, #1
 8002342:	f000 fbc7 	bl	8002ad4 <HAL_Delay>
		fs(208,(double)zhoushijiweizhi[4]);HAL_Delay(1);
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <main+0x428>)
 8002348:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe f8d0 	bl	80004f4 <__aeabi_l2d>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	ec43 2b10 	vmov	d0, r2, r3
 800235c:	20d0      	movs	r0, #208	; 0xd0
 800235e:	f7ff fdd3 	bl	8001f08 <fs>
 8002362:	2001      	movs	r0, #1
 8002364:	f000 fbb6 	bl	8002ad4 <HAL_Delay>
		fs(209,(double)zhoushijiweizhi[5]); HAL_Delay(1);
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <main+0x428>)
 800236a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	f7fe f8bf 	bl	80004f4 <__aeabi_l2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	ec43 2b10 	vmov	d0, r2, r3
 800237e:	20d1      	movs	r0, #209	; 0xd1
 8002380:	f7ff fdc2 	bl	8001f08 <fs>
 8002384:	2001      	movs	r0, #1
 8002386:	f000 fba5 	bl	8002ad4 <HAL_Delay>
	  jici++;
 800238a:	e75a      	b.n	8002242 <main+0x2d6>
 800238c:	20000390 	.word	0x20000390
 8002390:	20000188 	.word	0x20000188
 8002394:	200003a0 	.word	0x200003a0
 8002398:	200003f0 	.word	0x200003f0
 800239c:	ffffec78 	.word	0xffffec78

080023a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b094      	sub	sp, #80	; 0x50
 80023a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a6:	f107 0320 	add.w	r3, r7, #32
 80023aa:	2230      	movs	r2, #48	; 0x30
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f009 f812 	bl	800b3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <SystemClock_Config+0xd0>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	4a28      	ldr	r2, [pc, #160]	; (8002470 <SystemClock_Config+0xd0>)
 80023ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d2:	6413      	str	r3, [r2, #64]	; 0x40
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <SystemClock_Config+0xd0>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80023e0:	2300      	movs	r3, #0
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <SystemClock_Config+0xd4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023ec:	4a21      	ldr	r2, [pc, #132]	; (8002474 <SystemClock_Config+0xd4>)
 80023ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <SystemClock_Config+0xd4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002400:	2301      	movs	r3, #1
 8002402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800240a:	2302      	movs	r3, #2
 800240c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800240e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002414:	2319      	movs	r3, #25
 8002416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 8002418:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800241e:	2306      	movs	r3, #6
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002422:	2308      	movs	r3, #8
 8002424:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002426:	f107 0320 	add.w	r3, r7, #32
 800242a:	4618      	mov	r0, r3
 800242c:	f002 f934 	bl	8004698 <HAL_RCC_OscConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002436:	f000 f945 	bl	80026c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243a:	230f      	movs	r3, #15
 800243c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800243e:	2302      	movs	r3, #2
 8002440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f002 fb96 	bl	8004b88 <HAL_RCC_ClockConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002462:	f000 f92f 	bl	80026c4 <Error_Handler>
  }
}
 8002466:	bf00      	nop
 8002468:	3750      	adds	r7, #80	; 0x50
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000

08002478 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248c:	463b      	mov	r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <MX_TIM1_Init+0x98>)
 8002496:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <MX_TIM1_Init+0x9c>)
 8002498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <MX_TIM1_Init+0x98>)
 800249c:	223f      	movs	r2, #63	; 0x3f
 800249e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <MX_TIM1_Init+0x98>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <MX_TIM1_Init+0x98>)
 80024a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <MX_TIM1_Init+0x98>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_TIM1_Init+0x98>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <MX_TIM1_Init+0x98>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024c0:	4813      	ldr	r0, [pc, #76]	; (8002510 <MX_TIM1_Init+0x98>)
 80024c2:	f002 fd41 	bl	8004f48 <HAL_TIM_Base_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80024cc:	f000 f8fa 	bl	80026c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	4619      	mov	r1, r3
 80024dc:	480c      	ldr	r0, [pc, #48]	; (8002510 <MX_TIM1_Init+0x98>)
 80024de:	f003 f961 	bl	80057a4 <HAL_TIM_ConfigClockSource>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024e8:	f000 f8ec 	bl	80026c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024f4:	463b      	mov	r3, r7
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_TIM1_Init+0x98>)
 80024fa:	f003 fd19 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002504:	f000 f8de 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000490 	.word	0x20000490
 8002514:	40010000 	.word	0x40010000

08002518 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
 800252c:	615a      	str	r2, [r3, #20]
 800252e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <MX_TIM9_Init+0x84>)
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <MX_TIM9_Init+0x88>)
 8002534:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1;
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_TIM9_Init+0x84>)
 8002538:	2201      	movs	r2, #1
 800253a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <MX_TIM9_Init+0x84>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_TIM9_Init+0x84>)
 8002544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002548:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <MX_TIM9_Init+0x84>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <MX_TIM9_Init+0x84>)
 8002552:	2200      	movs	r2, #0
 8002554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002556:	4811      	ldr	r0, [pc, #68]	; (800259c <MX_TIM9_Init+0x84>)
 8002558:	f002 fda8 	bl	80050ac <HAL_TIM_PWM_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002562:	f000 f8af 	bl	80026c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002566:	2360      	movs	r3, #96	; 0x60
 8002568:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2200      	movs	r2, #0
 800257a:	4619      	mov	r1, r3
 800257c:	4807      	ldr	r0, [pc, #28]	; (800259c <MX_TIM9_Init+0x84>)
 800257e:	f003 f84f 	bl	8005620 <HAL_TIM_PWM_ConfigChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002588:	f000 f89c 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <MX_TIM9_Init+0x84>)
 800258e:	f000 f935 	bl	80027fc <HAL_TIM_MspPostInit>

}
 8002592:	bf00      	nop
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200004d8 	.word	0x200004d8
 80025a0:	40014000 	.word	0x40014000

080025a4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_TIM11_Init+0x40>)
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <MX_TIM11_Init+0x44>)
 80025ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 63;
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <MX_TIM11_Init+0x40>)
 80025b0:	223f      	movs	r2, #63	; 0x3f
 80025b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <MX_TIM11_Init+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <MX_TIM11_Init+0x40>)
 80025bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <MX_TIM11_Init+0x40>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_TIM11_Init+0x40>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_TIM11_Init+0x40>)
 80025d0:	f002 fcba 	bl	8004f48 <HAL_TIM_Base_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80025da:	f000 f873 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000520 	.word	0x20000520
 80025e8:	40014800 	.word	0x40014800

080025ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <MX_USART1_UART_Init+0x50>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 80025f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_USART1_UART_Init+0x4c>)
 8002624:	f003 fd06 	bl	8006034 <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800262e:	f000 f849 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000568 	.word	0x20000568
 800263c:	40011000 	.word	0x40011000

08002640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <MX_GPIO_Init+0x7c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <MX_GPIO_Init+0x7c>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bu1f_GPIO_Port, bu1f_Pin, GPIO_PIN_RESET);
 800268e:	2200      	movs	r2, #0
 8002690:	2102      	movs	r1, #2
 8002692:	480b      	ldr	r0, [pc, #44]	; (80026c0 <MX_GPIO_Init+0x80>)
 8002694:	f000 fd6a 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : bu1f_Pin */
  GPIO_InitStruct.Pin = bu1f_Pin;
 8002698:	2302      	movs	r3, #2
 800269a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269c:	2301      	movs	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(bu1f_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	4619      	mov	r1, r3
 80026ae:	4804      	ldr	r0, [pc, #16]	; (80026c0 <MX_GPIO_Init+0x80>)
 80026b0:	f000 fbd8 	bl	8002e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026b4:	bf00      	nop
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020000 	.word	0x40020000

080026c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
}
 80026ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026cc:	e7fe      	b.n	80026cc <Error_Handler+0x8>
	...

080026d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_MspInit+0x4c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <HAL_TIM_Base_MspInit+0x80>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d11e      	bne.n	8002770 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_TIM_Base_MspInit+0x84>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_TIM_Base_MspInit+0x84>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_TIM_Base_MspInit+0x84>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	2018      	movs	r0, #24
 8002754:	f000 fabd 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002758:	2018      	movs	r0, #24
 800275a:	f000 fad6 	bl	8002d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	2019      	movs	r0, #25
 8002764:	f000 fab5 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002768:	2019      	movs	r0, #25
 800276a:	f000 face 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800276e:	e012      	b.n	8002796 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <HAL_TIM_Base_MspInit+0x88>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10d      	bne.n	8002796 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_TIM_Base_MspInit+0x84>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_TIM_Base_MspInit+0x84>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_TIM_Base_MspInit+0x84>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40014800 	.word	0x40014800

080027ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_TIM_PWM_MspInit+0x48>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d115      	bne.n	80027ea <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <HAL_TIM_PWM_MspInit+0x4c>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <HAL_TIM_PWM_MspInit+0x4c>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_TIM_PWM_MspInit+0x4c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	2018      	movs	r0, #24
 80027e0:	f000 fa77 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80027e4:	2018      	movs	r0, #24
 80027e6:	f000 fa90 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40014000 	.word	0x40014000
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <HAL_TIM_MspPostInit+0x68>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d11d      	bne.n	800285a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_TIM_MspPostInit+0x6c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_TIM_MspPostInit+0x6c>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_TIM_MspPostInit+0x6c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800283a:	2304      	movs	r3, #4
 800283c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800284a:	2303      	movs	r3, #3
 800284c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	4619      	mov	r1, r3
 8002854:	4805      	ldr	r0, [pc, #20]	; (800286c <HAL_TIM_MspPostInit+0x70>)
 8002856:	f000 fb05 	bl	8002e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800285a:	bf00      	nop
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40014000 	.word	0x40014000
 8002868:	40023800 	.word	0x40023800
 800286c:	40020000 	.word	0x40020000

08002870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <HAL_UART_MspInit+0x94>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d134      	bne.n	80028fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <HAL_UART_MspInit+0x98>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_UART_MspInit+0x98>)
 800289c:	f043 0310 	orr.w	r3, r3, #16
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_UART_MspInit+0x98>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_UART_MspInit+0x98>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_UART_MspInit+0x98>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_UART_MspInit+0x98>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028dc:	2307      	movs	r3, #7
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4809      	ldr	r0, [pc, #36]	; (800290c <HAL_UART_MspInit+0x9c>)
 80028e8:	f000 fabc 	bl	8002e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	2025      	movs	r0, #37	; 0x25
 80028f2:	f000 f9ee 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028f6:	2025      	movs	r0, #37	; 0x25
 80028f8:	f000 fa07 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028fc:	bf00      	nop
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40011000 	.word	0x40011000
 8002908:	40023800 	.word	0x40023800
 800290c:	40020000 	.word	0x40020000

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <NMI_Handler+0x4>

08002916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <HardFault_Handler+0x4>

0800291c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <MemManage_Handler+0x4>

08002922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler+0x4>

0800292e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295c:	f000 f89a 	bl	8002a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <OTG_FS_IRQHandler+0x10>)
 800296a:	f000 fd68 	bl	800343e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20001290 	.word	0x20001290

08002978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <SystemInit+0x20>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <SystemInit+0x20>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800299c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029a0:	480d      	ldr	r0, [pc, #52]	; (80029d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029a2:	490e      	ldr	r1, [pc, #56]	; (80029dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029a4:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a8:	e002      	b.n	80029b0 <LoopCopyDataInit>

080029aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ae:	3304      	adds	r3, #4

080029b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b4:	d3f9      	bcc.n	80029aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029b8:	4c0b      	ldr	r4, [pc, #44]	; (80029e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029bc:	e001      	b.n	80029c2 <LoopFillZerobss>

080029be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c0:	3204      	adds	r2, #4

080029c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c4:	d3fb      	bcc.n	80029be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029c6:	f7ff ffd7 	bl	8002978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ca:	f008 fce1 	bl	800b390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ce:	f7ff facd 	bl	8001f6c <main>
  bx  lr    
 80029d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80029d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029dc:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80029e0:	0800c330 	.word	0x0800c330
  ldr r2, =_sbss
 80029e4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80029e8:	200019bc 	.word	0x200019bc

080029ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC_IRQHandler>
	...

080029f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_Init+0x40>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <HAL_Init+0x40>)
 80029fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_Init+0x40>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <HAL_Init+0x40>)
 8002a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_Init+0x40>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_Init+0x40>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f000 f94f 	bl	8002cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a1e:	200f      	movs	r0, #15
 8002a20:	f000 f808 	bl	8002a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a24:	f7ff fe54 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023c00 	.word	0x40023c00

08002a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_InitTick+0x54>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_InitTick+0x58>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f967 	bl	8002d26 <HAL_SYSTICK_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00e      	b.n	8002a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b0f      	cmp	r3, #15
 8002a66:	d80a      	bhi.n	8002a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f000 f92f 	bl	8002cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a74:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <HAL_InitTick+0x5c>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000004 	.word	0x20000004
 8002a8c:	2000000c 	.word	0x2000000c
 8002a90:	20000008 	.word	0x20000008

08002a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_IncTick+0x20>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	2000000c 	.word	0x2000000c
 8002ab8:	200005ac 	.word	0x200005ac

08002abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_GetTick+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	200005ac 	.word	0x200005ac

08002ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff ffee 	bl	8002abc <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d005      	beq.n	8002afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_Delay+0x44>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002afa:	bf00      	nop
 8002afc:	f7ff ffde 	bl	8002abc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8f7      	bhi.n	8002afc <HAL_Delay+0x28>
  {
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2000000c 	.word	0x2000000c

08002b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4e:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	60d3      	str	r3, [r2, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <__NVIC_GetPriorityGrouping+0x18>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 0307 	and.w	r3, r3, #7
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db0b      	blt.n	8002baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <__NVIC_EnableIRQ+0x38>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db0a      	blt.n	8002be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	490c      	ldr	r1, [pc, #48]	; (8002c08 <__NVIC_SetPriority+0x4c>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	440b      	add	r3, r1
 8002be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be4:	e00a      	b.n	8002bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4908      	ldr	r1, [pc, #32]	; (8002c0c <__NVIC_SetPriority+0x50>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	761a      	strb	r2, [r3, #24]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f1c3 0307 	rsb	r3, r3, #7
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	bf28      	it	cs
 8002c2e:	2304      	movcs	r3, #4
 8002c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d902      	bls.n	8002c40 <NVIC_EncodePriority+0x30>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3b03      	subs	r3, #3
 8002c3e:	e000      	b.n	8002c42 <NVIC_EncodePriority+0x32>
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c58:	f04f 31ff 	mov.w	r1, #4294967295
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43d9      	mvns	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	4313      	orrs	r3, r2
         );
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3724      	adds	r7, #36	; 0x24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c88:	d301      	bcc.n	8002c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00f      	b.n	8002cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <SysTick_Config+0x40>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c96:	210f      	movs	r1, #15
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	f7ff ff8e 	bl	8002bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <SysTick_Config+0x40>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca6:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <SysTick_Config+0x40>)
 8002ca8:	2207      	movs	r2, #7
 8002caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	e000e010 	.word	0xe000e010

08002cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ff29 	bl	8002b1c <__NVIC_SetPriorityGrouping>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce4:	f7ff ff3e 	bl	8002b64 <__NVIC_GetPriorityGrouping>
 8002ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff ff8e 	bl	8002c10 <NVIC_EncodePriority>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff5d 	bl	8002bbc <__NVIC_SetPriority>
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff31 	bl	8002b80 <__NVIC_EnableIRQ>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffa2 	bl	8002c78 <SysTick_Config>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff feb6 	bl	8002abc <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d008      	beq.n	8002d70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2280      	movs	r2, #128	; 0x80
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e052      	b.n	8002e16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0216 	bic.w	r2, r2, #22
 8002d7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d103      	bne.n	8002da0 <HAL_DMA_Abort+0x62>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0208 	bic.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc0:	e013      	b.n	8002dea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dc2:	f7ff fe7b 	bl	8002abc <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d90c      	bls.n	8002dea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e015      	b.n	8002e16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e4      	bne.n	8002dc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	223f      	movs	r2, #63	; 0x3f
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d004      	beq.n	8002e3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e00c      	b.n	8002e56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2205      	movs	r2, #5
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e159      	b.n	8003134 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	f040 8148 	bne.w	800312e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d005      	beq.n	8002eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d130      	bne.n	8002f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 0201 	and.w	r2, r3, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d017      	beq.n	8002f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d123      	bne.n	8002fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	08da      	lsrs	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3208      	adds	r2, #8
 8002f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	220f      	movs	r2, #15
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	69b9      	ldr	r1, [r7, #24]
 8002fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0203 	and.w	r2, r3, #3
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a2 	beq.w	800312e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b57      	ldr	r3, [pc, #348]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b54      	ldr	r3, [pc, #336]	; (800314c <HAL_GPIO_Init+0x2e8>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003006:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_GPIO_Init+0x2ec>)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	3302      	adds	r3, #2
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a49      	ldr	r2, [pc, #292]	; (8003154 <HAL_GPIO_Init+0x2f0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d019      	beq.n	8003066 <HAL_GPIO_Init+0x202>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a48      	ldr	r2, [pc, #288]	; (8003158 <HAL_GPIO_Init+0x2f4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0x1fe>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a47      	ldr	r2, [pc, #284]	; (800315c <HAL_GPIO_Init+0x2f8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_GPIO_Init+0x1fa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a46      	ldr	r2, [pc, #280]	; (8003160 <HAL_GPIO_Init+0x2fc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <HAL_GPIO_Init+0x1f6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_GPIO_Init+0x300>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_GPIO_Init+0x1f2>
 8003052:	2304      	movs	r3, #4
 8003054:	e008      	b.n	8003068 <HAL_GPIO_Init+0x204>
 8003056:	2307      	movs	r3, #7
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x204>
 800305a:	2303      	movs	r3, #3
 800305c:	e004      	b.n	8003068 <HAL_GPIO_Init+0x204>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_Init+0x204>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x204>
 8003066:	2300      	movs	r3, #0
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f002 0203 	and.w	r2, r2, #3
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003078:	4935      	ldr	r1, [pc, #212]	; (8003150 <HAL_GPIO_Init+0x2ec>)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003086:	4b38      	ldr	r3, [pc, #224]	; (8003168 <HAL_GPIO_Init+0x304>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030aa:	4a2f      	ldr	r2, [pc, #188]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d4:	4a24      	ldr	r2, [pc, #144]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_GPIO_Init+0x304>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030fe:	4a1a      	ldr	r2, [pc, #104]	; (8003168 <HAL_GPIO_Init+0x304>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_GPIO_Init+0x304>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_GPIO_Init+0x304>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	f67f aea2 	bls.w	8002e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40013800 	.word	0x40013800
 8003154:	40020000 	.word	0x40020000
 8003158:	40020400 	.word	0x40020400
 800315c:	40020800 	.word	0x40020800
 8003160:	40020c00 	.word	0x40020c00
 8003164:	40021000 	.word	0x40021000
 8003168:	40013c00 	.word	0x40013c00

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800319e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a0:	b08f      	sub	sp, #60	; 0x3c
 80031a2:	af0a      	add	r7, sp, #40	; 0x28
 80031a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e10f      	b.n	80033d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f007 fdd0 	bl	800ad70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2203      	movs	r2, #3
 80031d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 f8b7 	bl	8007362 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	687e      	ldr	r6, [r7, #4]
 80031fc:	466d      	mov	r5, sp
 80031fe:	f106 0410 	add.w	r4, r6, #16
 8003202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800320a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800320e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003212:	1d33      	adds	r3, r6, #4
 8003214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003216:	6838      	ldr	r0, [r7, #0]
 8003218:	f003 ff8e 	bl	8007138 <USB_CoreInit>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0d0      	b.n	80033d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f004 f8a5 	bl	8007384 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	e04a      	b.n	80032d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	333d      	adds	r3, #61	; 0x3d
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	333c      	adds	r3, #60	; 0x3c
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	b298      	uxth	r0, r3
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3344      	adds	r3, #68	; 0x44
 800327c:	4602      	mov	r2, r0
 800327e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3340      	adds	r3, #64	; 0x40
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	3348      	adds	r3, #72	; 0x48
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	334c      	adds	r3, #76	; 0x4c
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3354      	adds	r3, #84	; 0x54
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	3301      	adds	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d3af      	bcc.n	8003240 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e044      	b.n	8003370 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	3301      	adds	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d3b5      	bcc.n	80032e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	687e      	ldr	r6, [r7, #4]
 8003382:	466d      	mov	r5, sp
 8003384:	f106 0410 	add.w	r4, r6, #16
 8003388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800338c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003390:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003394:	e885 0003 	stmia.w	r5, {r0, r1}
 8003398:	1d33      	adds	r3, r6, #4
 800339a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800339c:	6838      	ldr	r0, [r7, #0]
 800339e:	f004 f83d 	bl	800741c <USB_DevInit>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e00d      	b.n	80033d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f005 f98c 	bl	80086e6 <USB_DevDisconnect>

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_PCD_Start+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e020      	b.n	8003436 <HAL_PCD_Start+0x5e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	2b01      	cmp	r3, #1
 8003402:	d109      	bne.n	8003418 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003408:	2b01      	cmp	r3, #1
 800340a:	d005      	beq.n	8003418 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f003 ff8f 	bl	8007340 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f005 f93c 	bl	80086a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800343e:	b590      	push	{r4, r7, lr}
 8003440:	b08d      	sub	sp, #52	; 0x34
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f005 f9fa 	bl	800884e <USB_GetMode>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	f040 848a 	bne.w	8003d76 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f005 f95e 	bl	8008728 <USB_ReadInterrupts>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 8480 	beq.w	8003d74 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f005 f94b 	bl	8008728 <USB_ReadInterrupts>
 8003492:	4603      	mov	r3, r0
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b02      	cmp	r3, #2
 800349a:	d107      	bne.n	80034ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f002 0202 	and.w	r2, r2, #2
 80034aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f005 f939 	bl	8008728 <USB_ReadInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d161      	bne.n	8003584 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0210 	bic.w	r2, r2, #16
 80034ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4413      	add	r3, r2
 80034ec:	3304      	adds	r3, #4
 80034ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	0c5b      	lsrs	r3, r3, #17
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d124      	bne.n	8003546 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d035      	beq.n	8003574 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	6a38      	ldr	r0, [r7, #32]
 800351c:	f004 ff70 	bl	8008400 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800352c:	441a      	add	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	6a1a      	ldr	r2, [r3, #32]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800353e:	441a      	add	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
 8003544:	e016      	b.n	8003574 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	0c5b      	lsrs	r3, r3, #17
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	2b06      	cmp	r3, #6
 8003550:	d110      	bne.n	8003574 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003558:	2208      	movs	r2, #8
 800355a:	4619      	mov	r1, r3
 800355c:	6a38      	ldr	r0, [r7, #32]
 800355e:	f004 ff4f 	bl	8008400 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6a1a      	ldr	r2, [r3, #32]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800356e:	441a      	add	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0210 	orr.w	r2, r2, #16
 8003582:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f005 f8cd 	bl	8008728 <USB_ReadInterrupts>
 800358e:	4603      	mov	r3, r0
 8003590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003594:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003598:	f040 80a7 	bne.w	80036ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f005 f8d2 	bl	800874e <USB_ReadDevAllOutEpInterrupt>
 80035aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035ac:	e099      	b.n	80036e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 808e 	beq.w	80036d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 f8f6 	bl	80087b6 <USB_ReadDevOutEPInterrupt>
 80035ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e2:	461a      	mov	r2, r3
 80035e4:	2301      	movs	r3, #1
 80035e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fec2 	bl	8004374 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	461a      	mov	r2, r3
 8003608:	2308      	movs	r3, #8
 800360a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800360c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 ff98 	bl	8004544 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362a:	461a      	mov	r2, r3
 800362c:	2310      	movs	r3, #16
 800362e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d030      	beq.n	800369c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b80      	cmp	r3, #128	; 0x80
 8003644:	d109      	bne.n	800365a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003658:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	78db      	ldrb	r3, [r3, #3]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d108      	bne.n	800368a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2200      	movs	r2, #0
 800367c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	b2db      	uxtb	r3, r3
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f007 fc6f 	bl	800af68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003696:	461a      	mov	r2, r3
 8003698:	2302      	movs	r3, #2
 800369a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b2:	461a      	mov	r2, r3
 80036b4:	2320      	movs	r3, #32
 80036b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ce:	461a      	mov	r2, r3
 80036d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	3301      	adds	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f47f af62 	bne.w	80035ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f005 f81a 	bl	8008728 <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036fe:	f040 80db 	bne.w	80038b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f005 f83b 	bl	8008782 <USB_ReadDevAllInEpInterrupt>
 800370c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003712:	e0cd      	b.n	80038b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80c2 	beq.w	80038a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f005 f861 	bl	80087f2 <USB_ReadDevInEPInterrupt>
 8003730:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d057      	beq.n	80037ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	2201      	movs	r2, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	69f9      	ldr	r1, [r7, #28]
 8003758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800375c:	4013      	ands	r3, r2
 800375e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	461a      	mov	r2, r3
 800376e:	2301      	movs	r3, #1
 8003770:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d132      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	334c      	adds	r3, #76	; 0x4c
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4403      	add	r3, r0
 800379a:	3348      	adds	r3, #72	; 0x48
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4419      	add	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4403      	add	r3, r0
 80037ae:	334c      	adds	r3, #76	; 0x4c
 80037b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d113      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x3a2>
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3354      	adds	r3, #84	; 0x54
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037d8:	461a      	mov	r2, r3
 80037da:	2101      	movs	r1, #1
 80037dc:	f005 f868 	bl	80088b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f007 fb43 	bl	800ae72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	461a      	mov	r2, r3
 8003804:	2308      	movs	r3, #8
 8003806:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	461a      	mov	r2, r3
 8003820:	2310      	movs	r3, #16
 8003822:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	461a      	mov	r2, r3
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d023      	beq.n	8003892 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800384a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800384c:	6a38      	ldr	r0, [r7, #32]
 800384e:	f003 ff49 	bl	80076e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	3338      	adds	r3, #56	; 0x38
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	3304      	adds	r3, #4
 8003864:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	78db      	ldrb	r3, [r3, #3]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	b2db      	uxtb	r3, r3
 8003878:	4619      	mov	r1, r3
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f007 fb86 	bl	800af8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388c:	461a      	mov	r2, r3
 800388e:	2302      	movs	r3, #2
 8003890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800389c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fcdb 	bl	800425a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	3301      	adds	r3, #1
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f47f af2e 	bne.w	8003714 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f004 ff33 	bl	8008728 <USB_ReadInterrupts>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038cc:	d122      	bne.n	8003914 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d108      	bne.n	80038fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038f4:	2100      	movs	r1, #0
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fec2 	bl	8004680 <HAL_PCDEx_LPM_Callback>
 80038fc:	e002      	b.n	8003904 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f007 fb24 	bl	800af4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f004 ff05 	bl	8008728 <USB_ReadInterrupts>
 800391e:	4603      	mov	r3, r0
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003928:	d112      	bne.n	8003950 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d102      	bne.n	8003940 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f007 fae0 	bl	800af00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800394e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f004 fee7 	bl	8008728 <USB_ReadInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	f040 80b7 	bne.w	8003ad6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2110      	movs	r1, #16
 8003982:	4618      	mov	r0, r3
 8003984:	f003 feae 	bl	80076e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398c:	e046      	b.n	8003a1c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399a:	461a      	mov	r2, r3
 800399c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b2:	0151      	lsls	r1, r2, #5
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	440a      	add	r2, r1
 80039b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	461a      	mov	r2, r3
 80039d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e6:	0151      	lsls	r1, r2, #5
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	440a      	add	r2, r1
 80039ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a06:	0151      	lsls	r1, r2, #5
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	440a      	add	r2, r1
 8003a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	3301      	adds	r3, #1
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d3b3      	bcc.n	800398e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a52:	f043 030b 	orr.w	r3, r3, #11
 8003a56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a68:	f043 030b 	orr.w	r3, r3, #11
 8003a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6e:	e015      	b.n	8003a9c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a96:	f043 030b 	orr.w	r3, r3, #11
 8003a9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003aae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f004 fef5 	bl	80088b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 fe24 	bl	8008728 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aea:	d124      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f004 feba 	bl	800886a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f003 fe6f 	bl	80077de <USB_GetDevSpeed>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	f001 f9e8 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 8003b10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f003 fb6e 	bl	80071fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f007 f9ce 	bl	800aec2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 fdf4 	bl	8008728 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d10a      	bne.n	8003b60 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f007 f9ab 	bl	800aea6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f002 0208 	and.w	r2, r2, #8
 8003b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 fddf 	bl	8008728 <USB_ReadInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d122      	bne.n	8003bba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b80:	2301      	movs	r3, #1
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
 8003b84:	e014      	b.n	8003bb0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fb27 	bl	80041f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	3301      	adds	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3e5      	bcc.n	8003b86 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f004 fdb2 	bl	8008728 <USB_ReadInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bce:	d13b      	bne.n	8003c48 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd4:	e02b      	b.n	8003c2e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3340      	adds	r3, #64	; 0x40
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d115      	bne.n	8003c28 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da12      	bge.n	8003c28 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	333f      	adds	r3, #63	; 0x3f
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fae8 	bl	80041f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d3ce      	bcc.n	8003bd6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f004 fd6b 	bl	8008728 <USB_ReadInterrupts>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c5c:	d155      	bne.n	8003d0a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c5e:	2301      	movs	r3, #1
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
 8003c62:	e045      	b.n	8003cf0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d12e      	bne.n	8003cea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	da2b      	bge.n	8003cea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d121      	bne.n	8003cea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce6:	6053      	str	r3, [r2, #4]
            break;
 8003ce8:	e007      	b.n	8003cfa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	3301      	adds	r3, #1
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3b4      	bcc.n	8003c64 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f004 fd0a 	bl	8008728 <USB_ReadInterrupts>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1e:	d10a      	bne.n	8003d36 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f007 f945 	bl	800afb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f004 fcf4 	bl	8008728 <USB_ReadInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d115      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f007 f935 	bl	800afcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	e000      	b.n	8003d76 <HAL_PCD_IRQHandler+0x938>
      return;
 8003d74:	bf00      	nop
    }
  }
}
 8003d76:	3734      	adds	r7, #52	; 0x34
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd90      	pop	{r4, r7, pc}

08003d7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_PCD_SetAddress+0x1a>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e013      	b.n	8003dbe <HAL_PCD_SetAddress+0x42>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 fc52 	bl	8008658 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	4608      	mov	r0, r1
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	70fb      	strb	r3, [r7, #3]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	803b      	strh	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da0f      	bge.n	8003e0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	f003 020f 	and.w	r2, r3, #15
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	3338      	adds	r3, #56	; 0x38
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	3304      	adds	r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	705a      	strb	r2, [r3, #1]
 8003e0a:	e00f      	b.n	8003e2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	3304      	adds	r3, #4
 8003e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e38:	883a      	ldrh	r2, [r7, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	78ba      	ldrb	r2, [r7, #2]
 8003e42:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	785b      	ldrb	r3, [r3, #1]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e56:	78bb      	ldrb	r3, [r7, #2]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d102      	bne.n	8003e62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_PCD_EP_Open+0xaa>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e00e      	b.n	8003e8e <HAL_PCD_EP_Open+0xc8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68f9      	ldr	r1, [r7, #12]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 fcd2 	bl	8007828 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e8c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da0f      	bge.n	8003eca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	f003 020f 	and.w	r2, r3, #15
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	3338      	adds	r3, #56	; 0x38
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	705a      	strb	r2, [r3, #1]
 8003ec8:	e00f      	b.n	8003eea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	f003 020f 	and.w	r2, r3, #15
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_PCD_EP_Close+0x6e>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e00e      	b.n	8003f22 <HAL_PCD_EP_Close+0x8c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f003 fd10 	bl	8007938 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	460b      	mov	r3, r1
 8003f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
 8003f3c:	f003 020f 	and.w	r2, r3, #15
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	3304      	adds	r3, #4
 8003f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2200      	movs	r2, #0
 8003f64:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f6c:	7afb      	ldrb	r3, [r7, #11]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d102      	bne.n	8003f86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f86:	7afb      	ldrb	r3, [r7, #11]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6979      	ldr	r1, [r7, #20]
 8003f9e:	f003 ffef 	bl	8007f80 <USB_EP0StartXfer>
 8003fa2:	e008      	b.n	8003fb6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6979      	ldr	r1, [r7, #20]
 8003fb2:	f003 fd9d 	bl	8007af0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004000:	7afb      	ldrb	r3, [r7, #11]
 8004002:	f003 020f 	and.w	r2, r3, #15
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	3338      	adds	r3, #56	; 0x38
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	3304      	adds	r3, #4
 8004016:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2200      	movs	r2, #0
 8004028:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2201      	movs	r2, #1
 800402e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004030:	7afb      	ldrb	r3, [r7, #11]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	b2da      	uxtb	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d102      	bne.n	800404a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800404a:	7afb      	ldrb	r3, [r7, #11]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	6979      	ldr	r1, [r7, #20]
 8004062:	f003 ff8d 	bl	8007f80 <USB_EP0StartXfer>
 8004066:	e008      	b.n	800407a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	f003 fd3b 	bl	8007af0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 020f 	and.w	r2, r3, #15
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	d901      	bls.n	80040a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e050      	b.n	8004144 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	da0f      	bge.n	80040ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	f003 020f 	and.w	r2, r3, #15
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	3338      	adds	r3, #56	; 0x38
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	3304      	adds	r3, #4
 80040c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	705a      	strb	r2, [r3, #1]
 80040c8:	e00d      	b.n	80040e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	3304      	adds	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_PCD_EP_SetStall+0x82>
 8004102:	2302      	movs	r3, #2
 8004104:	e01e      	b.n	8004144 <HAL_PCD_EP_SetStall+0xc0>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68f9      	ldr	r1, [r7, #12]
 8004114:	4618      	mov	r0, r3
 8004116:	f004 f9cb 	bl	80084b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	b2d9      	uxtb	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004134:	461a      	mov	r2, r3
 8004136:	f004 fbbb 	bl	80088b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 020f 	and.w	r2, r3, #15
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	d901      	bls.n	800416a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e042      	b.n	80041f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800416a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800416e:	2b00      	cmp	r3, #0
 8004170:	da0f      	bge.n	8004192 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	f003 020f 	and.w	r2, r3, #15
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	3338      	adds	r3, #56	; 0x38
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	3304      	adds	r3, #4
 8004188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	705a      	strb	r2, [r3, #1]
 8004190:	e00f      	b.n	80041b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	f003 020f 	and.w	r2, r3, #15
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4413      	add	r3, r2
 80041a8:	3304      	adds	r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_PCD_EP_ClrStall+0x86>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e00e      	b.n	80041f0 <HAL_PCD_EP_ClrStall+0xa4>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f004 f9d3 	bl	800858c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004208:	2b00      	cmp	r3, #0
 800420a:	da0c      	bge.n	8004226 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	f003 020f 	and.w	r2, r3, #15
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	3338      	adds	r3, #56	; 0x38
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	3304      	adds	r3, #4
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	e00c      	b.n	8004240 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	f003 020f 	and.w	r2, r3, #15
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	3304      	adds	r3, #4
 800423e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68f9      	ldr	r1, [r7, #12]
 8004246:	4618      	mov	r0, r3
 8004248:	f003 fff2 	bl	8008230 <USB_EPStopXfer>
 800424c:	4603      	mov	r3, r0
 800424e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004250:	7afb      	ldrb	r3, [r7, #11]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b08a      	sub	sp, #40	; 0x28
 800425e:	af02      	add	r7, sp, #8
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	3338      	adds	r3, #56	; 0x38
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	3304      	adds	r3, #4
 8004280:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1a      	ldr	r2, [r3, #32]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	429a      	cmp	r2, r3
 800428c:	d901      	bls.n	8004292 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e06c      	b.n	800436c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d902      	bls.n	80042ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3303      	adds	r3, #3
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042b6:	e02b      	b.n	8004310 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d902      	bls.n	80042d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	3303      	adds	r3, #3
 80042d8:	089b      	lsrs	r3, r3, #2
 80042da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6919      	ldr	r1, [r3, #16]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4603      	mov	r3, r0
 80042f2:	6978      	ldr	r0, [r7, #20]
 80042f4:	f004 f846 	bl	8008384 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	441a      	add	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	441a      	add	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	b29b      	uxth	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	429a      	cmp	r2, r3
 8004324:	d809      	bhi.n	800433a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1a      	ldr	r2, [r3, #32]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800432e:	429a      	cmp	r2, r3
 8004330:	d203      	bcs.n	800433a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1be      	bne.n	80042b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	429a      	cmp	r2, r3
 8004344:	d811      	bhi.n	800436a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	2201      	movs	r2, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	43db      	mvns	r3, r3
 8004360:	6939      	ldr	r1, [r7, #16]
 8004362:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004366:	4013      	ands	r3, r2
 8004368:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	333c      	adds	r3, #60	; 0x3c
 800438c:	3304      	adds	r3, #4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d17b      	bne.n	80044a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4a61      	ldr	r2, [pc, #388]	; (800453c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	f240 80b9 	bls.w	8004530 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80b3 	beq.w	8004530 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	461a      	mov	r2, r3
 80043d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043dc:	6093      	str	r3, [r2, #8]
 80043de:	e0a7      	b.n	8004530 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	2320      	movs	r3, #32
 80043fa:	6093      	str	r3, [r2, #8]
 80043fc:	e098      	b.n	8004530 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	f040 8093 	bne.w	8004530 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4a4b      	ldr	r2, [pc, #300]	; (800453c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d90f      	bls.n	8004432 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	461a      	mov	r2, r3
 800442a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442e:	6093      	str	r3, [r2, #8]
 8004430:	e07e      	b.n	8004530 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	3304      	adds	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	0159      	lsls	r1, r3, #5
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	440b      	add	r3, r1
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445e:	1ad2      	subs	r2, r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d114      	bne.n	8004494 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800447c:	461a      	mov	r2, r3
 800447e:	2101      	movs	r1, #1
 8004480:	f004 fa16 	bl	80088b0 <USB_EP0_OutStart>
 8004484:	e006      	b.n	8004494 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	441a      	add	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f006 fcce 	bl	800ae3c <HAL_PCD_DataOutStageCallback>
 80044a0:	e046      	b.n	8004530 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d124      	bne.n	80044f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	461a      	mov	r2, r3
 80044c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c6:	6093      	str	r3, [r2, #8]
 80044c8:	e032      	b.n	8004530 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	2320      	movs	r3, #32
 80044e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f006 fca5 	bl	800ae3c <HAL_PCD_DataOutStageCallback>
 80044f2:	e01d      	b.n	8004530 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d114      	bne.n	8004524 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800451c:	461a      	mov	r2, r3
 800451e:	2100      	movs	r1, #0
 8004520:	f004 f9c6 	bl	80088b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f006 fc86 	bl	800ae3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	4f54300a 	.word	0x4f54300a
 8004540:	4f54310a 	.word	0x4f54310a

08004544 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	333c      	adds	r3, #60	; 0x3c
 800455c:	3304      	adds	r3, #4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <PCD_EP_OutSetupPacket_int+0x88>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d90e      	bls.n	8004598 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004580:	2b00      	cmp	r3, #0
 8004582:	d009      	beq.n	8004598 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004590:	461a      	mov	r2, r3
 8004592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004596:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f006 fc3d 	bl	800ae18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <PCD_EP_OutSetupPacket_int+0x88>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d90c      	bls.n	80045c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d108      	bne.n	80045c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045b8:	461a      	mov	r2, r3
 80045ba:	2101      	movs	r1, #1
 80045bc:	f004 f978 	bl	80088b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	4f54300a 	.word	0x4f54300a

080045d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
 80045dc:	4613      	mov	r3, r2
 80045de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d107      	bne.n	80045fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045ee:	883b      	ldrh	r3, [r7, #0]
 80045f0:	0419      	lsls	r1, r3, #16
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
 80045fc:	e028      	b.n	8004650 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4413      	add	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	e00d      	b.n	800462e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	3340      	adds	r3, #64	; 0x40
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	4413      	add	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	3301      	adds	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	3b01      	subs	r3, #1
 8004634:	429a      	cmp	r2, r3
 8004636:	d3ec      	bcc.n	8004612 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004638:	883b      	ldrh	r3, [r7, #0]
 800463a:	0418      	lsls	r0, r3, #16
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	3b01      	subs	r3, #1
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	4302      	orrs	r2, r0
 8004648:	3340      	adds	r3, #64	; 0x40
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	887a      	ldrh	r2, [r7, #2]
 8004670:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e267      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d075      	beq.n	80047a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b6:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d00c      	beq.n	80046dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c2:	4b85      	ldr	r3, [pc, #532]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d112      	bne.n	80046f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ce:	4b82      	ldr	r3, [pc, #520]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046da:	d10b      	bne.n	80046f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	4b7e      	ldr	r3, [pc, #504]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d05b      	beq.n	80047a0 <HAL_RCC_OscConfig+0x108>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d157      	bne.n	80047a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e242      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d106      	bne.n	800470c <HAL_RCC_OscConfig+0x74>
 80046fe:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a75      	ldr	r2, [pc, #468]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e01d      	b.n	8004748 <HAL_RCC_OscConfig+0xb0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0x98>
 8004716:	4b70      	ldr	r3, [pc, #448]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a6f      	ldr	r2, [pc, #444]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 800471c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b6d      	ldr	r3, [pc, #436]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a6c      	ldr	r2, [pc, #432]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0xb0>
 8004730:	4b69      	ldr	r3, [pc, #420]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a68      	ldr	r2, [pc, #416]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b66      	ldr	r3, [pc, #408]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a65      	ldr	r2, [pc, #404]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fe f9b4 	bl	8002abc <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004758:	f7fe f9b0 	bl	8002abc <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e207      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	4b5b      	ldr	r3, [pc, #364]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0xc0>
 8004776:	e014      	b.n	80047a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe f9a0 	bl	8002abc <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004780:	f7fe f99c 	bl	8002abc <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e1f3      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004792:	4b51      	ldr	r3, [pc, #324]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0xe8>
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d063      	beq.n	8004876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ae:	4b4a      	ldr	r3, [pc, #296]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ba:	4b47      	ldr	r3, [pc, #284]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d11c      	bne.n	8004800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c6:	4b44      	ldr	r3, [pc, #272]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d116      	bne.n	8004800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	4b41      	ldr	r3, [pc, #260]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_RCC_OscConfig+0x152>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e1c7      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ea:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4937      	ldr	r1, [pc, #220]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fe:	e03a      	b.n	8004876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d020      	beq.n	800484a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004808:	4b34      	ldr	r3, [pc, #208]	; (80048dc <HAL_RCC_OscConfig+0x244>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fe f955 	bl	8002abc <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004816:	f7fe f951 	bl	8002abc <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1a8      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004834:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4925      	ldr	r1, [pc, #148]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 8004844:	4313      	orrs	r3, r2
 8004846:	600b      	str	r3, [r1, #0]
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCC_OscConfig+0x244>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fe f934 	bl	8002abc <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004858:	f7fe f930 	bl	8002abc <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e187      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486a:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d036      	beq.n	80048f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <HAL_RCC_OscConfig+0x248>)
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fe f914 	bl	8002abc <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004898:	f7fe f910 	bl	8002abc <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e167      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048aa:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_RCC_OscConfig+0x240>)
 80048ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x200>
 80048b6:	e01b      	b.n	80048f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <HAL_RCC_OscConfig+0x248>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048be:	f7fe f8fd 	bl	8002abc <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c4:	e00e      	b.n	80048e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c6:	f7fe f8f9 	bl	8002abc <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d907      	bls.n	80048e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e150      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
 80048d8:	40023800 	.word	0x40023800
 80048dc:	42470000 	.word	0x42470000
 80048e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e4:	4b88      	ldr	r3, [pc, #544]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 80048e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1ea      	bne.n	80048c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8097 	beq.w	8004a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048fe:	2300      	movs	r3, #0
 8004900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004902:	4b81      	ldr	r3, [pc, #516]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	4b7d      	ldr	r3, [pc, #500]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	4a7c      	ldr	r2, [pc, #496]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491c:	6413      	str	r3, [r2, #64]	; 0x40
 800491e:	4b7a      	ldr	r3, [pc, #488]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492e:	4b77      	ldr	r3, [pc, #476]	; (8004b0c <HAL_RCC_OscConfig+0x474>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d118      	bne.n	800496c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493a:	4b74      	ldr	r3, [pc, #464]	; (8004b0c <HAL_RCC_OscConfig+0x474>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a73      	ldr	r2, [pc, #460]	; (8004b0c <HAL_RCC_OscConfig+0x474>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004946:	f7fe f8b9 	bl	8002abc <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494e:	f7fe f8b5 	bl	8002abc <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e10c      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004960:	4b6a      	ldr	r3, [pc, #424]	; (8004b0c <HAL_RCC_OscConfig+0x474>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d106      	bne.n	8004982 <HAL_RCC_OscConfig+0x2ea>
 8004974:	4b64      	ldr	r3, [pc, #400]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	4a63      	ldr	r2, [pc, #396]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6713      	str	r3, [r2, #112]	; 0x70
 8004980:	e01c      	b.n	80049bc <HAL_RCC_OscConfig+0x324>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b05      	cmp	r3, #5
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x30c>
 800498a:	4b5f      	ldr	r3, [pc, #380]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4a5e      	ldr	r2, [pc, #376]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	6713      	str	r3, [r2, #112]	; 0x70
 8004996:	4b5c      	ldr	r3, [pc, #368]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	4a5b      	ldr	r2, [pc, #364]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	6713      	str	r3, [r2, #112]	; 0x70
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0x324>
 80049a4:	4b58      	ldr	r3, [pc, #352]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	4a57      	ldr	r2, [pc, #348]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	6713      	str	r3, [r2, #112]	; 0x70
 80049b0:	4b55      	ldr	r3, [pc, #340]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a54      	ldr	r2, [pc, #336]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 80049b6:	f023 0304 	bic.w	r3, r3, #4
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fe f87a 	bl	8002abc <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fe f876 	bl	8002abc <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e0cb      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e2:	4b49      	ldr	r3, [pc, #292]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0ee      	beq.n	80049cc <HAL_RCC_OscConfig+0x334>
 80049ee:	e014      	b.n	8004a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f0:	f7fe f864 	bl	8002abc <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fe f860 	bl	8002abc <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e0b5      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1ee      	bne.n	80049f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d105      	bne.n	8004a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a20:	4b39      	ldr	r3, [pc, #228]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	4a38      	ldr	r2, [pc, #224]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80a1 	beq.w	8004b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a36:	4b34      	ldr	r3, [pc, #208]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d05c      	beq.n	8004afc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d141      	bne.n	8004ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <HAL_RCC_OscConfig+0x478>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fe f834 	bl	8002abc <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fe f830 	bl	8002abc <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e087      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6a:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	019b      	lsls	r3, r3, #6
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	041b      	lsls	r3, r3, #16
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	061b      	lsls	r3, r3, #24
 8004a9a:	491b      	ldr	r1, [pc, #108]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa0:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <HAL_RCC_OscConfig+0x478>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fe f809 	bl	8002abc <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fe f805 	bl	8002abc <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e05c      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac0:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCC_OscConfig+0x416>
 8004acc:	e054      	b.n	8004b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <HAL_RCC_OscConfig+0x478>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fd fff2 	bl	8002abc <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fd ffee 	bl	8002abc <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e045      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_RCC_OscConfig+0x470>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x444>
 8004afa:	e03d      	b.n	8004b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d107      	bne.n	8004b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e038      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40007000 	.word	0x40007000
 8004b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b14:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <HAL_RCC_OscConfig+0x4ec>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d028      	beq.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d121      	bne.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d11a      	bne.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b44:	4013      	ands	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d111      	bne.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d107      	bne.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800

08004b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0cc      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b68      	ldr	r3, [pc, #416]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d90c      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b65      	ldr	r3, [pc, #404]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b63      	ldr	r3, [pc, #396]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0b8      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d020      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bdc:	4b59      	ldr	r3, [pc, #356]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4a58      	ldr	r2, [pc, #352]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf4:	4b53      	ldr	r3, [pc, #332]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a52      	ldr	r2, [pc, #328]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c00:	4b50      	ldr	r3, [pc, #320]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	494d      	ldr	r1, [pc, #308]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d044      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d119      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e07f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c46:	4b3f      	ldr	r3, [pc, #252]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e06f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c56:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e067      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c66:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f023 0203 	bic.w	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4934      	ldr	r1, [pc, #208]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c78:	f7fd ff20 	bl	8002abc <HAL_GetTick>
 8004c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c80:	f7fd ff1c 	bl	8002abc <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e04f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 020c 	and.w	r2, r3, #12
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d1eb      	bne.n	8004c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca8:	4b25      	ldr	r3, [pc, #148]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d20c      	bcs.n	8004cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb6:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e032      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cdc:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4916      	ldr	r1, [pc, #88]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	490e      	ldr	r1, [pc, #56]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d0e:	f000 f821 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004d12:	4602      	mov	r2, r0
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	490a      	ldr	r1, [pc, #40]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004d20:	5ccb      	ldrb	r3, [r1, r3]
 8004d22:	fa22 f303 	lsr.w	r3, r2, r3
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fd fe80 	bl	8002a34 <HAL_InitTick>

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023c00 	.word	0x40023c00
 8004d44:	40023800 	.word	0x40023800
 8004d48:	0800c2d8 	.word	0x0800c2d8
 8004d4c:	20000004 	.word	0x20000004
 8004d50:	20000008 	.word	0x20000008

08004d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d58:	b090      	sub	sp, #64	; 0x40
 8004d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d60:	2300      	movs	r3, #0
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d64:	2300      	movs	r3, #0
 8004d66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d6c:	4b59      	ldr	r3, [pc, #356]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d00d      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x40>
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	f200 80a1 	bhi.w	8004ec0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x34>
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d003      	beq.n	8004d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d86:	e09b      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d88:	4b53      	ldr	r3, [pc, #332]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d8c:	e09b      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d8e:	4b53      	ldr	r3, [pc, #332]	; (8004edc <HAL_RCC_GetSysClockFreq+0x188>)
 8004d90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d92:	e098      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d94:	4b4f      	ldr	r3, [pc, #316]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d9e:	4b4d      	ldr	r3, [pc, #308]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d028      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004daa:	4b4a      	ldr	r3, [pc, #296]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	099b      	lsrs	r3, r3, #6
 8004db0:	2200      	movs	r2, #0
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	627a      	str	r2, [r7, #36]	; 0x24
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4b47      	ldr	r3, [pc, #284]	; (8004edc <HAL_RCC_GetSysClockFreq+0x188>)
 8004dc0:	fb03 f201 	mul.w	r2, r3, r1
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	fb00 f303 	mul.w	r3, r0, r3
 8004dca:	4413      	add	r3, r2
 8004dcc:	4a43      	ldr	r2, [pc, #268]	; (8004edc <HAL_RCC_GetSysClockFreq+0x188>)
 8004dce:	fba0 1202 	umull	r1, r2, r0, r2
 8004dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd4:	460a      	mov	r2, r1
 8004dd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dda:	4413      	add	r3, r2
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de0:	2200      	movs	r2, #0
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	61fa      	str	r2, [r7, #28]
 8004de6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004dee:	f7fb fef7 	bl	8000be0 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4613      	mov	r3, r2
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dfa:	e053      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfc:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	099b      	lsrs	r3, r3, #6
 8004e02:	2200      	movs	r2, #0
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	617a      	str	r2, [r7, #20]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e0e:	f04f 0b00 	mov.w	fp, #0
 8004e12:	4652      	mov	r2, sl
 8004e14:	465b      	mov	r3, fp
 8004e16:	f04f 0000 	mov.w	r0, #0
 8004e1a:	f04f 0100 	mov.w	r1, #0
 8004e1e:	0159      	lsls	r1, r3, #5
 8004e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e24:	0150      	lsls	r0, r2, #5
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	ebb2 080a 	subs.w	r8, r2, sl
 8004e2e:	eb63 090b 	sbc.w	r9, r3, fp
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e46:	ebb2 0408 	subs.w	r4, r2, r8
 8004e4a:	eb63 0509 	sbc.w	r5, r3, r9
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	00eb      	lsls	r3, r5, #3
 8004e58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e5c:	00e2      	lsls	r2, r4, #3
 8004e5e:	4614      	mov	r4, r2
 8004e60:	461d      	mov	r5, r3
 8004e62:	eb14 030a 	adds.w	r3, r4, sl
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	eb45 030b 	adc.w	r3, r5, fp
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	028b      	lsls	r3, r1, #10
 8004e7e:	4621      	mov	r1, r4
 8004e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e84:	4621      	mov	r1, r4
 8004e86:	028a      	lsls	r2, r1, #10
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8e:	2200      	movs	r2, #0
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	60fa      	str	r2, [r7, #12]
 8004e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e98:	f7fb fea2 	bl	8000be0 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	3301      	adds	r3, #1
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ebe:	e002      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ec2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3740      	adds	r7, #64	; 0x40
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	00f42400 	.word	0x00f42400
 8004edc:	017d7840 	.word	0x017d7840

08004ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee4:	4b03      	ldr	r3, [pc, #12]	; (8004ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000004 	.word	0x20000004

08004ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004efc:	f7ff fff0 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	0a9b      	lsrs	r3, r3, #10
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4903      	ldr	r1, [pc, #12]	; (8004f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	0800c2e8 	.word	0x0800c2e8

08004f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f24:	f7ff ffdc 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0b5b      	lsrs	r3, r3, #13
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4903      	ldr	r1, [pc, #12]	; (8004f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	0800c2e8 	.word	0x0800c2e8

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e041      	b.n	8004fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fd fbd6 	bl	8002720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fd06 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d001      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e044      	b.n	800508a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <HAL_TIM_Base_Start_IT+0xb0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d018      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x6c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502a:	d013      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x6c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1a      	ldr	r2, [pc, #104]	; (800509c <HAL_TIM_Base_Start_IT+0xb4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x6c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a19      	ldr	r2, [pc, #100]	; (80050a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x6c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x6c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d111      	bne.n	8005078 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b06      	cmp	r3, #6
 8005064:	d010      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	e007      	b.n	8005088 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40000c00 	.word	0x40000c00
 80050a8:	40014000 	.word	0x40014000

080050ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e041      	b.n	8005142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fd fb6a 	bl	80027ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f000 fc54 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fec0 	bl	8005ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a29      	ldr	r2, [pc, #164]	; (8005210 <HAL_TIM_PWM_Stop+0xc4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d117      	bne.n	800519e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6a1a      	ldr	r2, [r3, #32]
 8005174:	f241 1311 	movw	r3, #4369	; 0x1111
 8005178:	4013      	ands	r3, r2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10f      	bne.n	800519e <HAL_TIM_PWM_Stop+0x52>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6a1a      	ldr	r2, [r3, #32]
 8005184:	f240 4344 	movw	r3, #1092	; 0x444
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d107      	bne.n	800519e <HAL_TIM_PWM_Stop+0x52>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800519c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <HAL_TIM_PWM_Stop+0x82>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	f240 4344 	movw	r3, #1092	; 0x444
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d107      	bne.n	80051ce <HAL_TIM_PWM_Stop+0x82>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <HAL_TIM_PWM_Stop+0x92>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051dc:	e013      	b.n	8005206 <HAL_TIM_PWM_Stop+0xba>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d104      	bne.n	80051ee <HAL_TIM_PWM_Stop+0xa2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ec:	e00b      	b.n	8005206 <HAL_TIM_PWM_Stop+0xba>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d104      	bne.n	80051fe <HAL_TIM_PWM_Stop+0xb2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051fc:	e003      	b.n	8005206 <HAL_TIM_PWM_Stop+0xba>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40010000 	.word	0x40010000

08005214 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <HAL_TIM_PWM_Start_IT+0x28>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	bf14      	ite	ne
 8005234:	2301      	movne	r3, #1
 8005236:	2300      	moveq	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e022      	b.n	8005282 <HAL_TIM_PWM_Start_IT+0x6e>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b04      	cmp	r3, #4
 8005240:	d109      	bne.n	8005256 <HAL_TIM_PWM_Start_IT+0x42>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	bf14      	ite	ne
 800524e:	2301      	movne	r3, #1
 8005250:	2300      	moveq	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e015      	b.n	8005282 <HAL_TIM_PWM_Start_IT+0x6e>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d109      	bne.n	8005270 <HAL_TIM_PWM_Start_IT+0x5c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e008      	b.n	8005282 <HAL_TIM_PWM_Start_IT+0x6e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e0b3      	b.n	80053f2 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <HAL_TIM_PWM_Start_IT+0x86>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005298:	e013      	b.n	80052c2 <HAL_TIM_PWM_Start_IT+0xae>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b04      	cmp	r3, #4
 800529e:	d104      	bne.n	80052aa <HAL_TIM_PWM_Start_IT+0x96>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a8:	e00b      	b.n	80052c2 <HAL_TIM_PWM_Start_IT+0xae>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start_IT+0xa6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b8:	e003      	b.n	80052c2 <HAL_TIM_PWM_Start_IT+0xae>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d841      	bhi.n	800534c <HAL_TIM_PWM_Start_IT+0x138>
 80052c8:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	08005305 	.word	0x08005305
 80052d4:	0800534d 	.word	0x0800534d
 80052d8:	0800534d 	.word	0x0800534d
 80052dc:	0800534d 	.word	0x0800534d
 80052e0:	08005317 	.word	0x08005317
 80052e4:	0800534d 	.word	0x0800534d
 80052e8:	0800534d 	.word	0x0800534d
 80052ec:	0800534d 	.word	0x0800534d
 80052f0:	08005329 	.word	0x08005329
 80052f4:	0800534d 	.word	0x0800534d
 80052f8:	0800534d 	.word	0x0800534d
 80052fc:	0800534d 	.word	0x0800534d
 8005300:	0800533b 	.word	0x0800533b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0202 	orr.w	r2, r2, #2
 8005312:	60da      	str	r2, [r3, #12]
      break;
 8005314:	e01d      	b.n	8005352 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0204 	orr.w	r2, r2, #4
 8005324:	60da      	str	r2, [r3, #12]
      break;
 8005326:	e014      	b.n	8005352 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0208 	orr.w	r2, r2, #8
 8005336:	60da      	str	r2, [r3, #12]
      break;
 8005338:	e00b      	b.n	8005352 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0210 	orr.w	r2, r2, #16
 8005348:	60da      	str	r2, [r3, #12]
      break;
 800534a:	e002      	b.n	8005352 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      break;
 8005350:	bf00      	nop
  }

  if (status == HAL_OK)
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d14b      	bne.n	80053f0 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2201      	movs	r2, #1
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fdbf 	bl	8005ee4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a24      	ldr	r2, [pc, #144]	; (80053fc <HAL_TIM_PWM_Start_IT+0x1e8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d107      	bne.n	8005380 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d018      	beq.n	80053bc <HAL_TIM_PWM_Start_IT+0x1a8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d013      	beq.n	80053bc <HAL_TIM_PWM_Start_IT+0x1a8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a19      	ldr	r2, [pc, #100]	; (8005400 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00e      	beq.n	80053bc <HAL_TIM_PWM_Start_IT+0x1a8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a18      	ldr	r2, [pc, #96]	; (8005404 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d009      	beq.n	80053bc <HAL_TIM_PWM_Start_IT+0x1a8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a16      	ldr	r2, [pc, #88]	; (8005408 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_TIM_PWM_Start_IT+0x1a8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a15      	ldr	r2, [pc, #84]	; (800540c <HAL_TIM_PWM_Start_IT+0x1f8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d111      	bne.n	80053e0 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b06      	cmp	r3, #6
 80053cc:	d010      	beq.n	80053f0 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	e007      	b.n	80053f0 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40014000 	.word	0x40014000

08005410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d122      	bne.n	800546c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b02      	cmp	r3, #2
 8005432:	d11b      	bne.n	800546c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0202 	mvn.w	r2, #2
 800543c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fa81 	bl	800595a <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa73 	bl	8005946 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fa84 	bl	800596e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b04      	cmp	r3, #4
 8005478:	d122      	bne.n	80054c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b04      	cmp	r3, #4
 8005486:	d11b      	bne.n	80054c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0204 	mvn.w	r2, #4
 8005490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa57 	bl	800595a <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa49 	bl	8005946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa5a 	bl	800596e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d122      	bne.n	8005514 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d11b      	bne.n	8005514 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0208 	mvn.w	r2, #8
 80054e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2204      	movs	r2, #4
 80054ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa2d 	bl	800595a <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa1f 	bl	8005946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa30 	bl	800596e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b10      	cmp	r3, #16
 8005520:	d122      	bne.n	8005568 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b10      	cmp	r3, #16
 800552e:	d11b      	bne.n	8005568 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0210 	mvn.w	r2, #16
 8005538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2208      	movs	r2, #8
 800553e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fa03 	bl	800595a <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f9f5 	bl	8005946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fa06 	bl	800596e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	d10e      	bne.n	8005594 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b01      	cmp	r3, #1
 8005582:	d107      	bne.n	8005594 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0201 	mvn.w	r2, #1
 800558c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9cf 	bl	8005932 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d10e      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ac:	2b80      	cmp	r3, #128	; 0x80
 80055ae:	d107      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fd30 	bl	8006020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d10e      	bne.n	80055ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d107      	bne.n	80055ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f9cb 	bl	8005982 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d10e      	bne.n	8005618 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b20      	cmp	r3, #32
 8005606:	d107      	bne.n	8005618 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0220 	mvn.w	r2, #32
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fcfa 	bl	800600c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800563a:	2302      	movs	r3, #2
 800563c:	e0ae      	b.n	800579c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b0c      	cmp	r3, #12
 800564a:	f200 809f 	bhi.w	800578c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800564e:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005689 	.word	0x08005689
 8005658:	0800578d 	.word	0x0800578d
 800565c:	0800578d 	.word	0x0800578d
 8005660:	0800578d 	.word	0x0800578d
 8005664:	080056c9 	.word	0x080056c9
 8005668:	0800578d 	.word	0x0800578d
 800566c:	0800578d 	.word	0x0800578d
 8005670:	0800578d 	.word	0x0800578d
 8005674:	0800570b 	.word	0x0800570b
 8005678:	0800578d 	.word	0x0800578d
 800567c:	0800578d 	.word	0x0800578d
 8005680:	0800578d 	.word	0x0800578d
 8005684:	0800574b 	.word	0x0800574b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fa02 	bl	8005a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0204 	bic.w	r2, r2, #4
 80056b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6999      	ldr	r1, [r3, #24]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	619a      	str	r2, [r3, #24]
      break;
 80056c6:	e064      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fa48 	bl	8005b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6999      	ldr	r1, [r3, #24]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	619a      	str	r2, [r3, #24]
      break;
 8005708:	e043      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fa93 	bl	8005c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0208 	orr.w	r2, r2, #8
 8005724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0204 	bic.w	r2, r2, #4
 8005734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69d9      	ldr	r1, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	61da      	str	r2, [r3, #28]
      break;
 8005748:	e023      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fadd 	bl	8005d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69d9      	ldr	r1, [r3, #28]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	021a      	lsls	r2, r3, #8
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	61da      	str	r2, [r3, #28]
      break;
 800578a:	e002      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75fb      	strb	r3, [r7, #23]
      break;
 8005790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x1c>
 80057bc:	2302      	movs	r3, #2
 80057be:	e0b4      	b.n	800592a <HAL_TIM_ConfigClockSource+0x186>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f8:	d03e      	beq.n	8005878 <HAL_TIM_ConfigClockSource+0xd4>
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fe:	f200 8087 	bhi.w	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005806:	f000 8086 	beq.w	8005916 <HAL_TIM_ConfigClockSource+0x172>
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580e:	d87f      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005810:	2b70      	cmp	r3, #112	; 0x70
 8005812:	d01a      	beq.n	800584a <HAL_TIM_ConfigClockSource+0xa6>
 8005814:	2b70      	cmp	r3, #112	; 0x70
 8005816:	d87b      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b60      	cmp	r3, #96	; 0x60
 800581a:	d050      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x11a>
 800581c:	2b60      	cmp	r3, #96	; 0x60
 800581e:	d877      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b50      	cmp	r3, #80	; 0x50
 8005822:	d03c      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xfa>
 8005824:	2b50      	cmp	r3, #80	; 0x50
 8005826:	d873      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d058      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x13a>
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d86f      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d064      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x15a>
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d86b      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b20      	cmp	r3, #32
 800583a:	d060      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x15a>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d867      	bhi.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d05c      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x15a>
 8005844:	2b10      	cmp	r3, #16
 8005846:	d05a      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x15a>
 8005848:	e062      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6899      	ldr	r1, [r3, #8]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f000 fb23 	bl	8005ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800586c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	609a      	str	r2, [r3, #8]
      break;
 8005876:	e04f      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6899      	ldr	r1, [r3, #8]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f000 fb0c 	bl	8005ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800589a:	609a      	str	r2, [r3, #8]
      break;
 800589c:	e03c      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 fa80 	bl	8005db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2150      	movs	r1, #80	; 0x50
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fad9 	bl	8005e6e <TIM_ITRx_SetConfig>
      break;
 80058bc:	e02c      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 fa9f 	bl	8005e0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2160      	movs	r1, #96	; 0x60
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fac9 	bl	8005e6e <TIM_ITRx_SetConfig>
      break;
 80058dc:	e01c      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6859      	ldr	r1, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f000 fa60 	bl	8005db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2140      	movs	r1, #64	; 0x40
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fab9 	bl	8005e6e <TIM_ITRx_SetConfig>
      break;
 80058fc:	e00c      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	4610      	mov	r0, r2
 800590a:	f000 fab0 	bl	8005e6e <TIM_ITRx_SetConfig>
      break;
 800590e:	e003      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      break;
 8005914:	e000      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a34      	ldr	r2, [pc, #208]	; (8005a7c <TIM_Base_SetConfig+0xe4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00f      	beq.n	80059d0 <TIM_Base_SetConfig+0x38>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d00b      	beq.n	80059d0 <TIM_Base_SetConfig+0x38>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a31      	ldr	r2, [pc, #196]	; (8005a80 <TIM_Base_SetConfig+0xe8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_Base_SetConfig+0x38>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a30      	ldr	r2, [pc, #192]	; (8005a84 <TIM_Base_SetConfig+0xec>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_Base_SetConfig+0x38>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a2f      	ldr	r2, [pc, #188]	; (8005a88 <TIM_Base_SetConfig+0xf0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d108      	bne.n	80059e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a25      	ldr	r2, [pc, #148]	; (8005a7c <TIM_Base_SetConfig+0xe4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01b      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f0:	d017      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <TIM_Base_SetConfig+0xe8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a21      	ldr	r2, [pc, #132]	; (8005a84 <TIM_Base_SetConfig+0xec>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00f      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a20      	ldr	r2, [pc, #128]	; (8005a88 <TIM_Base_SetConfig+0xf0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <TIM_Base_SetConfig+0xf4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <TIM_Base_SetConfig+0xf8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_Base_SetConfig+0x8a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <TIM_Base_SetConfig+0xfc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d108      	bne.n	8005a34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a08      	ldr	r2, [pc, #32]	; (8005a7c <TIM_Base_SetConfig+0xe4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800

08005a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 0302 	bic.w	r3, r3, #2
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <TIM_OC1_SetConfig+0xc8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10c      	bne.n	8005b0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0308 	bic.w	r3, r3, #8
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 0304 	bic.w	r3, r3, #4
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <TIM_OC1_SetConfig+0xc8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d111      	bne.n	8005b3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	621a      	str	r2, [r3, #32]
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	40010000 	.word	0x40010000

08005b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f023 0210 	bic.w	r2, r3, #16
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0320 	bic.w	r3, r3, #32
 8005bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <TIM_OC2_SetConfig+0xd4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10d      	bne.n	8005be0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <TIM_OC2_SetConfig+0xd4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d113      	bne.n	8005c10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40010000 	.word	0x40010000

08005c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <TIM_OC3_SetConfig+0xd0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10d      	bne.n	8005cb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <TIM_OC3_SetConfig+0xd0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d113      	bne.n	8005ce6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40010000 	.word	0x40010000

08005d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	031b      	lsls	r3, r3, #12
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a10      	ldr	r2, [pc, #64]	; (8005dac <TIM_OC4_SetConfig+0x9c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d109      	bne.n	8005d84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40010000 	.word	0x40010000

08005db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0201 	bic.w	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f023 030a 	bic.w	r3, r3, #10
 8005dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b087      	sub	sp, #28
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0210 	bic.w	r2, r3, #16
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	031b      	lsls	r3, r3, #12
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f043 0307 	orr.w	r3, r3, #7
 8005e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	609a      	str	r2, [r3, #8]
}
 8005e98:	bf00      	nop
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	021a      	lsls	r2, r3, #8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	609a      	str	r2, [r3, #8]
}
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a1a      	ldr	r2, [r3, #32]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	43db      	mvns	r3, r3
 8005f06:	401a      	ands	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e050      	b.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1c      	ldr	r2, [pc, #112]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f94:	d013      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a18      	ldr	r2, [pc, #96]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a15      	ldr	r2, [pc, #84]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a13      	ldr	r2, [pc, #76]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40014000 	.word	0x40014000

0800600c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e03f      	b.n	80060c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fc fc08 	bl	8002870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2224      	movs	r2, #36	; 0x24
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fde9 	bl	8006c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800608c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800609c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b08a      	sub	sp, #40	; 0x28
 80060d2:	af02      	add	r7, sp, #8
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	603b      	str	r3, [r7, #0]
 80060da:	4613      	mov	r3, r2
 80060dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d17c      	bne.n	80061e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <HAL_UART_Transmit+0x2c>
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e075      	b.n	80061ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_UART_Transmit+0x3e>
 8006108:	2302      	movs	r3, #2
 800610a:	e06e      	b.n	80061ea <HAL_UART_Transmit+0x11c>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2221      	movs	r2, #33	; 0x21
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006122:	f7fc fccb 	bl	8002abc <HAL_GetTick>
 8006126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	88fa      	ldrh	r2, [r7, #6]
 8006132:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613c:	d108      	bne.n	8006150 <HAL_UART_Transmit+0x82>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	e003      	b.n	8006158 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006160:	e02a      	b.n	80061b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2200      	movs	r2, #0
 800616a:	2180      	movs	r1, #128	; 0x80
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fb29 	bl	80067c4 <UART_WaitOnFlagUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e036      	b.n	80061ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006190:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	3302      	adds	r3, #2
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e007      	b.n	80061aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1cf      	bne.n	8006162 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2200      	movs	r2, #0
 80061ca:	2140      	movs	r1, #64	; 0x40
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 faf9 	bl	80067c4 <UART_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e006      	b.n	80061ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e000      	b.n	80061ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80061e8:	2302      	movs	r3, #2
  }
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b20      	cmp	r3, #32
 800620a:	d11d      	bne.n	8006248 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_UART_Receive_IT+0x26>
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e016      	b.n	800624a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_UART_Receive_IT+0x38>
 8006226:	2302      	movs	r3, #2
 8006228:	e00f      	b.n	800624a <HAL_UART_Receive_IT+0x58>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	461a      	mov	r2, r3
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fb2e 	bl	80068a0 <UART_Start_Receive_IT>
 8006244:	4603      	mov	r3, r0
 8006246:	e000      	b.n	800624a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b0ba      	sub	sp, #232	; 0xe8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800627a:	2300      	movs	r3, #0
 800627c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10f      	bne.n	80062ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <HAL_UART_IRQHandler+0x66>
 80062a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fc11 	bl	8006ada <UART_Receive_IT>
      return;
 80062b8:	e256      	b.n	8006768 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80de 	beq.w	8006480 <HAL_UART_IRQHandler+0x22c>
 80062c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80d1 	beq.w	8006480 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <HAL_UART_IRQHandler+0xae>
 80062ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f043 0201 	orr.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <HAL_UART_IRQHandler+0xd2>
 800630e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f043 0202 	orr.w	r2, r3, #2
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <HAL_UART_IRQHandler+0xf6>
 8006332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f043 0204 	orr.w	r2, r3, #4
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800634a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d011      	beq.n	800637a <HAL_UART_IRQHandler+0x126>
 8006356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d105      	bne.n	800636e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f043 0208 	orr.w	r2, r3, #8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 81ed 	beq.w	800675e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <HAL_UART_IRQHandler+0x14e>
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fb9c 	bl	8006ada <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <HAL_UART_IRQHandler+0x17a>
 80063c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04f      	beq.n	800646e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 faa4 	bl	800691c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d141      	bne.n	8006466 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3314      	adds	r3, #20
 80063e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3314      	adds	r3, #20
 800640a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800640e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800641a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1d9      	bne.n	80063e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	2b00      	cmp	r3, #0
 8006434:	d013      	beq.n	800645e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	4a7d      	ldr	r2, [pc, #500]	; (8006630 <HAL_UART_IRQHandler+0x3dc>)
 800643c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	4618      	mov	r0, r3
 8006444:	f7fc fceb 	bl	8002e1e <HAL_DMA_Abort_IT>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d016      	beq.n	800647c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	e00e      	b.n	800647c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f99a 	bl	8006798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e00a      	b.n	800647c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f996 	bl	8006798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	e006      	b.n	800647c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f992 	bl	8006798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800647a:	e170      	b.n	800675e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647c:	bf00      	nop
    return;
 800647e:	e16e      	b.n	800675e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	2b01      	cmp	r3, #1
 8006486:	f040 814a 	bne.w	800671e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8143 	beq.w	800671e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 813c 	beq.w	800671e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064a6:	2300      	movs	r3, #0
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c6:	2b40      	cmp	r3, #64	; 0x40
 80064c8:	f040 80b4 	bne.w	8006634 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8140 	beq.w	8006762 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ea:	429a      	cmp	r2, r3
 80064ec:	f080 8139 	bcs.w	8006762 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006502:	f000 8088 	beq.w	8006616 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800651c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800653e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800654a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1d9      	bne.n	8006506 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3314      	adds	r3, #20
 8006558:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3314      	adds	r3, #20
 8006572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006576:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800657a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800657e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e1      	bne.n	8006552 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800659e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e3      	bne.n	800658e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e6:	f023 0310 	bic.w	r3, r3, #16
 80065ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80065fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e3      	bne.n	80065d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	4618      	mov	r0, r3
 8006612:	f7fc fb94 	bl	8002d3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800661e:	b29b      	uxth	r3, r3
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	b29b      	uxth	r3, r3
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f8c0 	bl	80067ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800662c:	e099      	b.n	8006762 <HAL_UART_IRQHandler+0x50e>
 800662e:	bf00      	nop
 8006630:	080069e3 	.word	0x080069e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800663c:	b29b      	uxth	r3, r3
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 808b 	beq.w	8006766 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8086 	beq.w	8006766 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	330c      	adds	r3, #12
 8006660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800667e:	647a      	str	r2, [r7, #68]	; 0x44
 8006680:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e3      	bne.n	800665a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3314      	adds	r3, #20
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	623b      	str	r3, [r7, #32]
   return(result);
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066b6:	633a      	str	r2, [r7, #48]	; 0x30
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e3      	bne.n	8006692 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	330c      	adds	r3, #12
 80066de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0310 	bic.w	r3, r3, #16
 80066ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066fc:	61fa      	str	r2, [r7, #28]
 80066fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	69b9      	ldr	r1, [r7, #24]
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	617b      	str	r3, [r7, #20]
   return(result);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e3      	bne.n	80066d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f848 	bl	80067ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800671c:	e023      	b.n	8006766 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <HAL_UART_IRQHandler+0x4ea>
 800672a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f967 	bl	8006a0a <UART_Transmit_IT>
    return;
 800673c:	e014      	b.n	8006768 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00e      	beq.n	8006768 <HAL_UART_IRQHandler+0x514>
 800674a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d008      	beq.n	8006768 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9a7 	bl	8006aaa <UART_EndTransmit_IT>
    return;
 800675c:	e004      	b.n	8006768 <HAL_UART_IRQHandler+0x514>
    return;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <HAL_UART_IRQHandler+0x514>
      return;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <HAL_UART_IRQHandler+0x514>
      return;
 8006766:	bf00      	nop
  }
}
 8006768:	37e8      	adds	r7, #232	; 0xe8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b090      	sub	sp, #64	; 0x40
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d4:	e050      	b.n	8006878 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d04c      	beq.n	8006878 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80067e4:	f7fc f96a 	bl	8002abc <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d241      	bcs.n	8006878 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006814:	637a      	str	r2, [r7, #52]	; 0x34
 8006816:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800681a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e5      	bne.n	80067f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3314      	adds	r3, #20
 800682e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	613b      	str	r3, [r7, #16]
   return(result);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006848:	623a      	str	r2, [r7, #32]
 800684a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	69f9      	ldr	r1, [r7, #28]
 800684e:	6a3a      	ldr	r2, [r7, #32]
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	61bb      	str	r3, [r7, #24]
   return(result);
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e5      	bne.n	8006828 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e00f      	b.n	8006898 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4013      	ands	r3, r2
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	bf0c      	ite	eq
 8006888:	2301      	moveq	r3, #1
 800688a:	2300      	movne	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	429a      	cmp	r2, r3
 8006894:	d09f      	beq.n	80067d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3740      	adds	r7, #64	; 0x40
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	88fa      	ldrh	r2, [r7, #6]
 80068b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	88fa      	ldrh	r2, [r7, #6]
 80068be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2222      	movs	r2, #34	; 0x22
 80068ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695a      	ldr	r2, [r3, #20]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0220 	orr.w	r2, r2, #32
 800690c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b095      	sub	sp, #84	; 0x54
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800693a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	330c      	adds	r3, #12
 8006942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006944:	643a      	str	r2, [r7, #64]	; 0x40
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800694a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e5      	bne.n	8006924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	61fb      	str	r3, [r7, #28]
   return(result);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f023 0301 	bic.w	r3, r3, #1
 800696e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006978:	62fa      	str	r2, [r7, #44]	; 0x2c
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800697e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e5      	bne.n	8006958 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006990:	2b01      	cmp	r3, #1
 8006992:	d119      	bne.n	80069c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f023 0310 	bic.w	r3, r3, #16
 80069aa:	647b      	str	r3, [r7, #68]	; 0x44
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069b4:	61ba      	str	r2, [r7, #24]
 80069b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6979      	ldr	r1, [r7, #20]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	613b      	str	r3, [r7, #16]
   return(result);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e5      	bne.n	8006994 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069d6:	bf00      	nop
 80069d8:	3754      	adds	r7, #84	; 0x54
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff fecb 	bl	8006798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b21      	cmp	r3, #33	; 0x21
 8006a1c:	d13e      	bne.n	8006a9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	d114      	bne.n	8006a52 <UART_Transmit_IT+0x48>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d110      	bne.n	8006a52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	621a      	str	r2, [r3, #32]
 8006a50:	e008      	b.n	8006a64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6211      	str	r1, [r2, #32]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4619      	mov	r1, r3
 8006a72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10f      	bne.n	8006a98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fe50 	bl	8006770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b08c      	sub	sp, #48	; 0x30
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b22      	cmp	r3, #34	; 0x22
 8006aec:	f040 80ab 	bne.w	8006c46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af8:	d117      	bne.n	8006b2a <UART_Receive_IT+0x50>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d113      	bne.n	8006b2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	1c9a      	adds	r2, r3, #2
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	629a      	str	r2, [r3, #40]	; 0x28
 8006b28:	e026      	b.n	8006b78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3c:	d007      	beq.n	8006b4e <UART_Receive_IT+0x74>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <UART_Receive_IT+0x82>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	e008      	b.n	8006b6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4619      	mov	r1, r3
 8006b86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d15a      	bne.n	8006c42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0220 	bic.w	r2, r2, #32
 8006b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006baa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d135      	bne.n	8006c38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	613b      	str	r3, [r7, #16]
   return(result);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f023 0310 	bic.w	r3, r3, #16
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf2:	623a      	str	r2, [r7, #32]
 8006bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	69f9      	ldr	r1, [r7, #28]
 8006bf8:	6a3a      	ldr	r2, [r7, #32]
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e5      	bne.n	8006bd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d10a      	bne.n	8006c2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff fdbb 	bl	80067ac <HAL_UARTEx_RxEventCallback>
 8006c36:	e002      	b.n	8006c3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff fda3 	bl	8006784 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e002      	b.n	8006c48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e000      	b.n	8006c48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c46:	2302      	movs	r3, #2
  }
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3730      	adds	r7, #48	; 0x30
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c54:	b0c0      	sub	sp, #256	; 0x100
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	68d9      	ldr	r1, [r3, #12]
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	ea40 0301 	orr.w	r3, r0, r1
 8006c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ca8:	f021 010c 	bic.w	r1, r1, #12
 8006cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	6999      	ldr	r1, [r3, #24]
 8006ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	ea40 0301 	orr.w	r3, r0, r1
 8006cd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b8f      	ldr	r3, [pc, #572]	; (8006f1c <UART_SetConfig+0x2cc>)
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d005      	beq.n	8006cf0 <UART_SetConfig+0xa0>
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b8d      	ldr	r3, [pc, #564]	; (8006f20 <UART_SetConfig+0x2d0>)
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d104      	bne.n	8006cfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cf0:	f7fe f916 	bl	8004f20 <HAL_RCC_GetPCLK2Freq>
 8006cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006cf8:	e003      	b.n	8006d02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cfa:	f7fe f8fd 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8006cfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0c:	f040 810c 	bne.w	8006f28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d22:	4622      	mov	r2, r4
 8006d24:	462b      	mov	r3, r5
 8006d26:	1891      	adds	r1, r2, r2
 8006d28:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d2a:	415b      	adcs	r3, r3
 8006d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d32:	4621      	mov	r1, r4
 8006d34:	eb12 0801 	adds.w	r8, r2, r1
 8006d38:	4629      	mov	r1, r5
 8006d3a:	eb43 0901 	adc.w	r9, r3, r1
 8006d3e:	f04f 0200 	mov.w	r2, #0
 8006d42:	f04f 0300 	mov.w	r3, #0
 8006d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d52:	4690      	mov	r8, r2
 8006d54:	4699      	mov	r9, r3
 8006d56:	4623      	mov	r3, r4
 8006d58:	eb18 0303 	adds.w	r3, r8, r3
 8006d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d60:	462b      	mov	r3, r5
 8006d62:	eb49 0303 	adc.w	r3, r9, r3
 8006d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d7e:	460b      	mov	r3, r1
 8006d80:	18db      	adds	r3, r3, r3
 8006d82:	653b      	str	r3, [r7, #80]	; 0x50
 8006d84:	4613      	mov	r3, r2
 8006d86:	eb42 0303 	adc.w	r3, r2, r3
 8006d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d94:	f7f9 ff24 	bl	8000be0 <__aeabi_uldivmod>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4b61      	ldr	r3, [pc, #388]	; (8006f24 <UART_SetConfig+0x2d4>)
 8006d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	011c      	lsls	r4, r3, #4
 8006da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006db0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006db4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	1891      	adds	r1, r2, r2
 8006dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006dc0:	415b      	adcs	r3, r3
 8006dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dc8:	4641      	mov	r1, r8
 8006dca:	eb12 0a01 	adds.w	sl, r2, r1
 8006dce:	4649      	mov	r1, r9
 8006dd0:	eb43 0b01 	adc.w	fp, r3, r1
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006de0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006de8:	4692      	mov	sl, r2
 8006dea:	469b      	mov	fp, r3
 8006dec:	4643      	mov	r3, r8
 8006dee:	eb1a 0303 	adds.w	r3, sl, r3
 8006df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006df6:	464b      	mov	r3, r9
 8006df8:	eb4b 0303 	adc.w	r3, fp, r3
 8006dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e14:	460b      	mov	r3, r1
 8006e16:	18db      	adds	r3, r3, r3
 8006e18:	643b      	str	r3, [r7, #64]	; 0x40
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	eb42 0303 	adc.w	r3, r2, r3
 8006e20:	647b      	str	r3, [r7, #68]	; 0x44
 8006e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e2a:	f7f9 fed9 	bl	8000be0 <__aeabi_uldivmod>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4611      	mov	r1, r2
 8006e34:	4b3b      	ldr	r3, [pc, #236]	; (8006f24 <UART_SetConfig+0x2d4>)
 8006e36:	fba3 2301 	umull	r2, r3, r3, r1
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	2264      	movs	r2, #100	; 0x64
 8006e3e:	fb02 f303 	mul.w	r3, r2, r3
 8006e42:	1acb      	subs	r3, r1, r3
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e4a:	4b36      	ldr	r3, [pc, #216]	; (8006f24 <UART_SetConfig+0x2d4>)
 8006e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e50:	095b      	lsrs	r3, r3, #5
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e58:	441c      	add	r4, r3
 8006e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	464b      	mov	r3, r9
 8006e70:	1891      	adds	r1, r2, r2
 8006e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e74:	415b      	adcs	r3, r3
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e7c:	4641      	mov	r1, r8
 8006e7e:	1851      	adds	r1, r2, r1
 8006e80:	6339      	str	r1, [r7, #48]	; 0x30
 8006e82:	4649      	mov	r1, r9
 8006e84:	414b      	adcs	r3, r1
 8006e86:	637b      	str	r3, [r7, #52]	; 0x34
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e94:	4659      	mov	r1, fp
 8006e96:	00cb      	lsls	r3, r1, #3
 8006e98:	4651      	mov	r1, sl
 8006e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e9e:	4651      	mov	r1, sl
 8006ea0:	00ca      	lsls	r2, r1, #3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	189b      	adds	r3, r3, r2
 8006eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eb0:	464b      	mov	r3, r9
 8006eb2:	460a      	mov	r2, r1
 8006eb4:	eb42 0303 	adc.w	r3, r2, r3
 8006eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ec8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006ecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	18db      	adds	r3, r3, r3
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	eb42 0303 	adc.w	r3, r2, r3
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ee6:	f7f9 fe7b 	bl	8000be0 <__aeabi_uldivmod>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <UART_SetConfig+0x2d4>)
 8006ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	2164      	movs	r1, #100	; 0x64
 8006ef8:	fb01 f303 	mul.w	r3, r1, r3
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	3332      	adds	r3, #50	; 0x32
 8006f02:	4a08      	ldr	r2, [pc, #32]	; (8006f24 <UART_SetConfig+0x2d4>)
 8006f04:	fba2 2303 	umull	r2, r3, r2, r3
 8006f08:	095b      	lsrs	r3, r3, #5
 8006f0a:	f003 0207 	and.w	r2, r3, #7
 8006f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4422      	add	r2, r4
 8006f16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f18:	e105      	b.n	8007126 <UART_SetConfig+0x4d6>
 8006f1a:	bf00      	nop
 8006f1c:	40011000 	.word	0x40011000
 8006f20:	40011400 	.word	0x40011400
 8006f24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f3a:	4642      	mov	r2, r8
 8006f3c:	464b      	mov	r3, r9
 8006f3e:	1891      	adds	r1, r2, r2
 8006f40:	6239      	str	r1, [r7, #32]
 8006f42:	415b      	adcs	r3, r3
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
 8006f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	1854      	adds	r4, r2, r1
 8006f4e:	4649      	mov	r1, r9
 8006f50:	eb43 0501 	adc.w	r5, r3, r1
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	00eb      	lsls	r3, r5, #3
 8006f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f62:	00e2      	lsls	r2, r4, #3
 8006f64:	4614      	mov	r4, r2
 8006f66:	461d      	mov	r5, r3
 8006f68:	4643      	mov	r3, r8
 8006f6a:	18e3      	adds	r3, r4, r3
 8006f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f70:	464b      	mov	r3, r9
 8006f72:	eb45 0303 	adc.w	r3, r5, r3
 8006f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f96:	4629      	mov	r1, r5
 8006f98:	008b      	lsls	r3, r1, #2
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	008a      	lsls	r2, r1, #2
 8006fa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006fa8:	f7f9 fe1a 	bl	8000be0 <__aeabi_uldivmod>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4b60      	ldr	r3, [pc, #384]	; (8007134 <UART_SetConfig+0x4e4>)
 8006fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	011c      	lsls	r4, r3, #4
 8006fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	1891      	adds	r1, r2, r2
 8006fd2:	61b9      	str	r1, [r7, #24]
 8006fd4:	415b      	adcs	r3, r3
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fdc:	4641      	mov	r1, r8
 8006fde:	1851      	adds	r1, r2, r1
 8006fe0:	6139      	str	r1, [r7, #16]
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	414b      	adcs	r3, r1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	00cb      	lsls	r3, r1, #3
 8006ff8:	4651      	mov	r1, sl
 8006ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ffe:	4651      	mov	r1, sl
 8007000:	00ca      	lsls	r2, r1, #3
 8007002:	4610      	mov	r0, r2
 8007004:	4619      	mov	r1, r3
 8007006:	4603      	mov	r3, r0
 8007008:	4642      	mov	r2, r8
 800700a:	189b      	adds	r3, r3, r2
 800700c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007010:	464b      	mov	r3, r9
 8007012:	460a      	mov	r2, r1
 8007014:	eb42 0303 	adc.w	r3, r2, r3
 8007018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800701c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	67bb      	str	r3, [r7, #120]	; 0x78
 8007026:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007034:	4649      	mov	r1, r9
 8007036:	008b      	lsls	r3, r1, #2
 8007038:	4641      	mov	r1, r8
 800703a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800703e:	4641      	mov	r1, r8
 8007040:	008a      	lsls	r2, r1, #2
 8007042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007046:	f7f9 fdcb 	bl	8000be0 <__aeabi_uldivmod>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4b39      	ldr	r3, [pc, #228]	; (8007134 <UART_SetConfig+0x4e4>)
 8007050:	fba3 1302 	umull	r1, r3, r3, r2
 8007054:	095b      	lsrs	r3, r3, #5
 8007056:	2164      	movs	r1, #100	; 0x64
 8007058:	fb01 f303 	mul.w	r3, r1, r3
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	3332      	adds	r3, #50	; 0x32
 8007062:	4a34      	ldr	r2, [pc, #208]	; (8007134 <UART_SetConfig+0x4e4>)
 8007064:	fba2 2303 	umull	r2, r3, r2, r3
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800706e:	441c      	add	r4, r3
 8007070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007074:	2200      	movs	r2, #0
 8007076:	673b      	str	r3, [r7, #112]	; 0x70
 8007078:	677a      	str	r2, [r7, #116]	; 0x74
 800707a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800707e:	4642      	mov	r2, r8
 8007080:	464b      	mov	r3, r9
 8007082:	1891      	adds	r1, r2, r2
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	415b      	adcs	r3, r3
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800708e:	4641      	mov	r1, r8
 8007090:	1851      	adds	r1, r2, r1
 8007092:	6039      	str	r1, [r7, #0]
 8007094:	4649      	mov	r1, r9
 8007096:	414b      	adcs	r3, r1
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070a6:	4659      	mov	r1, fp
 80070a8:	00cb      	lsls	r3, r1, #3
 80070aa:	4651      	mov	r1, sl
 80070ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070b0:	4651      	mov	r1, sl
 80070b2:	00ca      	lsls	r2, r1, #3
 80070b4:	4610      	mov	r0, r2
 80070b6:	4619      	mov	r1, r3
 80070b8:	4603      	mov	r3, r0
 80070ba:	4642      	mov	r2, r8
 80070bc:	189b      	adds	r3, r3, r2
 80070be:	66bb      	str	r3, [r7, #104]	; 0x68
 80070c0:	464b      	mov	r3, r9
 80070c2:	460a      	mov	r2, r1
 80070c4:	eb42 0303 	adc.w	r3, r2, r3
 80070c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	663b      	str	r3, [r7, #96]	; 0x60
 80070d4:	667a      	str	r2, [r7, #100]	; 0x64
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070e2:	4649      	mov	r1, r9
 80070e4:	008b      	lsls	r3, r1, #2
 80070e6:	4641      	mov	r1, r8
 80070e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070ec:	4641      	mov	r1, r8
 80070ee:	008a      	lsls	r2, r1, #2
 80070f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070f4:	f7f9 fd74 	bl	8000be0 <__aeabi_uldivmod>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <UART_SetConfig+0x4e4>)
 80070fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	2164      	movs	r1, #100	; 0x64
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	3332      	adds	r3, #50	; 0x32
 8007110:	4a08      	ldr	r2, [pc, #32]	; (8007134 <UART_SetConfig+0x4e4>)
 8007112:	fba2 2303 	umull	r2, r3, r2, r3
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	f003 020f 	and.w	r2, r3, #15
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4422      	add	r2, r4
 8007124:	609a      	str	r2, [r3, #8]
}
 8007126:	bf00      	nop
 8007128:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800712c:	46bd      	mov	sp, r7
 800712e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007132:	bf00      	nop
 8007134:	51eb851f 	.word	0x51eb851f

08007138 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007138:	b084      	sub	sp, #16
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	f107 001c 	add.w	r0, r7, #28
 8007146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	2b01      	cmp	r3, #1
 800714e:	d122      	bne.n	8007196 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717a:	2b01      	cmp	r3, #1
 800717c:	d105      	bne.n	800718a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fbee 	bl	800896c <USB_CoreReset>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]
 8007194:	e01a      	b.n	80071cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 fbe2 	bl	800896c <USB_CoreReset>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
 80071be:	e005      	b.n	80071cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d10b      	bne.n	80071ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f043 0206 	orr.w	r2, r3, #6
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f043 0220 	orr.w	r2, r3, #32
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071f6:	b004      	add	sp, #16
 80071f8:	4770      	bx	lr
	...

080071fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	4613      	mov	r3, r2
 8007208:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d165      	bne.n	80072dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4a41      	ldr	r2, [pc, #260]	; (8007318 <USB_SetTurnaroundTime+0x11c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d906      	bls.n	8007226 <USB_SetTurnaroundTime+0x2a>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4a40      	ldr	r2, [pc, #256]	; (800731c <USB_SetTurnaroundTime+0x120>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d202      	bcs.n	8007226 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007220:	230f      	movs	r3, #15
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	e062      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	4a3c      	ldr	r2, [pc, #240]	; (800731c <USB_SetTurnaroundTime+0x120>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d306      	bcc.n	800723c <USB_SetTurnaroundTime+0x40>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	4a3b      	ldr	r2, [pc, #236]	; (8007320 <USB_SetTurnaroundTime+0x124>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d202      	bcs.n	800723c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007236:	230e      	movs	r3, #14
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	e057      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4a38      	ldr	r2, [pc, #224]	; (8007320 <USB_SetTurnaroundTime+0x124>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d306      	bcc.n	8007252 <USB_SetTurnaroundTime+0x56>
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4a37      	ldr	r2, [pc, #220]	; (8007324 <USB_SetTurnaroundTime+0x128>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d202      	bcs.n	8007252 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800724c:	230d      	movs	r3, #13
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	e04c      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	4a33      	ldr	r2, [pc, #204]	; (8007324 <USB_SetTurnaroundTime+0x128>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d306      	bcc.n	8007268 <USB_SetTurnaroundTime+0x6c>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	4a32      	ldr	r2, [pc, #200]	; (8007328 <USB_SetTurnaroundTime+0x12c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d802      	bhi.n	8007268 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007262:	230c      	movs	r3, #12
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e041      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4a2f      	ldr	r2, [pc, #188]	; (8007328 <USB_SetTurnaroundTime+0x12c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d906      	bls.n	800727e <USB_SetTurnaroundTime+0x82>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4a2e      	ldr	r2, [pc, #184]	; (800732c <USB_SetTurnaroundTime+0x130>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d802      	bhi.n	800727e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007278:	230b      	movs	r3, #11
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	e036      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4a2a      	ldr	r2, [pc, #168]	; (800732c <USB_SetTurnaroundTime+0x130>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d906      	bls.n	8007294 <USB_SetTurnaroundTime+0x98>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4a29      	ldr	r2, [pc, #164]	; (8007330 <USB_SetTurnaroundTime+0x134>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d802      	bhi.n	8007294 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800728e:	230a      	movs	r3, #10
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	e02b      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4a26      	ldr	r2, [pc, #152]	; (8007330 <USB_SetTurnaroundTime+0x134>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d906      	bls.n	80072aa <USB_SetTurnaroundTime+0xae>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4a25      	ldr	r2, [pc, #148]	; (8007334 <USB_SetTurnaroundTime+0x138>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d202      	bcs.n	80072aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072a4:	2309      	movs	r3, #9
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	e020      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4a21      	ldr	r2, [pc, #132]	; (8007334 <USB_SetTurnaroundTime+0x138>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d306      	bcc.n	80072c0 <USB_SetTurnaroundTime+0xc4>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	4a20      	ldr	r2, [pc, #128]	; (8007338 <USB_SetTurnaroundTime+0x13c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d802      	bhi.n	80072c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80072ba:	2308      	movs	r3, #8
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	e015      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <USB_SetTurnaroundTime+0x13c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d906      	bls.n	80072d6 <USB_SetTurnaroundTime+0xda>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	4a1c      	ldr	r2, [pc, #112]	; (800733c <USB_SetTurnaroundTime+0x140>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d202      	bcs.n	80072d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80072d0:	2307      	movs	r3, #7
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	e00a      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80072d6:	2306      	movs	r3, #6
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	e007      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80072dc:	79fb      	ldrb	r3, [r7, #7]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80072e2:	2309      	movs	r3, #9
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	e001      	b.n	80072ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80072e8:	2309      	movs	r3, #9
 80072ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	029b      	lsls	r3, r3, #10
 8007300:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007304:	431a      	orrs	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	00d8acbf 	.word	0x00d8acbf
 800731c:	00e4e1c0 	.word	0x00e4e1c0
 8007320:	00f42400 	.word	0x00f42400
 8007324:	01067380 	.word	0x01067380
 8007328:	011a499f 	.word	0x011a499f
 800732c:	01312cff 	.word	0x01312cff
 8007330:	014ca43f 	.word	0x014ca43f
 8007334:	016e3600 	.word	0x016e3600
 8007338:	01a6ab1f 	.word	0x01a6ab1f
 800733c:	01e84800 	.word	0x01e84800

08007340 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f043 0201 	orr.w	r2, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f023 0201 	bic.w	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d115      	bne.n	80073d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073b2:	2001      	movs	r0, #1
 80073b4:	f7fb fb8e 	bl	8002ad4 <HAL_Delay>
      ms++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f001 fa45 	bl	800884e <USB_GetMode>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d01e      	beq.n	8007408 <USB_SetCurrentMode+0x84>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b31      	cmp	r3, #49	; 0x31
 80073ce:	d9f0      	bls.n	80073b2 <USB_SetCurrentMode+0x2e>
 80073d0:	e01a      	b.n	8007408 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d115      	bne.n	8007404 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073e4:	2001      	movs	r0, #1
 80073e6:	f7fb fb75 	bl	8002ad4 <HAL_Delay>
      ms++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fa2c 	bl	800884e <USB_GetMode>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <USB_SetCurrentMode+0x84>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b31      	cmp	r3, #49	; 0x31
 8007400:	d9f0      	bls.n	80073e4 <USB_SetCurrentMode+0x60>
 8007402:	e001      	b.n	8007408 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e005      	b.n	8007414 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b32      	cmp	r3, #50	; 0x32
 800740c:	d101      	bne.n	8007412 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800741c:	b084      	sub	sp, #16
 800741e:	b580      	push	{r7, lr}
 8007420:	b086      	sub	sp, #24
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800742a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	e009      	b.n	8007450 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	3340      	adds	r3, #64	; 0x40
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	2200      	movs	r2, #0
 8007448:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3301      	adds	r3, #1
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	2b0e      	cmp	r3, #14
 8007454:	d9f2      	bls.n	800743c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11c      	bne.n	8007496 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800746a:	f043 0302 	orr.w	r3, r3, #2
 800746e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
 8007494:	e00b      	b.n	80074ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074b4:	461a      	mov	r2, r3
 80074b6:	2300      	movs	r3, #0
 80074b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c0:	4619      	mov	r1, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c8:	461a      	mov	r2, r3
 80074ca:	680b      	ldr	r3, [r1, #0]
 80074cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10c      	bne.n	80074ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d104      	bne.n	80074e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074da:	2100      	movs	r1, #0
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f965 	bl	80077ac <USB_SetDevSpeed>
 80074e2:	e008      	b.n	80074f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074e4:	2101      	movs	r1, #1
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f960 	bl	80077ac <USB_SetDevSpeed>
 80074ec:	e003      	b.n	80074f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074ee:	2103      	movs	r1, #3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f95b 	bl	80077ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074f6:	2110      	movs	r1, #16
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f8f3 	bl	80076e4 <USB_FlushTxFifo>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f91f 	bl	800774c <USB_FlushRxFifo>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751e:	461a      	mov	r2, r3
 8007520:	2300      	movs	r3, #0
 8007522:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752a:	461a      	mov	r2, r3
 800752c:	2300      	movs	r3, #0
 800752e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	461a      	mov	r2, r3
 8007538:	2300      	movs	r3, #0
 800753a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	e043      	b.n	80075ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007558:	d118      	bne.n	800758c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756c:	461a      	mov	r2, r3
 800756e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	e013      	b.n	800759e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007582:	461a      	mov	r2, r3
 8007584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	e008      	b.n	800759e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007598:	461a      	mov	r2, r3
 800759a:	2300      	movs	r3, #0
 800759c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075aa:	461a      	mov	r2, r3
 80075ac:	2300      	movs	r3, #0
 80075ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	461a      	mov	r2, r3
 80075be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	3301      	adds	r3, #1
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d3b7      	bcc.n	8007542 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	e043      	b.n	8007660 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ee:	d118      	bne.n	8007622 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007602:	461a      	mov	r2, r3
 8007604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e013      	b.n	8007634 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007618:	461a      	mov	r2, r3
 800761a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e008      	b.n	8007634 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	461a      	mov	r2, r3
 8007630:	2300      	movs	r3, #0
 8007632:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007640:	461a      	mov	r2, r3
 8007642:	2300      	movs	r3, #0
 8007644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007652:	461a      	mov	r2, r3
 8007654:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007658:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	3301      	adds	r3, #1
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	429a      	cmp	r2, r3
 8007666:	d3b7      	bcc.n	80075d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800767a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007688:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	f043 0210 	orr.w	r2, r3, #16
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <USB_DevInit+0x2c4>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d005      	beq.n	80076ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f043 0208 	orr.w	r2, r3, #8
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d107      	bne.n	80076d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076c8:	f043 0304 	orr.w	r3, r3, #4
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076dc:	b004      	add	sp, #16
 80076de:	4770      	bx	lr
 80076e0:	803c3800 	.word	0x803c3800

080076e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3301      	adds	r3, #1
 80076f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4a13      	ldr	r2, [pc, #76]	; (8007748 <USB_FlushTxFifo+0x64>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d901      	bls.n	8007704 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e01b      	b.n	800773c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	daf2      	bge.n	80076f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	019b      	lsls	r3, r3, #6
 8007714:	f043 0220 	orr.w	r2, r3, #32
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4a08      	ldr	r2, [pc, #32]	; (8007748 <USB_FlushTxFifo+0x64>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d901      	bls.n	800772e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e006      	b.n	800773c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b20      	cmp	r3, #32
 8007738:	d0f0      	beq.n	800771c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	00030d40 	.word	0x00030d40

0800774c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <USB_FlushRxFifo+0x5c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d901      	bls.n	800776a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e018      	b.n	800779c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	daf2      	bge.n	8007758 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2210      	movs	r2, #16
 800777a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3301      	adds	r3, #1
 8007780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <USB_FlushRxFifo+0x5c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d901      	bls.n	800778e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e006      	b.n	800779c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f003 0310 	and.w	r3, r3, #16
 8007796:	2b10      	cmp	r3, #16
 8007798:	d0f0      	beq.n	800777c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	00030d40 	.word	0x00030d40

080077ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	68f9      	ldr	r1, [r7, #12]
 80077c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077cc:	4313      	orrs	r3, r2
 80077ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077de:	b480      	push	{r7}
 80077e0:	b087      	sub	sp, #28
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0306 	and.w	r3, r3, #6
 80077f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d102      	bne.n	8007804 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]
 8007802:	e00a      	b.n	800781a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d002      	beq.n	8007810 <USB_GetDevSpeed+0x32>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b06      	cmp	r3, #6
 800780e:	d102      	bne.n	8007816 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007810:	2302      	movs	r3, #2
 8007812:	75fb      	strb	r3, [r7, #23]
 8007814:	e001      	b.n	800781a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007816:	230f      	movs	r3, #15
 8007818:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
}
 800781c:	4618      	mov	r0, r3
 800781e:	371c      	adds	r7, #28
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d13a      	bne.n	80078ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	2101      	movs	r1, #1
 8007856:	fa01 f303 	lsl.w	r3, r1, r3
 800785a:	b29b      	uxth	r3, r3
 800785c:	68f9      	ldr	r1, [r7, #12]
 800785e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007862:	4313      	orrs	r3, r2
 8007864:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d155      	bne.n	8007928 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	791b      	ldrb	r3, [r3, #4]
 8007896:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007898:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	059b      	lsls	r3, r3, #22
 800789e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078a0:	4313      	orrs	r3, r2
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e036      	b.n	8007928 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c0:	69da      	ldr	r2, [r3, #28]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	2101      	movs	r1, #1
 80078cc:	fa01 f303 	lsl.w	r3, r1, r3
 80078d0:	041b      	lsls	r3, r3, #16
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078d8:	4313      	orrs	r3, r2
 80078da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d11a      	bne.n	8007928 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	791b      	ldrb	r3, [r3, #4]
 800790c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800790e:	430b      	orrs	r3, r1
 8007910:	4313      	orrs	r3, r2
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007926:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	785b      	ldrb	r3, [r3, #1]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d161      	bne.n	8007a18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800796a:	d11f      	bne.n	80079ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	440a      	add	r2, r1
 8007982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007986:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800798a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	0151      	lsls	r1, r2, #5
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	440a      	add	r2, r1
 80079a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	f003 030f 	and.w	r3, r3, #15
 80079bc:	2101      	movs	r1, #1
 80079be:	fa01 f303 	lsl.w	r3, r1, r3
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	43db      	mvns	r3, r3
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079cc:	4013      	ands	r3, r2
 80079ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d6:	69da      	ldr	r2, [r3, #28]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	2101      	movs	r1, #1
 80079e2:	fa01 f303 	lsl.w	r3, r1, r3
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	43db      	mvns	r3, r3
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079f0:	4013      	ands	r3, r2
 80079f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	0159      	lsls	r1, r3, #5
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	440b      	add	r3, r1
 8007a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4b35      	ldr	r3, [pc, #212]	; (8007ae8 <USB_DeactivateEndpoint+0x1b0>)
 8007a12:	4013      	ands	r3, r2
 8007a14:	600b      	str	r3, [r1, #0]
 8007a16:	e060      	b.n	8007ada <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a2e:	d11f      	bne.n	8007a70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	2101      	movs	r1, #1
 8007a82:	fa01 f303 	lsl.w	r3, r1, r3
 8007a86:	041b      	lsls	r3, r3, #16
 8007a88:	43db      	mvns	r3, r3
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a90:	4013      	ands	r3, r2
 8007a92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aaa:	041b      	lsls	r3, r3, #16
 8007aac:	43db      	mvns	r3, r3
 8007aae:	68f9      	ldr	r1, [r7, #12]
 8007ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	0159      	lsls	r1, r3, #5
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	440b      	add	r3, r1
 8007ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <USB_DeactivateEndpoint+0x1b4>)
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	ec337800 	.word	0xec337800
 8007aec:	eff37800 	.word	0xeff37800

08007af0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08a      	sub	sp, #40	; 0x28
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	785b      	ldrb	r3, [r3, #1]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	f040 815c 	bne.w	8007dca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d132      	bne.n	8007b80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	0151      	lsls	r1, r2, #5
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	440a      	add	r2, r1
 8007b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b78:	0cdb      	lsrs	r3, r3, #19
 8007b7a:	04db      	lsls	r3, r3, #19
 8007b7c:	6113      	str	r3, [r2, #16]
 8007b7e:	e074      	b.n	8007c6a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9a:	0cdb      	lsrs	r3, r3, #19
 8007b9c:	04db      	lsls	r3, r3, #19
 8007b9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6999      	ldr	r1, [r3, #24]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	440b      	add	r3, r1
 8007bdc:	1e59      	subs	r1, r3, #1
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007be6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007be8:	4b9d      	ldr	r3, [pc, #628]	; (8007e60 <USB_EPStartXfer+0x370>)
 8007bea:	400b      	ands	r3, r1
 8007bec:	69b9      	ldr	r1, [r7, #24]
 8007bee:	0148      	lsls	r0, r1, #5
 8007bf0:	69f9      	ldr	r1, [r7, #28]
 8007bf2:	4401      	add	r1, r0
 8007bf4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c12:	69b9      	ldr	r1, [r7, #24]
 8007c14:	0148      	lsls	r0, r1, #5
 8007c16:	69f9      	ldr	r1, [r7, #28]
 8007c18:	4401      	add	r1, r0
 8007c1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	791b      	ldrb	r3, [r3, #4]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d11f      	bne.n	8007c6a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007c48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c68:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d14b      	bne.n	8007d08 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d009      	beq.n	8007c8c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c84:	461a      	mov	r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	791b      	ldrb	r3, [r3, #4]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d128      	bne.n	8007ce6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d110      	bne.n	8007cc6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	0151      	lsls	r1, r2, #5
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	440a      	add	r2, r1
 8007cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	e00f      	b.n	8007ce6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	0151      	lsls	r1, r2, #5
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	440a      	add	r2, r1
 8007cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	e133      	b.n	8007f70 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	0151      	lsls	r1, r2, #5
 8007d1a:	69fa      	ldr	r2, [r7, #28]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d26:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	791b      	ldrb	r3, [r3, #4]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d015      	beq.n	8007d5c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 811b 	beq.w	8007f70 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d50:	69f9      	ldr	r1, [r7, #28]
 8007d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d56:	4313      	orrs	r3, r2
 8007d58:	634b      	str	r3, [r1, #52]	; 0x34
 8007d5a:	e109      	b.n	8007f70 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d110      	bne.n	8007d8e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	e00f      	b.n	8007dae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	0151      	lsls	r1, r2, #5
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	440a      	add	r2, r1
 8007da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6919      	ldr	r1, [r3, #16]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	b298      	uxth	r0, r3
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fade 	bl	8008384 <USB_WritePacket>
 8007dc8:	e0d2      	b.n	8007f70 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	0151      	lsls	r1, r2, #5
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	440a      	add	r2, r1
 8007de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de4:	0cdb      	lsrs	r3, r3, #19
 8007de6:	04db      	lsls	r3, r3, #19
 8007de8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	0151      	lsls	r1, r2, #5
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	440a      	add	r2, r1
 8007e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d126      	bne.n	8007e64 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e2c:	69b9      	ldr	r1, [r7, #24]
 8007e2e:	0148      	lsls	r0, r1, #5
 8007e30:	69f9      	ldr	r1, [r7, #28]
 8007e32:	4401      	add	r1, r0
 8007e34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e5a:	6113      	str	r3, [r2, #16]
 8007e5c:	e03a      	b.n	8007ed4 <USB_EPStartXfer+0x3e4>
 8007e5e:	bf00      	nop
 8007e60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	699a      	ldr	r2, [r3, #24]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	1e5a      	subs	r2, r3, #1
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e78:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	8afa      	ldrh	r2, [r7, #22]
 8007e80:	fb03 f202 	mul.w	r2, r3, r2
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	8afb      	ldrh	r3, [r7, #22]
 8007e98:	04d9      	lsls	r1, r3, #19
 8007e9a:	4b38      	ldr	r3, [pc, #224]	; (8007f7c <USB_EPStartXfer+0x48c>)
 8007e9c:	400b      	ands	r3, r1
 8007e9e:	69b9      	ldr	r1, [r7, #24]
 8007ea0:	0148      	lsls	r0, r1, #5
 8007ea2:	69f9      	ldr	r1, [r7, #28]
 8007ea4:	4401      	add	r1, r0
 8007ea6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ec4:	69b9      	ldr	r1, [r7, #24]
 8007ec6:	0148      	lsls	r0, r1, #5
 8007ec8:	69f9      	ldr	r1, [r7, #28]
 8007eca:	4401      	add	r1, r0
 8007ecc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d10d      	bne.n	8007ef6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d009      	beq.n	8007ef6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	6919      	ldr	r1, [r3, #16]
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	460a      	mov	r2, r1
 8007ef4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	791b      	ldrb	r3, [r3, #4]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d128      	bne.n	8007f50 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d110      	bne.n	8007f30 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	0151      	lsls	r1, r2, #5
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	440a      	add	r2, r1
 8007f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	e00f      	b.n	8007f50 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	0151      	lsls	r1, r2, #5
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	440a      	add	r2, r1
 8007f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3720      	adds	r7, #32
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	1ff80000 	.word	0x1ff80000

08007f80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	f040 80ce 	bne.w	800813e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d132      	bne.n	8008010 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	0151      	lsls	r1, r2, #5
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	440a      	add	r2, r1
 8007fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	0151      	lsls	r1, r2, #5
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	440a      	add	r2, r1
 8007fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	0151      	lsls	r1, r2, #5
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	440a      	add	r2, r1
 8008004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008008:	0cdb      	lsrs	r3, r3, #19
 800800a:	04db      	lsls	r3, r3, #19
 800800c:	6113      	str	r3, [r2, #16]
 800800e:	e04e      	b.n	80080ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	0151      	lsls	r1, r2, #5
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	440a      	add	r2, r1
 8008026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802a:	0cdb      	lsrs	r3, r3, #19
 800802c:	04db      	lsls	r3, r3, #19
 800802e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	0151      	lsls	r1, r2, #5
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	440a      	add	r2, r1
 8008046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800804a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800804e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008052:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	699a      	ldr	r2, [r3, #24]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	429a      	cmp	r2, r3
 800805e:	d903      	bls.n	8008068 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	0151      	lsls	r1, r2, #5
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	440a      	add	r2, r1
 800807e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008086:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800809e:	6939      	ldr	r1, [r7, #16]
 80080a0:	0148      	lsls	r0, r1, #5
 80080a2:	6979      	ldr	r1, [r7, #20]
 80080a4:	4401      	add	r1, r0
 80080a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080aa:	4313      	orrs	r3, r2
 80080ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d11e      	bne.n	80080f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d009      	beq.n	80080d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c8:	461a      	mov	r2, r3
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	e097      	b.n	8008222 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800810c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008110:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 8083 	beq.w	8008222 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f003 030f 	and.w	r3, r3, #15
 800812c:	2101      	movs	r1, #1
 800812e:	fa01 f303 	lsl.w	r3, r1, r3
 8008132:	6979      	ldr	r1, [r7, #20]
 8008134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008138:	4313      	orrs	r3, r2
 800813a:	634b      	str	r3, [r1, #52]	; 0x34
 800813c:	e071      	b.n	8008222 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	440a      	add	r2, r1
 8008154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008158:	0cdb      	lsrs	r3, r3, #19
 800815a:	04db      	lsls	r3, r3, #19
 800815c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008178:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800817c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008180:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d0:	6939      	ldr	r1, [r7, #16]
 80081d2:	0148      	lsls	r0, r1, #5
 80081d4:	6979      	ldr	r1, [r7, #20]
 80081d6:	4401      	add	r1, r0
 80081d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081dc:	4313      	orrs	r3, r2
 80081de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d10d      	bne.n	8008202 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	6919      	ldr	r1, [r3, #16]
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fe:	460a      	mov	r2, r1
 8008200:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	440a      	add	r2, r1
 8008218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800821c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008220:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	371c      	adds	r7, #28
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d14a      	bne.n	80082e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008266:	f040 8086 	bne.w	8008376 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	7812      	ldrb	r2, [r2, #0]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008288:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800828c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	7812      	ldrb	r2, [r2, #0]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3301      	adds	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80082be:	4293      	cmp	r3, r2
 80082c0:	d902      	bls.n	80082c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	75fb      	strb	r3, [r7, #23]
          break;
 80082c6:	e056      	b.n	8008376 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082e0:	d0e7      	beq.n	80082b2 <USB_EPStopXfer+0x82>
 80082e2:	e048      	b.n	8008376 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082fc:	d13b      	bne.n	8008376 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	7812      	ldrb	r2, [r2, #0]
 8008312:	0151      	lsls	r1, r2, #5
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	440a      	add	r2, r1
 8008318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800831c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008320:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	7812      	ldrb	r2, [r2, #0]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008340:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008344:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3301      	adds	r3, #1
 800834a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008352:	4293      	cmp	r3, r2
 8008354:	d902      	bls.n	800835c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	75fb      	strb	r3, [r7, #23]
          break;
 800835a:	e00c      	b.n	8008376 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008374:	d0e7      	beq.n	8008346 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
}
 8008378:	4618      	mov	r0, r3
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008384:	b480      	push	{r7}
 8008386:	b089      	sub	sp, #36	; 0x24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4611      	mov	r1, r2
 8008390:	461a      	mov	r2, r3
 8008392:	460b      	mov	r3, r1
 8008394:	71fb      	strb	r3, [r7, #7]
 8008396:	4613      	mov	r3, r2
 8008398:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80083a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d123      	bne.n	80083f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083aa:	88bb      	ldrh	r3, [r7, #4]
 80083ac:	3303      	adds	r3, #3
 80083ae:	089b      	lsrs	r3, r3, #2
 80083b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083b2:	2300      	movs	r3, #0
 80083b4:	61bb      	str	r3, [r7, #24]
 80083b6:	e018      	b.n	80083ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	031a      	lsls	r2, r3, #12
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c4:	461a      	mov	r2, r3
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	3301      	adds	r3, #1
 80083d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	3301      	adds	r3, #1
 80083d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	3301      	adds	r3, #1
 80083dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	3301      	adds	r3, #1
 80083e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	3301      	adds	r3, #1
 80083e8:	61bb      	str	r3, [r7, #24]
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d3e2      	bcc.n	80083b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3724      	adds	r7, #36	; 0x24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008400:	b480      	push	{r7}
 8008402:	b08b      	sub	sp, #44	; 0x2c
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	4613      	mov	r3, r2
 800840c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008416:	88fb      	ldrh	r3, [r7, #6]
 8008418:	089b      	lsrs	r3, r3, #2
 800841a:	b29b      	uxth	r3, r3
 800841c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008426:	2300      	movs	r3, #0
 8008428:	623b      	str	r3, [r7, #32]
 800842a:	e014      	b.n	8008456 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	601a      	str	r2, [r3, #0]
    pDest++;
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	3301      	adds	r3, #1
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	3301      	adds	r3, #1
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	3301      	adds	r3, #1
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	3301      	adds	r3, #1
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	3301      	adds	r3, #1
 8008454:	623b      	str	r3, [r7, #32]
 8008456:	6a3a      	ldr	r2, [r7, #32]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	429a      	cmp	r2, r3
 800845c:	d3e6      	bcc.n	800842c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800845e:	8bfb      	ldrh	r3, [r7, #30]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01e      	beq.n	80084a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800846e:	461a      	mov	r2, r3
 8008470:	f107 0310 	add.w	r3, r7, #16
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	fa22 f303 	lsr.w	r3, r2, r3
 8008484:	b2da      	uxtb	r2, r3
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	701a      	strb	r2, [r3, #0]
      i++;
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	3301      	adds	r3, #1
 800848e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	3301      	adds	r3, #1
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008496:	8bfb      	ldrh	r3, [r7, #30]
 8008498:	3b01      	subs	r3, #1
 800849a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800849c:	8bfb      	ldrh	r3, [r7, #30]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1ea      	bne.n	8008478 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	372c      	adds	r7, #44	; 0x2c
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	785b      	ldrb	r3, [r3, #1]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d12c      	bne.n	8008526 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	db12      	blt.n	8008504 <USB_EPSetStall+0x54>
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00f      	beq.n	8008504 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	0151      	lsls	r1, r2, #5
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	440a      	add	r2, r1
 80084fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008502:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	440a      	add	r2, r1
 800851a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	e02b      	b.n	800857e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	db12      	blt.n	800855e <USB_EPSetStall+0xae>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00f      	beq.n	800855e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	440a      	add	r2, r1
 8008554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008558:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800855c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	0151      	lsls	r1, r2, #5
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	440a      	add	r2, r1
 8008574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800857c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d128      	bne.n	80085fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	791b      	ldrb	r3, [r3, #4]
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d003      	beq.n	80085d8 <USB_EPClearStall+0x4c>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	791b      	ldrb	r3, [r3, #4]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d138      	bne.n	800864a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	0151      	lsls	r1, r2, #5
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	440a      	add	r2, r1
 80085ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	e027      	b.n	800864a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	440a      	add	r2, r1
 8008610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008614:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008618:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	791b      	ldrb	r3, [r3, #4]
 800861e:	2b03      	cmp	r3, #3
 8008620:	d003      	beq.n	800862a <USB_EPClearStall+0x9e>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	791b      	ldrb	r3, [r3, #4]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d10f      	bne.n	800864a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	0151      	lsls	r1, r2, #5
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	440a      	add	r2, r1
 8008640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008648:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008676:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800867a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800868c:	68f9      	ldr	r1, [r7, #12]
 800868e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008692:	4313      	orrs	r3, r2
 8008694:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086be:	f023 0303 	bic.w	r3, r3, #3
 80086c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086d2:	f023 0302 	bic.w	r3, r3, #2
 80086d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008700:	f023 0303 	bic.w	r3, r3, #3
 8008704:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008714:	f043 0302 	orr.w	r3, r3, #2
 8008718:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4013      	ands	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008740:	68fb      	ldr	r3, [r7, #12]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800874e:	b480      	push	{r7}
 8008750:	b085      	sub	sp, #20
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	4013      	ands	r3, r2
 8008770:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	0c1b      	lsrs	r3, r3, #16
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	4013      	ands	r3, r2
 80087a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	b29b      	uxth	r3, r3
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4013      	ands	r3, r2
 80087e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80087e4:	68bb      	ldr	r3, [r7, #8]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b087      	sub	sp, #28
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008816:	78fb      	ldrb	r3, [r7, #3]
 8008818:	f003 030f 	and.w	r3, r3, #15
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	fa22 f303 	lsr.w	r3, r2, r3
 8008822:	01db      	lsls	r3, r3, #7
 8008824:	b2db      	uxtb	r3, r3
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	4313      	orrs	r3, r2
 800882a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	4013      	ands	r3, r2
 800883e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008840:	68bb      	ldr	r3, [r7, #8]
}
 8008842:	4618      	mov	r0, r3
 8008844:	371c      	adds	r7, #28
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	f003 0301 	and.w	r3, r3, #1
}
 800885e:	4618      	mov	r0, r3
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008884:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008888:	f023 0307 	bic.w	r3, r3, #7
 800888c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800889c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	460b      	mov	r3, r1
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	333c      	adds	r3, #60	; 0x3c
 80088c6:	3304      	adds	r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	4a26      	ldr	r2, [pc, #152]	; (8008968 <USB_EP0_OutStart+0xb8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d90a      	bls.n	80088ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088e4:	d101      	bne.n	80088ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e037      	b.n	800895a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f0:	461a      	mov	r2, r3
 80088f2:	2300      	movs	r3, #0
 80088f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008918:	f043 0318 	orr.w	r3, r3, #24
 800891c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008930:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008932:	7afb      	ldrb	r3, [r7, #11]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d10f      	bne.n	8008958 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008952:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	4f54300a 	.word	0x4f54300a

0800896c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008974:	2300      	movs	r3, #0
 8008976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3301      	adds	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4a13      	ldr	r2, [pc, #76]	; (80089d0 <USB_CoreReset+0x64>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d901      	bls.n	800898a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e01b      	b.n	80089c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	daf2      	bge.n	8008978 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	f043 0201 	orr.w	r2, r3, #1
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3301      	adds	r3, #1
 80089a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <USB_CoreReset+0x64>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d901      	bls.n	80089b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e006      	b.n	80089c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d0f0      	beq.n	80089a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	00030d40 	.word	0x00030d40

080089d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80089e4:	f002 fc8a 	bl	800b2fc <USBD_static_malloc>
 80089e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d109      	bne.n	8008a04 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	32b0      	adds	r2, #176	; 0xb0
 80089fa:	2100      	movs	r1, #0
 80089fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a00:	2302      	movs	r3, #2
 8008a02:	e0d4      	b.n	8008bae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008a04:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008a08:	2100      	movs	r1, #0
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f002 fce4 	bl	800b3d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	32b0      	adds	r2, #176	; 0xb0
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	32b0      	adds	r2, #176	; 0xb0
 8008a2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7c1b      	ldrb	r3, [r3, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d138      	bne.n	8008aae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a3c:	4b5e      	ldr	r3, [pc, #376]	; (8008bb8 <USBD_CDC_Init+0x1e4>)
 8008a3e:	7819      	ldrb	r1, [r3, #0]
 8008a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a44:	2202      	movs	r2, #2
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f002 fb35 	bl	800b0b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a4c:	4b5a      	ldr	r3, [pc, #360]	; (8008bb8 <USBD_CDC_Init+0x1e4>)
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	f003 020f 	and.w	r2, r3, #15
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	440b      	add	r3, r1
 8008a60:	3324      	adds	r3, #36	; 0x24
 8008a62:	2201      	movs	r2, #1
 8008a64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a66:	4b55      	ldr	r3, [pc, #340]	; (8008bbc <USBD_CDC_Init+0x1e8>)
 8008a68:	7819      	ldrb	r1, [r3, #0]
 8008a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a6e:	2202      	movs	r2, #2
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f002 fb20 	bl	800b0b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a76:	4b51      	ldr	r3, [pc, #324]	; (8008bbc <USBD_CDC_Init+0x1e8>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	f003 020f 	and.w	r2, r3, #15
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a8e:	2201      	movs	r2, #1
 8008a90:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a92:	4b4b      	ldr	r3, [pc, #300]	; (8008bc0 <USBD_CDC_Init+0x1ec>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	f003 020f 	and.w	r2, r3, #15
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	3326      	adds	r3, #38	; 0x26
 8008aa8:	2210      	movs	r2, #16
 8008aaa:	801a      	strh	r2, [r3, #0]
 8008aac:	e035      	b.n	8008b1a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008aae:	4b42      	ldr	r3, [pc, #264]	; (8008bb8 <USBD_CDC_Init+0x1e4>)
 8008ab0:	7819      	ldrb	r1, [r3, #0]
 8008ab2:	2340      	movs	r3, #64	; 0x40
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f002 fafd 	bl	800b0b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008abc:	4b3e      	ldr	r3, [pc, #248]	; (8008bb8 <USBD_CDC_Init+0x1e4>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 020f 	and.w	r2, r3, #15
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	3324      	adds	r3, #36	; 0x24
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008ad6:	4b39      	ldr	r3, [pc, #228]	; (8008bbc <USBD_CDC_Init+0x1e8>)
 8008ad8:	7819      	ldrb	r1, [r3, #0]
 8008ada:	2340      	movs	r3, #64	; 0x40
 8008adc:	2202      	movs	r2, #2
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f002 fae9 	bl	800b0b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ae4:	4b35      	ldr	r3, [pc, #212]	; (8008bbc <USBD_CDC_Init+0x1e8>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	f003 020f 	and.w	r2, r3, #15
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	440b      	add	r3, r1
 8008af8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008afc:	2201      	movs	r2, #1
 8008afe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008b00:	4b2f      	ldr	r3, [pc, #188]	; (8008bc0 <USBD_CDC_Init+0x1ec>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f003 020f 	and.w	r2, r3, #15
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	3326      	adds	r3, #38	; 0x26
 8008b16:	2210      	movs	r2, #16
 8008b18:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b1a:	4b29      	ldr	r3, [pc, #164]	; (8008bc0 <USBD_CDC_Init+0x1ec>)
 8008b1c:	7819      	ldrb	r1, [r3, #0]
 8008b1e:	2308      	movs	r3, #8
 8008b20:	2203      	movs	r2, #3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f002 fac7 	bl	800b0b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008b28:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <USBD_CDC_Init+0x1ec>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	f003 020f 	and.w	r2, r3, #15
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	440b      	add	r3, r1
 8008b3c:	3324      	adds	r3, #36	; 0x24
 8008b3e:	2201      	movs	r2, #1
 8008b40:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	33b0      	adds	r3, #176	; 0xb0
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e018      	b.n	8008bae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7c1b      	ldrb	r3, [r3, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b84:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <USBD_CDC_Init+0x1e8>)
 8008b86:	7819      	ldrb	r1, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f002 fb7e 	bl	800b294 <USBD_LL_PrepareReceive>
 8008b98:	e008      	b.n	8008bac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b9a:	4b08      	ldr	r3, [pc, #32]	; (8008bbc <USBD_CDC_Init+0x1e8>)
 8008b9c:	7819      	ldrb	r1, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ba4:	2340      	movs	r3, #64	; 0x40
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f002 fb74 	bl	800b294 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000097 	.word	0x20000097
 8008bbc:	20000098 	.word	0x20000098
 8008bc0:	20000099 	.word	0x20000099

08008bc4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008bd0:	4b3a      	ldr	r3, [pc, #232]	; (8008cbc <USBD_CDC_DeInit+0xf8>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f002 fa93 	bl	800b102 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008bdc:	4b37      	ldr	r3, [pc, #220]	; (8008cbc <USBD_CDC_DeInit+0xf8>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	3324      	adds	r3, #36	; 0x24
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008bf6:	4b32      	ldr	r3, [pc, #200]	; (8008cc0 <USBD_CDC_DeInit+0xfc>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f002 fa80 	bl	800b102 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008c02:	4b2f      	ldr	r3, [pc, #188]	; (8008cc0 <USBD_CDC_DeInit+0xfc>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	f003 020f 	and.w	r2, r3, #15
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008c1e:	4b29      	ldr	r3, [pc, #164]	; (8008cc4 <USBD_CDC_DeInit+0x100>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f002 fa6c 	bl	800b102 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008c2a:	4b26      	ldr	r3, [pc, #152]	; (8008cc4 <USBD_CDC_DeInit+0x100>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	f003 020f 	and.w	r2, r3, #15
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	440b      	add	r3, r1
 8008c3e:	3324      	adds	r3, #36	; 0x24
 8008c40:	2200      	movs	r2, #0
 8008c42:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008c44:	4b1f      	ldr	r3, [pc, #124]	; (8008cc4 <USBD_CDC_DeInit+0x100>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	f003 020f 	and.w	r2, r3, #15
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	440b      	add	r3, r1
 8008c58:	3326      	adds	r3, #38	; 0x26
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	32b0      	adds	r2, #176	; 0xb0
 8008c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01f      	beq.n	8008cb0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	33b0      	adds	r3, #176	; 0xb0
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4413      	add	r3, r2
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	32b0      	adds	r2, #176	; 0xb0
 8008c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f002 fb40 	bl	800b318 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	32b0      	adds	r2, #176	; 0xb0
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000097 	.word	0x20000097
 8008cc0:	20000098 	.word	0x20000098
 8008cc4:	20000099 	.word	0x20000099

08008cc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	32b0      	adds	r2, #176	; 0xb0
 8008cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e0bf      	b.n	8008e78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d050      	beq.n	8008da6 <USBD_CDC_Setup+0xde>
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	f040 80af 	bne.w	8008e68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	88db      	ldrh	r3, [r3, #6]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d03a      	beq.n	8008d88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	b25b      	sxtb	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da1b      	bge.n	8008d54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	33b0      	adds	r3, #176	; 0xb0
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008d32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	88d2      	ldrh	r2, [r2, #6]
 8008d38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	88db      	ldrh	r3, [r3, #6]
 8008d3e:	2b07      	cmp	r3, #7
 8008d40:	bf28      	it	cs
 8008d42:	2307      	movcs	r3, #7
 8008d44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	89fa      	ldrh	r2, [r7, #14]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 fd89 	bl	800a864 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008d52:	e090      	b.n	8008e76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	785a      	ldrb	r2, [r3, #1]
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	88db      	ldrh	r3, [r3, #6]
 8008d62:	2b3f      	cmp	r3, #63	; 0x3f
 8008d64:	d803      	bhi.n	8008d6e <USBD_CDC_Setup+0xa6>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	88db      	ldrh	r3, [r3, #6]
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	e000      	b.n	8008d70 <USBD_CDC_Setup+0xa8>
 8008d6e:	2240      	movs	r2, #64	; 0x40
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008d76:	6939      	ldr	r1, [r7, #16]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f001 fd9b 	bl	800a8bc <USBD_CtlPrepareRx>
      break;
 8008d86:	e076      	b.n	8008e76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	33b0      	adds	r3, #176	; 0xb0
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	7850      	ldrb	r0, [r2, #1]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	4798      	blx	r3
      break;
 8008da4:	e067      	b.n	8008e76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	2b0b      	cmp	r3, #11
 8008dac:	d851      	bhi.n	8008e52 <USBD_CDC_Setup+0x18a>
 8008dae:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <USBD_CDC_Setup+0xec>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008de5 	.word	0x08008de5
 8008db8:	08008e61 	.word	0x08008e61
 8008dbc:	08008e53 	.word	0x08008e53
 8008dc0:	08008e53 	.word	0x08008e53
 8008dc4:	08008e53 	.word	0x08008e53
 8008dc8:	08008e53 	.word	0x08008e53
 8008dcc:	08008e53 	.word	0x08008e53
 8008dd0:	08008e53 	.word	0x08008e53
 8008dd4:	08008e53 	.word	0x08008e53
 8008dd8:	08008e53 	.word	0x08008e53
 8008ddc:	08008e0f 	.word	0x08008e0f
 8008de0:	08008e39 	.word	0x08008e39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d107      	bne.n	8008e00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008df0:	f107 030a 	add.w	r3, r7, #10
 8008df4:	2202      	movs	r2, #2
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 fd33 	bl	800a864 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dfe:	e032      	b.n	8008e66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 fcbd 	bl	800a782 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e0c:	e02b      	b.n	8008e66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d107      	bne.n	8008e2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e1a:	f107 030d 	add.w	r3, r7, #13
 8008e1e:	2201      	movs	r2, #1
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 fd1e 	bl	800a864 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e28:	e01d      	b.n	8008e66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 fca8 	bl	800a782 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e32:	2303      	movs	r3, #3
 8008e34:	75fb      	strb	r3, [r7, #23]
          break;
 8008e36:	e016      	b.n	8008e66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d00f      	beq.n	8008e64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 fc9b 	bl	800a782 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e50:	e008      	b.n	8008e64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 fc94 	bl	800a782 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e5e:	e002      	b.n	8008e66 <USBD_CDC_Setup+0x19e>
          break;
 8008e60:	bf00      	nop
 8008e62:	e008      	b.n	8008e76 <USBD_CDC_Setup+0x1ae>
          break;
 8008e64:	bf00      	nop
      }
      break;
 8008e66:	e006      	b.n	8008e76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 fc89 	bl	800a782 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	75fb      	strb	r3, [r7, #23]
      break;
 8008e74:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	32b0      	adds	r2, #176	; 0xb0
 8008e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e065      	b.n	8008f76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	32b0      	adds	r2, #176	; 0xb0
 8008eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	f003 020f 	and.w	r2, r3, #15
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	440b      	add	r3, r1
 8008ecc:	3318      	adds	r3, #24
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d02f      	beq.n	8008f34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	f003 020f 	and.w	r2, r3, #15
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	3318      	adds	r3, #24
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	78fb      	ldrb	r3, [r7, #3]
 8008eec:	f003 010f 	and.w	r1, r3, #15
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	440b      	add	r3, r1
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4403      	add	r3, r0
 8008efc:	3348      	adds	r3, #72	; 0x48
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f04:	fb01 f303 	mul.w	r3, r1, r3
 8008f08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d112      	bne.n	8008f34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	f003 020f 	and.w	r2, r3, #15
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	4613      	mov	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	440b      	add	r3, r1
 8008f20:	3318      	adds	r3, #24
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f26:	78f9      	ldrb	r1, [r7, #3]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f002 f990 	bl	800b252 <USBD_LL_Transmit>
 8008f32:	e01f      	b.n	8008f74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	33b0      	adds	r3, #176	; 0xb0
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d010      	beq.n	8008f74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	33b0      	adds	r3, #176	; 0xb0
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	32b0      	adds	r2, #176	; 0xb0
 8008f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	32b0      	adds	r2, #176	; 0xb0
 8008fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e01a      	b.n	8008fe6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f002 f98e 	bl	800b2d6 <USBD_LL_GetRxDataSize>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	33b0      	adds	r3, #176	; 0xb0
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	32b0      	adds	r2, #176	; 0xb0
 8009000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009004:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800900c:	2303      	movs	r3, #3
 800900e:	e025      	b.n	800905c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	33b0      	adds	r3, #176	; 0xb0
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d01a      	beq.n	800905a <USBD_CDC_EP0_RxReady+0x6c>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800902a:	2bff      	cmp	r3, #255	; 0xff
 800902c:	d015      	beq.n	800905a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	33b0      	adds	r3, #176	; 0xb0
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009046:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800904e:	b292      	uxth	r2, r2
 8009050:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	22ff      	movs	r2, #255	; 0xff
 8009056:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800906c:	2182      	movs	r1, #130	; 0x82
 800906e:	4818      	ldr	r0, [pc, #96]	; (80090d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009070:	f000 fd4f 	bl	8009b12 <USBD_GetEpDesc>
 8009074:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009076:	2101      	movs	r1, #1
 8009078:	4815      	ldr	r0, [pc, #84]	; (80090d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800907a:	f000 fd4a 	bl	8009b12 <USBD_GetEpDesc>
 800907e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009080:	2181      	movs	r1, #129	; 0x81
 8009082:	4813      	ldr	r0, [pc, #76]	; (80090d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009084:	f000 fd45 	bl	8009b12 <USBD_GetEpDesc>
 8009088:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2210      	movs	r2, #16
 8009094:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d006      	beq.n	80090aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2200      	movs	r2, #0
 80090a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090a4:	711a      	strb	r2, [r3, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d006      	beq.n	80090be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090b8:	711a      	strb	r2, [r3, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2243      	movs	r2, #67	; 0x43
 80090c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090c4:	4b02      	ldr	r3, [pc, #8]	; (80090d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000054 	.word	0x20000054

080090d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090dc:	2182      	movs	r1, #130	; 0x82
 80090de:	4818      	ldr	r0, [pc, #96]	; (8009140 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090e0:	f000 fd17 	bl	8009b12 <USBD_GetEpDesc>
 80090e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090e6:	2101      	movs	r1, #1
 80090e8:	4815      	ldr	r0, [pc, #84]	; (8009140 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090ea:	f000 fd12 	bl	8009b12 <USBD_GetEpDesc>
 80090ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090f0:	2181      	movs	r1, #129	; 0x81
 80090f2:	4813      	ldr	r0, [pc, #76]	; (8009140 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090f4:	f000 fd0d 	bl	8009b12 <USBD_GetEpDesc>
 80090f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2210      	movs	r2, #16
 8009104:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	2200      	movs	r2, #0
 8009110:	711a      	strb	r2, [r3, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f042 0202 	orr.w	r2, r2, #2
 8009118:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d006      	beq.n	800912e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	711a      	strb	r2, [r3, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f042 0202 	orr.w	r2, r2, #2
 800912c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2243      	movs	r2, #67	; 0x43
 8009132:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009134:	4b02      	ldr	r3, [pc, #8]	; (8009140 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009136:	4618      	mov	r0, r3
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	20000054 	.word	0x20000054

08009144 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800914c:	2182      	movs	r1, #130	; 0x82
 800914e:	4818      	ldr	r0, [pc, #96]	; (80091b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009150:	f000 fcdf 	bl	8009b12 <USBD_GetEpDesc>
 8009154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009156:	2101      	movs	r1, #1
 8009158:	4815      	ldr	r0, [pc, #84]	; (80091b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800915a:	f000 fcda 	bl	8009b12 <USBD_GetEpDesc>
 800915e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009160:	2181      	movs	r1, #129	; 0x81
 8009162:	4813      	ldr	r0, [pc, #76]	; (80091b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009164:	f000 fcd5 	bl	8009b12 <USBD_GetEpDesc>
 8009168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2210      	movs	r2, #16
 8009174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d006      	beq.n	800918a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	2200      	movs	r2, #0
 8009180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009184:	711a      	strb	r2, [r3, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d006      	beq.n	800919e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009198:	711a      	strb	r2, [r3, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2243      	movs	r2, #67	; 0x43
 80091a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091a4:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000054 	.word	0x20000054

080091b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	220a      	movs	r2, #10
 80091c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80091c2:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20000010 	.word	0x20000010

080091d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e009      	b.n	80091fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	33b0      	adds	r3, #176	; 0xb0
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009208:	b480      	push	{r7}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	32b0      	adds	r2, #176	; 0xb0
 800921e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009222:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800922a:	2303      	movs	r3, #3
 800922c:	e008      	b.n	8009240 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	371c      	adds	r7, #28
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	32b0      	adds	r2, #176	; 0xb0
 8009260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009264:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	e004      	b.n	800927a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
	...

08009288 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	32b0      	adds	r2, #176	; 0xb0
 800929a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80092a0:	2301      	movs	r3, #1
 80092a2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	32b0      	adds	r2, #176	; 0xb0
 80092ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e025      	b.n	8009306 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11f      	bne.n	8009304 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80092cc:	4b10      	ldr	r3, [pc, #64]	; (8009310 <USBD_CDC_TransmitPacket+0x88>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	f003 020f 	and.w	r2, r3, #15
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4403      	add	r3, r0
 80092e6:	3318      	adds	r3, #24
 80092e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <USBD_CDC_TransmitPacket+0x88>)
 80092ec:	7819      	ldrb	r1, [r3, #0]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 ffa9 	bl	800b252 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	20000097 	.word	0x20000097

08009314 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	32b0      	adds	r2, #176	; 0xb0
 8009326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	32b0      	adds	r2, #176	; 0xb0
 8009336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800933e:	2303      	movs	r3, #3
 8009340:	e018      	b.n	8009374 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	7c1b      	ldrb	r3, [r3, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800934a:	4b0c      	ldr	r3, [pc, #48]	; (800937c <USBD_CDC_ReceivePacket+0x68>)
 800934c:	7819      	ldrb	r1, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 ff9b 	bl	800b294 <USBD_LL_PrepareReceive>
 800935e:	e008      	b.n	8009372 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009360:	4b06      	ldr	r3, [pc, #24]	; (800937c <USBD_CDC_ReceivePacket+0x68>)
 8009362:	7819      	ldrb	r1, [r3, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800936a:	2340      	movs	r3, #64	; 0x40
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 ff91 	bl	800b294 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20000098 	.word	0x20000098

08009380 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009394:	2303      	movs	r3, #3
 8009396:	e01f      	b.n	80093d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	79fa      	ldrb	r2, [r7, #7]
 80093ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f001 fe0b 	bl	800afe8 <USBD_LL_Init>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e025      	b.n	8009444 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	32ae      	adds	r2, #174	; 0xae
 800940a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00f      	beq.n	8009434 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	32ae      	adds	r2, #174	; 0xae
 800941e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	f107 020e 	add.w	r2, r7, #14
 8009428:	4610      	mov	r0, r2
 800942a:	4798      	blx	r3
 800942c:	4602      	mov	r2, r0
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800943a:	1c5a      	adds	r2, r3, #1
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 fe13 	bl	800b080 <USBD_LL_Start>
 800945a:	4603      	mov	r3, r0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800946c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800946e:	4618      	mov	r0, r3
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	460b      	mov	r3, r1
 8009484:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d009      	beq.n	80094a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	78fa      	ldrb	r2, [r7, #3]
 800949e:	4611      	mov	r1, r2
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	4798      	blx	r3
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	460b      	mov	r3, r1
 80094bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	78fa      	ldrb	r2, [r7, #3]
 80094cc:	4611      	mov	r1, r2
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	4798      	blx	r3
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80094d8:	2303      	movs	r3, #3
 80094da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f001 f908 	bl	800a70e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800950c:	461a      	mov	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800951a:	f003 031f 	and.w	r3, r3, #31
 800951e:	2b02      	cmp	r3, #2
 8009520:	d01a      	beq.n	8009558 <USBD_LL_SetupStage+0x72>
 8009522:	2b02      	cmp	r3, #2
 8009524:	d822      	bhi.n	800956c <USBD_LL_SetupStage+0x86>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <USBD_LL_SetupStage+0x4a>
 800952a:	2b01      	cmp	r3, #1
 800952c:	d00a      	beq.n	8009544 <USBD_LL_SetupStage+0x5e>
 800952e:	e01d      	b.n	800956c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fb5f 	bl	8009bfc <USBD_StdDevReq>
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]
      break;
 8009542:	e020      	b.n	8009586 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fbc7 	bl	8009ce0 <USBD_StdItfReq>
 8009552:	4603      	mov	r3, r0
 8009554:	73fb      	strb	r3, [r7, #15]
      break;
 8009556:	e016      	b.n	8009586 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fc29 	bl	8009db8 <USBD_StdEPReq>
 8009566:	4603      	mov	r3, r0
 8009568:	73fb      	strb	r3, [r7, #15]
      break;
 800956a:	e00c      	b.n	8009586 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009572:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009576:	b2db      	uxtb	r3, r3
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fde0 	bl	800b140 <USBD_LL_StallEP>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
      break;
 8009584:	bf00      	nop
  }

  return ret;
 8009586:	7bfb      	ldrb	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	460b      	mov	r3, r1
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80095a2:	7afb      	ldrb	r3, [r7, #11]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d16e      	bne.n	8009686 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	f040 8098 	bne.w	80096ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d913      	bls.n	80095f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	1ad2      	subs	r2, r2, r3
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	4293      	cmp	r3, r2
 80095e0:	bf28      	it	cs
 80095e2:	4613      	movcs	r3, r2
 80095e4:	461a      	mov	r2, r3
 80095e6:	6879      	ldr	r1, [r7, #4]
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f001 f984 	bl	800a8f6 <USBD_CtlContinueRx>
 80095ee:	e07d      	b.n	80096ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80095f6:	f003 031f 	and.w	r3, r3, #31
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d014      	beq.n	8009628 <USBD_LL_DataOutStage+0x98>
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d81d      	bhi.n	800963e <USBD_LL_DataOutStage+0xae>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <USBD_LL_DataOutStage+0x7c>
 8009606:	2b01      	cmp	r3, #1
 8009608:	d003      	beq.n	8009612 <USBD_LL_DataOutStage+0x82>
 800960a:	e018      	b.n	800963e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	75bb      	strb	r3, [r7, #22]
            break;
 8009610:	e018      	b.n	8009644 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009618:	b2db      	uxtb	r3, r3
 800961a:	4619      	mov	r1, r3
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fa5e 	bl	8009ade <USBD_CoreFindIF>
 8009622:	4603      	mov	r3, r0
 8009624:	75bb      	strb	r3, [r7, #22]
            break;
 8009626:	e00d      	b.n	8009644 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800962e:	b2db      	uxtb	r3, r3
 8009630:	4619      	mov	r1, r3
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 fa60 	bl	8009af8 <USBD_CoreFindEP>
 8009638:	4603      	mov	r3, r0
 800963a:	75bb      	strb	r3, [r7, #22]
            break;
 800963c:	e002      	b.n	8009644 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800963e:	2300      	movs	r3, #0
 8009640:	75bb      	strb	r3, [r7, #22]
            break;
 8009642:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009644:	7dbb      	ldrb	r3, [r7, #22]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d119      	bne.n	800967e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b03      	cmp	r3, #3
 8009654:	d113      	bne.n	800967e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009656:	7dba      	ldrb	r2, [r7, #22]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	32ae      	adds	r2, #174	; 0xae
 800965c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00b      	beq.n	800967e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009666:	7dba      	ldrb	r2, [r7, #22]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800966e:	7dba      	ldrb	r2, [r7, #22]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	32ae      	adds	r2, #174	; 0xae
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f001 f94a 	bl	800a918 <USBD_CtlSendStatus>
 8009684:	e032      	b.n	80096ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009686:	7afb      	ldrb	r3, [r7, #11]
 8009688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800968c:	b2db      	uxtb	r3, r3
 800968e:	4619      	mov	r1, r3
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 fa31 	bl	8009af8 <USBD_CoreFindEP>
 8009696:	4603      	mov	r3, r0
 8009698:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800969a:	7dbb      	ldrb	r3, [r7, #22]
 800969c:	2bff      	cmp	r3, #255	; 0xff
 800969e:	d025      	beq.n	80096ec <USBD_LL_DataOutStage+0x15c>
 80096a0:	7dbb      	ldrb	r3, [r7, #22]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d122      	bne.n	80096ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d117      	bne.n	80096e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80096b2:	7dba      	ldrb	r2, [r7, #22]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	32ae      	adds	r2, #174	; 0xae
 80096b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00f      	beq.n	80096e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80096c2:	7dba      	ldrb	r2, [r7, #22]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80096ca:	7dba      	ldrb	r2, [r7, #22]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	32ae      	adds	r2, #174	; 0xae
 80096d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	7afa      	ldrb	r2, [r7, #11]
 80096d8:	4611      	mov	r1, r2
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	4798      	blx	r3
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
 80096ea:	e000      	b.n	80096ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b086      	sub	sp, #24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	460b      	mov	r3, r1
 8009700:	607a      	str	r2, [r7, #4]
 8009702:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009704:	7afb      	ldrb	r3, [r7, #11]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d16f      	bne.n	80097ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3314      	adds	r3, #20
 800970e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009716:	2b02      	cmp	r3, #2
 8009718:	d15a      	bne.n	80097d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	429a      	cmp	r2, r3
 8009724:	d914      	bls.n	8009750 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	689a      	ldr	r2, [r3, #8]
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	461a      	mov	r2, r3
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f001 f8ac 	bl	800a89a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009742:	2300      	movs	r3, #0
 8009744:	2200      	movs	r2, #0
 8009746:	2100      	movs	r1, #0
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f001 fda3 	bl	800b294 <USBD_LL_PrepareReceive>
 800974e:	e03f      	b.n	80097d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	429a      	cmp	r2, r3
 800975a:	d11c      	bne.n	8009796 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009764:	429a      	cmp	r2, r3
 8009766:	d316      	bcc.n	8009796 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009772:	429a      	cmp	r2, r3
 8009774:	d20f      	bcs.n	8009796 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009776:	2200      	movs	r2, #0
 8009778:	2100      	movs	r1, #0
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f001 f88d 	bl	800a89a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009788:	2300      	movs	r3, #0
 800978a:	2200      	movs	r2, #0
 800978c:	2100      	movs	r1, #0
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f001 fd80 	bl	800b294 <USBD_LL_PrepareReceive>
 8009794:	e01c      	b.n	80097d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d10f      	bne.n	80097c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80097c2:	2180      	movs	r1, #128	; 0x80
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f001 fcbb 	bl	800b140 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f001 f8b7 	bl	800a93e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d03a      	beq.n	8009850 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7ff fe42 	bl	8009464 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80097e8:	e032      	b.n	8009850 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	4619      	mov	r1, r3
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f97f 	bl	8009af8 <USBD_CoreFindEP>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	2bff      	cmp	r3, #255	; 0xff
 8009802:	d025      	beq.n	8009850 <USBD_LL_DataInStage+0x15a>
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d122      	bne.n	8009850 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b03      	cmp	r3, #3
 8009814:	d11c      	bne.n	8009850 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009816:	7dfa      	ldrb	r2, [r7, #23]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	32ae      	adds	r2, #174	; 0xae
 800981c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d014      	beq.n	8009850 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009826:	7dfa      	ldrb	r2, [r7, #23]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800982e:	7dfa      	ldrb	r2, [r7, #23]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	32ae      	adds	r2, #174	; 0xae
 8009834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	7afa      	ldrb	r2, [r7, #11]
 800983c:	4611      	mov	r1, r2
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	4798      	blx	r3
 8009842:	4603      	mov	r3, r0
 8009844:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009846:	7dbb      	ldrb	r3, [r7, #22]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800984c:	7dbb      	ldrb	r3, [r7, #22]
 800984e:	e000      	b.n	8009852 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009892:	2b00      	cmp	r3, #0
 8009894:	d014      	beq.n	80098c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00e      	beq.n	80098c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	6852      	ldr	r2, [r2, #4]
 80098ae:	b2d2      	uxtb	r2, r2
 80098b0:	4611      	mov	r1, r2
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	4798      	blx	r3
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80098bc:	2303      	movs	r3, #3
 80098be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098c0:	2340      	movs	r3, #64	; 0x40
 80098c2:	2200      	movs	r2, #0
 80098c4:	2100      	movs	r1, #0
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 fbf5 	bl	800b0b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2240      	movs	r2, #64	; 0x40
 80098d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098dc:	2340      	movs	r3, #64	; 0x40
 80098de:	2200      	movs	r2, #0
 80098e0:	2180      	movs	r1, #128	; 0x80
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f001 fbe7 	bl	800b0b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2240      	movs	r2, #64	; 0x40
 80098f2:	621a      	str	r2, [r3, #32]

  return ret;
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	460b      	mov	r3, r1
 8009908:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	78fa      	ldrb	r2, [r7, #3]
 800990e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2204      	movs	r2, #4
 8009938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b04      	cmp	r3, #4
 800995c:	d106      	bne.n	800996c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009964:	b2da      	uxtb	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b03      	cmp	r3, #3
 800998c:	d110      	bne.n	80099b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00b      	beq.n	80099b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	32ae      	adds	r2, #174	; 0xae
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80099d8:	2303      	movs	r3, #3
 80099da:	e01c      	b.n	8009a16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d115      	bne.n	8009a14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	32ae      	adds	r2, #174	; 0xae
 80099f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	32ae      	adds	r2, #174	; 0xae
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	460b      	mov	r3, r1
 8009a28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	32ae      	adds	r2, #174	; 0xae
 8009a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e01c      	b.n	8009a7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d115      	bne.n	8009a78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	32ae      	adds	r2, #174	; 0xae
 8009a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00b      	beq.n	8009a78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	32ae      	adds	r2, #174	; 0xae
 8009a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	4611      	mov	r1, r2
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00e      	beq.n	8009ad4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	6852      	ldr	r2, [r2, #4]
 8009ac2:	b2d2      	uxtb	r2, r2
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009aea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d920      	bls.n	8009b7c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009b42:	e013      	b.n	8009b6c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009b44:	f107 030a 	add.w	r3, r7, #10
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6978      	ldr	r0, [r7, #20]
 8009b4c:	f000 f81b 	bl	8009b86 <USBD_GetNextDesc>
 8009b50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	785b      	ldrb	r3, [r3, #1]
 8009b56:	2b05      	cmp	r3, #5
 8009b58:	d108      	bne.n	8009b6c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	789b      	ldrb	r3, [r3, #2]
 8009b62:	78fa      	ldrb	r2, [r7, #3]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d008      	beq.n	8009b7a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	885b      	ldrh	r3, [r3, #2]
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	897b      	ldrh	r3, [r7, #10]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d8e5      	bhi.n	8009b44 <USBD_GetEpDesc+0x32>
 8009b78:	e000      	b.n	8009b7c <USBD_GetEpDesc+0x6a>
          break;
 8009b7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009b7c:	693b      	ldr	r3, [r7, #16]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b085      	sub	sp, #20
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	881a      	ldrh	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	4413      	add	r3, r2
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4413      	add	r3, r2
 8009bb0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009bde:	8a3b      	ldrh	r3, [r7, #16]
 8009be0:	021b      	lsls	r3, r3, #8
 8009be2:	b21a      	sxth	r2, r3
 8009be4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	b21b      	sxth	r3, r3
 8009bec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009bee:	89fb      	ldrh	r3, [r7, #14]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	371c      	adds	r7, #28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c12:	2b40      	cmp	r3, #64	; 0x40
 8009c14:	d005      	beq.n	8009c22 <USBD_StdDevReq+0x26>
 8009c16:	2b40      	cmp	r3, #64	; 0x40
 8009c18:	d857      	bhi.n	8009cca <USBD_StdDevReq+0xce>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00f      	beq.n	8009c3e <USBD_StdDevReq+0x42>
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d153      	bne.n	8009cca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	32ae      	adds	r2, #174	; 0xae
 8009c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4798      	blx	r3
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c3c:	e04a      	b.n	8009cd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	2b09      	cmp	r3, #9
 8009c44:	d83b      	bhi.n	8009cbe <USBD_StdDevReq+0xc2>
 8009c46:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <USBD_StdDevReq+0x50>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009ca1 	.word	0x08009ca1
 8009c50:	08009cb5 	.word	0x08009cb5
 8009c54:	08009cbf 	.word	0x08009cbf
 8009c58:	08009cab 	.word	0x08009cab
 8009c5c:	08009cbf 	.word	0x08009cbf
 8009c60:	08009c7f 	.word	0x08009c7f
 8009c64:	08009c75 	.word	0x08009c75
 8009c68:	08009cbf 	.word	0x08009cbf
 8009c6c:	08009c97 	.word	0x08009c97
 8009c70:	08009c89 	.word	0x08009c89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa3c 	bl	800a0f4 <USBD_GetDescriptor>
          break;
 8009c7c:	e024      	b.n	8009cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fba1 	bl	800a3c8 <USBD_SetAddress>
          break;
 8009c86:	e01f      	b.n	8009cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fbe0 	bl	800a450 <USBD_SetConfig>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73fb      	strb	r3, [r7, #15]
          break;
 8009c94:	e018      	b.n	8009cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fc83 	bl	800a5a4 <USBD_GetConfig>
          break;
 8009c9e:	e013      	b.n	8009cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fcb4 	bl	800a610 <USBD_GetStatus>
          break;
 8009ca8:	e00e      	b.n	8009cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fce3 	bl	800a678 <USBD_SetFeature>
          break;
 8009cb2:	e009      	b.n	8009cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fd07 	bl	800a6ca <USBD_ClrFeature>
          break;
 8009cbc:	e004      	b.n	8009cc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fd5e 	bl	800a782 <USBD_CtlError>
          break;
 8009cc6:	bf00      	nop
      }
      break;
 8009cc8:	e004      	b.n	8009cd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fd58 	bl	800a782 <USBD_CtlError>
      break;
 8009cd2:	bf00      	nop
  }

  return ret;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop

08009ce0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cf6:	2b40      	cmp	r3, #64	; 0x40
 8009cf8:	d005      	beq.n	8009d06 <USBD_StdItfReq+0x26>
 8009cfa:	2b40      	cmp	r3, #64	; 0x40
 8009cfc:	d852      	bhi.n	8009da4 <USBD_StdItfReq+0xc4>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <USBD_StdItfReq+0x26>
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d14e      	bne.n	8009da4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d840      	bhi.n	8009d96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	889b      	ldrh	r3, [r3, #4]
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d836      	bhi.n	8009d8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	889b      	ldrh	r3, [r3, #4]
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fed9 	bl	8009ade <USBD_CoreFindIF>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	2bff      	cmp	r3, #255	; 0xff
 8009d34:	d01d      	beq.n	8009d72 <USBD_StdItfReq+0x92>
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d11a      	bne.n	8009d72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009d3c:	7bba      	ldrb	r2, [r7, #14]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32ae      	adds	r2, #174	; 0xae
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00f      	beq.n	8009d6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009d4c:	7bba      	ldrb	r2, [r7, #14]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d54:	7bba      	ldrb	r2, [r7, #14]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	32ae      	adds	r2, #174	; 0xae
 8009d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
 8009d66:	4603      	mov	r3, r0
 8009d68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d6a:	e004      	b.n	8009d76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d70:	e001      	b.n	8009d76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009d72:	2303      	movs	r3, #3
 8009d74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	88db      	ldrh	r3, [r3, #6]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d110      	bne.n	8009da0 <USBD_StdItfReq+0xc0>
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10d      	bne.n	8009da0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fdc7 	bl	800a918 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d8a:	e009      	b.n	8009da0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fcf7 	bl	800a782 <USBD_CtlError>
          break;
 8009d94:	e004      	b.n	8009da0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fcf2 	bl	800a782 <USBD_CtlError>
          break;
 8009d9e:	e000      	b.n	8009da2 <USBD_StdItfReq+0xc2>
          break;
 8009da0:	bf00      	nop
      }
      break;
 8009da2:	e004      	b.n	8009dae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fceb 	bl	800a782 <USBD_CtlError>
      break;
 8009dac:	bf00      	nop
  }

  return ret;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	889b      	ldrh	r3, [r3, #4]
 8009dca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dd4:	2b40      	cmp	r3, #64	; 0x40
 8009dd6:	d007      	beq.n	8009de8 <USBD_StdEPReq+0x30>
 8009dd8:	2b40      	cmp	r3, #64	; 0x40
 8009dda:	f200 817f 	bhi.w	800a0dc <USBD_StdEPReq+0x324>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d02a      	beq.n	8009e38 <USBD_StdEPReq+0x80>
 8009de2:	2b20      	cmp	r3, #32
 8009de4:	f040 817a 	bne.w	800a0dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff fe83 	bl	8009af8 <USBD_CoreFindEP>
 8009df2:	4603      	mov	r3, r0
 8009df4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009df6:	7b7b      	ldrb	r3, [r7, #13]
 8009df8:	2bff      	cmp	r3, #255	; 0xff
 8009dfa:	f000 8174 	beq.w	800a0e6 <USBD_StdEPReq+0x32e>
 8009dfe:	7b7b      	ldrb	r3, [r7, #13]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f040 8170 	bne.w	800a0e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009e06:	7b7a      	ldrb	r2, [r7, #13]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009e0e:	7b7a      	ldrb	r2, [r7, #13]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	32ae      	adds	r2, #174	; 0xae
 8009e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 8163 	beq.w	800a0e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009e20:	7b7a      	ldrb	r2, [r7, #13]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	32ae      	adds	r2, #174	; 0xae
 8009e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	4798      	blx	r3
 8009e32:	4603      	mov	r3, r0
 8009e34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e36:	e156      	b.n	800a0e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	785b      	ldrb	r3, [r3, #1]
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d008      	beq.n	8009e52 <USBD_StdEPReq+0x9a>
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	f300 8145 	bgt.w	800a0d0 <USBD_StdEPReq+0x318>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 809b 	beq.w	8009f82 <USBD_StdEPReq+0x1ca>
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d03c      	beq.n	8009eca <USBD_StdEPReq+0x112>
 8009e50:	e13e      	b.n	800a0d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d002      	beq.n	8009e64 <USBD_StdEPReq+0xac>
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d016      	beq.n	8009e90 <USBD_StdEPReq+0xd8>
 8009e62:	e02c      	b.n	8009ebe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00d      	beq.n	8009e86 <USBD_StdEPReq+0xce>
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	2b80      	cmp	r3, #128	; 0x80
 8009e6e:	d00a      	beq.n	8009e86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 f963 	bl	800b140 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e7a:	2180      	movs	r1, #128	; 0x80
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f95f 	bl	800b140 <USBD_LL_StallEP>
 8009e82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e84:	e020      	b.n	8009ec8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fc7a 	bl	800a782 <USBD_CtlError>
              break;
 8009e8e:	e01b      	b.n	8009ec8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	885b      	ldrh	r3, [r3, #2]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10e      	bne.n	8009eb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <USBD_StdEPReq+0xfe>
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b80      	cmp	r3, #128	; 0x80
 8009ea2:	d008      	beq.n	8009eb6 <USBD_StdEPReq+0xfe>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	88db      	ldrh	r3, [r3, #6]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d104      	bne.n	8009eb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 f945 	bl	800b140 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fd2e 	bl	800a918 <USBD_CtlSendStatus>

              break;
 8009ebc:	e004      	b.n	8009ec8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fc5e 	bl	800a782 <USBD_CtlError>
              break;
 8009ec6:	bf00      	nop
          }
          break;
 8009ec8:	e107      	b.n	800a0da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d002      	beq.n	8009edc <USBD_StdEPReq+0x124>
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d016      	beq.n	8009f08 <USBD_StdEPReq+0x150>
 8009eda:	e04b      	b.n	8009f74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00d      	beq.n	8009efe <USBD_StdEPReq+0x146>
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	2b80      	cmp	r3, #128	; 0x80
 8009ee6:	d00a      	beq.n	8009efe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 f927 	bl	800b140 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ef2:	2180      	movs	r1, #128	; 0x80
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 f923 	bl	800b140 <USBD_LL_StallEP>
 8009efa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009efc:	e040      	b.n	8009f80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fc3e 	bl	800a782 <USBD_CtlError>
              break;
 8009f06:	e03b      	b.n	8009f80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	885b      	ldrh	r3, [r3, #2]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d136      	bne.n	8009f7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
 8009f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d004      	beq.n	8009f24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f1a:	7bbb      	ldrb	r3, [r7, #14]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 f92d 	bl	800b17e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fcf7 	bl	800a918 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff fde2 	bl	8009af8 <USBD_CoreFindEP>
 8009f34:	4603      	mov	r3, r0
 8009f36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f38:	7b7b      	ldrb	r3, [r7, #13]
 8009f3a:	2bff      	cmp	r3, #255	; 0xff
 8009f3c:	d01f      	beq.n	8009f7e <USBD_StdEPReq+0x1c6>
 8009f3e:	7b7b      	ldrb	r3, [r7, #13]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d11c      	bne.n	8009f7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009f44:	7b7a      	ldrb	r2, [r7, #13]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009f4c:	7b7a      	ldrb	r2, [r7, #13]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	32ae      	adds	r2, #174	; 0xae
 8009f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d010      	beq.n	8009f7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f5c:	7b7a      	ldrb	r2, [r7, #13]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	32ae      	adds	r2, #174	; 0xae
 8009f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	4798      	blx	r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009f72:	e004      	b.n	8009f7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fc03 	bl	800a782 <USBD_CtlError>
              break;
 8009f7c:	e000      	b.n	8009f80 <USBD_StdEPReq+0x1c8>
              break;
 8009f7e:	bf00      	nop
          }
          break;
 8009f80:	e0ab      	b.n	800a0da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d002      	beq.n	8009f94 <USBD_StdEPReq+0x1dc>
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d032      	beq.n	8009ff8 <USBD_StdEPReq+0x240>
 8009f92:	e097      	b.n	800a0c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d007      	beq.n	8009faa <USBD_StdEPReq+0x1f2>
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	2b80      	cmp	r3, #128	; 0x80
 8009f9e:	d004      	beq.n	8009faa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fbed 	bl	800a782 <USBD_CtlError>
                break;
 8009fa8:	e091      	b.n	800a0ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	da0b      	bge.n	8009fca <USBD_StdEPReq+0x212>
 8009fb2:	7bbb      	ldrb	r3, [r7, #14]
 8009fb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	3310      	adds	r3, #16
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	e00b      	b.n	8009fe2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	4413      	add	r3, r2
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2202      	movs	r2, #2
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fc37 	bl	800a864 <USBD_CtlSendData>
              break;
 8009ff6:	e06a      	b.n	800a0ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	da11      	bge.n	800a024 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	f003 020f 	and.w	r2, r3, #15
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	4613      	mov	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	440b      	add	r3, r1
 800a012:	3324      	adds	r3, #36	; 0x24
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d117      	bne.n	800a04a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fbb0 	bl	800a782 <USBD_CtlError>
                  break;
 800a022:	e054      	b.n	800a0ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	f003 020f 	and.w	r2, r3, #15
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	440b      	add	r3, r1
 800a036:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a03a:	881b      	ldrh	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d104      	bne.n	800a04a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fb9d 	bl	800a782 <USBD_CtlError>
                  break;
 800a048:	e041      	b.n	800a0ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a04a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	da0b      	bge.n	800a06a <USBD_StdEPReq+0x2b2>
 800a052:	7bbb      	ldrb	r3, [r7, #14]
 800a054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a058:	4613      	mov	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	3310      	adds	r3, #16
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	4413      	add	r3, r2
 800a066:	3304      	adds	r3, #4
 800a068:	e00b      	b.n	800a082 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	4413      	add	r3, r2
 800a080:	3304      	adds	r3, #4
 800a082:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <USBD_StdEPReq+0x2d8>
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
 800a08c:	2b80      	cmp	r3, #128	; 0x80
 800a08e:	d103      	bne.n	800a098 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2200      	movs	r2, #0
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	e00e      	b.n	800a0b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 f88d 	bl	800b1bc <USBD_LL_IsStallEP>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d003      	beq.n	800a0b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	e002      	b.n	800a0b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fbd1 	bl	800a864 <USBD_CtlSendData>
              break;
 800a0c2:	e004      	b.n	800a0ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fb5b 	bl	800a782 <USBD_CtlError>
              break;
 800a0cc:	bf00      	nop
          }
          break;
 800a0ce:	e004      	b.n	800a0da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fb55 	bl	800a782 <USBD_CtlError>
          break;
 800a0d8:	bf00      	nop
      }
      break;
 800a0da:	e005      	b.n	800a0e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fb4f 	bl	800a782 <USBD_CtlError>
      break;
 800a0e4:	e000      	b.n	800a0e8 <USBD_StdEPReq+0x330>
      break;
 800a0e6:	bf00      	nop
  }

  return ret;
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0fe:	2300      	movs	r3, #0
 800a100:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a102:	2300      	movs	r3, #0
 800a104:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a106:	2300      	movs	r3, #0
 800a108:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	885b      	ldrh	r3, [r3, #2]
 800a10e:	0a1b      	lsrs	r3, r3, #8
 800a110:	b29b      	uxth	r3, r3
 800a112:	3b01      	subs	r3, #1
 800a114:	2b06      	cmp	r3, #6
 800a116:	f200 8128 	bhi.w	800a36a <USBD_GetDescriptor+0x276>
 800a11a:	a201      	add	r2, pc, #4	; (adr r2, 800a120 <USBD_GetDescriptor+0x2c>)
 800a11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a120:	0800a13d 	.word	0x0800a13d
 800a124:	0800a155 	.word	0x0800a155
 800a128:	0800a195 	.word	0x0800a195
 800a12c:	0800a36b 	.word	0x0800a36b
 800a130:	0800a36b 	.word	0x0800a36b
 800a134:	0800a30b 	.word	0x0800a30b
 800a138:	0800a337 	.word	0x0800a337
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	7c12      	ldrb	r2, [r2, #16]
 800a148:	f107 0108 	add.w	r1, r7, #8
 800a14c:	4610      	mov	r0, r2
 800a14e:	4798      	blx	r3
 800a150:	60f8      	str	r0, [r7, #12]
      break;
 800a152:	e112      	b.n	800a37a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	7c1b      	ldrb	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10d      	bne.n	800a178 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a164:	f107 0208 	add.w	r2, r7, #8
 800a168:	4610      	mov	r0, r2
 800a16a:	4798      	blx	r3
 800a16c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3301      	adds	r3, #1
 800a172:	2202      	movs	r2, #2
 800a174:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a176:	e100      	b.n	800a37a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a180:	f107 0208 	add.w	r2, r7, #8
 800a184:	4610      	mov	r0, r2
 800a186:	4798      	blx	r3
 800a188:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3301      	adds	r3, #1
 800a18e:	2202      	movs	r2, #2
 800a190:	701a      	strb	r2, [r3, #0]
      break;
 800a192:	e0f2      	b.n	800a37a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	885b      	ldrh	r3, [r3, #2]
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b05      	cmp	r3, #5
 800a19c:	f200 80ac 	bhi.w	800a2f8 <USBD_GetDescriptor+0x204>
 800a1a0:	a201      	add	r2, pc, #4	; (adr r2, 800a1a8 <USBD_GetDescriptor+0xb4>)
 800a1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a6:	bf00      	nop
 800a1a8:	0800a1c1 	.word	0x0800a1c1
 800a1ac:	0800a1f5 	.word	0x0800a1f5
 800a1b0:	0800a229 	.word	0x0800a229
 800a1b4:	0800a25d 	.word	0x0800a25d
 800a1b8:	0800a291 	.word	0x0800a291
 800a1bc:	0800a2c5 	.word	0x0800a2c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	7c12      	ldrb	r2, [r2, #16]
 800a1d8:	f107 0108 	add.w	r1, r7, #8
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
 800a1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1e2:	e091      	b.n	800a308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 facb 	bl	800a782 <USBD_CtlError>
            err++;
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1f2:	e089      	b.n	800a308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00b      	beq.n	800a218 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	7c12      	ldrb	r2, [r2, #16]
 800a20c:	f107 0108 	add.w	r1, r7, #8
 800a210:	4610      	mov	r0, r2
 800a212:	4798      	blx	r3
 800a214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a216:	e077      	b.n	800a308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fab1 	bl	800a782 <USBD_CtlError>
            err++;
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	3301      	adds	r3, #1
 800a224:	72fb      	strb	r3, [r7, #11]
          break;
 800a226:	e06f      	b.n	800a308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00b      	beq.n	800a24c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	7c12      	ldrb	r2, [r2, #16]
 800a240:	f107 0108 	add.w	r1, r7, #8
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3
 800a248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a24a:	e05d      	b.n	800a308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa97 	bl	800a782 <USBD_CtlError>
            err++;
 800a254:	7afb      	ldrb	r3, [r7, #11]
 800a256:	3301      	adds	r3, #1
 800a258:	72fb      	strb	r3, [r7, #11]
          break;
 800a25a:	e055      	b.n	800a308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	7c12      	ldrb	r2, [r2, #16]
 800a274:	f107 0108 	add.w	r1, r7, #8
 800a278:	4610      	mov	r0, r2
 800a27a:	4798      	blx	r3
 800a27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a27e:	e043      	b.n	800a308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fa7d 	bl	800a782 <USBD_CtlError>
            err++;
 800a288:	7afb      	ldrb	r3, [r7, #11]
 800a28a:	3301      	adds	r3, #1
 800a28c:	72fb      	strb	r3, [r7, #11]
          break;
 800a28e:	e03b      	b.n	800a308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00b      	beq.n	800a2b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	7c12      	ldrb	r2, [r2, #16]
 800a2a8:	f107 0108 	add.w	r1, r7, #8
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	4798      	blx	r3
 800a2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2b2:	e029      	b.n	800a308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa63 	bl	800a782 <USBD_CtlError>
            err++;
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2c2:	e021      	b.n	800a308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00b      	beq.n	800a2e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	7c12      	ldrb	r2, [r2, #16]
 800a2dc:	f107 0108 	add.w	r1, r7, #8
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	4798      	blx	r3
 800a2e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2e6:	e00f      	b.n	800a308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fa49 	bl	800a782 <USBD_CtlError>
            err++;
 800a2f0:	7afb      	ldrb	r3, [r7, #11]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2f6:	e007      	b.n	800a308 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fa41 	bl	800a782 <USBD_CtlError>
          err++;
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	3301      	adds	r3, #1
 800a304:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a306:	bf00      	nop
      }
      break;
 800a308:	e037      	b.n	800a37a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	7c1b      	ldrb	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d109      	bne.n	800a326 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31a:	f107 0208 	add.w	r2, r7, #8
 800a31e:	4610      	mov	r0, r2
 800a320:	4798      	blx	r3
 800a322:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a324:	e029      	b.n	800a37a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa2a 	bl	800a782 <USBD_CtlError>
        err++;
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	3301      	adds	r3, #1
 800a332:	72fb      	strb	r3, [r7, #11]
      break;
 800a334:	e021      	b.n	800a37a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	7c1b      	ldrb	r3, [r3, #16]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10d      	bne.n	800a35a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a346:	f107 0208 	add.w	r2, r7, #8
 800a34a:	4610      	mov	r0, r2
 800a34c:	4798      	blx	r3
 800a34e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	3301      	adds	r3, #1
 800a354:	2207      	movs	r2, #7
 800a356:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a358:	e00f      	b.n	800a37a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fa10 	bl	800a782 <USBD_CtlError>
        err++;
 800a362:	7afb      	ldrb	r3, [r7, #11]
 800a364:	3301      	adds	r3, #1
 800a366:	72fb      	strb	r3, [r7, #11]
      break;
 800a368:	e007      	b.n	800a37a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fa08 	bl	800a782 <USBD_CtlError>
      err++;
 800a372:	7afb      	ldrb	r3, [r7, #11]
 800a374:	3301      	adds	r3, #1
 800a376:	72fb      	strb	r3, [r7, #11]
      break;
 800a378:	bf00      	nop
  }

  if (err != 0U)
 800a37a:	7afb      	ldrb	r3, [r7, #11]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d11e      	bne.n	800a3be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	88db      	ldrh	r3, [r3, #6]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d016      	beq.n	800a3b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a388:	893b      	ldrh	r3, [r7, #8]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00e      	beq.n	800a3ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	88da      	ldrh	r2, [r3, #6]
 800a392:	893b      	ldrh	r3, [r7, #8]
 800a394:	4293      	cmp	r3, r2
 800a396:	bf28      	it	cs
 800a398:	4613      	movcs	r3, r2
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a39e:	893b      	ldrh	r3, [r7, #8]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	68f9      	ldr	r1, [r7, #12]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fa5d 	bl	800a864 <USBD_CtlSendData>
 800a3aa:	e009      	b.n	800a3c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f9e7 	bl	800a782 <USBD_CtlError>
 800a3b4:	e004      	b.n	800a3c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 faae 	bl	800a918 <USBD_CtlSendStatus>
 800a3bc:	e000      	b.n	800a3c0 <USBD_GetDescriptor+0x2cc>
    return;
 800a3be:	bf00      	nop
  }
}
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop

0800a3c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	889b      	ldrh	r3, [r3, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d131      	bne.n	800a43e <USBD_SetAddress+0x76>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	88db      	ldrh	r3, [r3, #6]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d12d      	bne.n	800a43e <USBD_SetAddress+0x76>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	885b      	ldrh	r3, [r3, #2]
 800a3e6:	2b7f      	cmp	r3, #127	; 0x7f
 800a3e8:	d829      	bhi.n	800a43e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	885b      	ldrh	r3, [r3, #2]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d104      	bne.n	800a40c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f9bc 	bl	800a782 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a40a:	e01d      	b.n	800a448 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	7bfa      	ldrb	r2, [r7, #15]
 800a410:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fefb 	bl	800b214 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 fa7a 	bl	800a918 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d004      	beq.n	800a434 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2202      	movs	r2, #2
 800a42e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a432:	e009      	b.n	800a448 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43c:	e004      	b.n	800a448 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f99e 	bl	800a782 <USBD_CtlError>
  }
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	885b      	ldrh	r3, [r3, #2]
 800a462:	b2da      	uxtb	r2, r3
 800a464:	4b4e      	ldr	r3, [pc, #312]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a466:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a468:	4b4d      	ldr	r3, [pc, #308]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d905      	bls.n	800a47c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f985 	bl	800a782 <USBD_CtlError>
    return USBD_FAIL;
 800a478:	2303      	movs	r3, #3
 800a47a:	e08c      	b.n	800a596 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b02      	cmp	r3, #2
 800a486:	d002      	beq.n	800a48e <USBD_SetConfig+0x3e>
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d029      	beq.n	800a4e0 <USBD_SetConfig+0x90>
 800a48c:	e075      	b.n	800a57a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a48e:	4b44      	ldr	r3, [pc, #272]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d020      	beq.n	800a4d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a496:	4b42      	ldr	r3, [pc, #264]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4a0:	4b3f      	ldr	r3, [pc, #252]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7fe ffe7 	bl	800947a <USBD_SetClassConfig>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d008      	beq.n	800a4c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f962 	bl	800a782 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4c6:	e065      	b.n	800a594 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fa25 	bl	800a918 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a4d6:	e05d      	b.n	800a594 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fa1d 	bl	800a918 <USBD_CtlSendStatus>
      break;
 800a4de:	e059      	b.n	800a594 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a4e0:	4b2f      	ldr	r3, [pc, #188]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d112      	bne.n	800a50e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a4f0:	4b2b      	ldr	r3, [pc, #172]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4fa:	4b29      	ldr	r3, [pc, #164]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7fe ffd6 	bl	80094b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa06 	bl	800a918 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a50c:	e042      	b.n	800a594 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a50e:	4b24      	ldr	r3, [pc, #144]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d02a      	beq.n	800a572 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7fe ffc4 	bl	80094b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a52a:	4b1d      	ldr	r3, [pc, #116]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	461a      	mov	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a534:	4b1a      	ldr	r3, [pc, #104]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7fe ff9d 	bl	800947a <USBD_SetClassConfig>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00f      	beq.n	800a56a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f918 	bl	800a782 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7fe ffa9 	bl	80094b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a568:	e014      	b.n	800a594 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f9d4 	bl	800a918 <USBD_CtlSendStatus>
      break;
 800a570:	e010      	b.n	800a594 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f9d0 	bl	800a918 <USBD_CtlSendStatus>
      break;
 800a578:	e00c      	b.n	800a594 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f900 	bl	800a782 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a582:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <USBD_SetConfig+0x150>)
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7fe ff92 	bl	80094b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a58e:	2303      	movs	r3, #3
 800a590:	73fb      	strb	r3, [r7, #15]
      break;
 800a592:	bf00      	nop
  }

  return ret;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	200005b0 	.word	0x200005b0

0800a5a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	88db      	ldrh	r3, [r3, #6]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d004      	beq.n	800a5c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f8e2 	bl	800a782 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5be:	e023      	b.n	800a608 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	dc02      	bgt.n	800a5d2 <USBD_GetConfig+0x2e>
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	dc03      	bgt.n	800a5d8 <USBD_GetConfig+0x34>
 800a5d0:	e015      	b.n	800a5fe <USBD_GetConfig+0x5a>
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	d00b      	beq.n	800a5ee <USBD_GetConfig+0x4a>
 800a5d6:	e012      	b.n	800a5fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f93c 	bl	800a864 <USBD_CtlSendData>
        break;
 800a5ec:	e00c      	b.n	800a608 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f934 	bl	800a864 <USBD_CtlSendData>
        break;
 800a5fc:	e004      	b.n	800a608 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f8be 	bl	800a782 <USBD_CtlError>
        break;
 800a606:	bf00      	nop
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a620:	b2db      	uxtb	r3, r3
 800a622:	3b01      	subs	r3, #1
 800a624:	2b02      	cmp	r3, #2
 800a626:	d81e      	bhi.n	800a666 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	88db      	ldrh	r3, [r3, #6]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d004      	beq.n	800a63a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f8a5 	bl	800a782 <USBD_CtlError>
        break;
 800a638:	e01a      	b.n	800a670 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	f043 0202 	orr.w	r2, r3, #2
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	330c      	adds	r3, #12
 800a65a:	2202      	movs	r2, #2
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f900 	bl	800a864 <USBD_CtlSendData>
      break;
 800a664:	e004      	b.n	800a670 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f88a 	bl	800a782 <USBD_CtlError>
      break;
 800a66e:	bf00      	nop
  }
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	885b      	ldrh	r3, [r3, #2]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d107      	bne.n	800a69a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f940 	bl	800a918 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a698:	e013      	b.n	800a6c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	885b      	ldrh	r3, [r3, #2]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d10b      	bne.n	800a6ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	889b      	ldrh	r3, [r3, #4]
 800a6a6:	0a1b      	lsrs	r3, r3, #8
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f930 	bl	800a918 <USBD_CtlSendStatus>
}
 800a6b8:	e003      	b.n	800a6c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f860 	bl	800a782 <USBD_CtlError>
}
 800a6c2:	bf00      	nop
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d80b      	bhi.n	800a6fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d10c      	bne.n	800a704 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f910 	bl	800a918 <USBD_CtlSendStatus>
      }
      break;
 800a6f8:	e004      	b.n	800a704 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f840 	bl	800a782 <USBD_CtlError>
      break;
 800a702:	e000      	b.n	800a706 <USBD_ClrFeature+0x3c>
      break;
 800a704:	bf00      	nop
  }
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	781a      	ldrb	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3301      	adds	r3, #1
 800a728:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	3301      	adds	r3, #1
 800a736:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f7ff fa41 	bl	8009bc0 <SWAPBYTE>
 800a73e:	4603      	mov	r3, r0
 800a740:	461a      	mov	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3301      	adds	r3, #1
 800a74a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3301      	adds	r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7ff fa34 	bl	8009bc0 <SWAPBYTE>
 800a758:	4603      	mov	r3, r0
 800a75a:	461a      	mov	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3301      	adds	r3, #1
 800a76a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff fa27 	bl	8009bc0 <SWAPBYTE>
 800a772:	4603      	mov	r3, r0
 800a774:	461a      	mov	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	80da      	strh	r2, [r3, #6]
}
 800a77a:	bf00      	nop
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a78c:	2180      	movs	r1, #128	; 0x80
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fcd6 	bl	800b140 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a794:	2100      	movs	r1, #0
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fcd2 	bl	800b140 <USBD_LL_StallEP>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d036      	beq.n	800a828 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7be:	6938      	ldr	r0, [r7, #16]
 800a7c0:	f000 f836 	bl	800a830 <USBD_GetLen>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	005b      	lsls	r3, r3, #1
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	7812      	ldrb	r2, [r2, #0]
 800a7dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	2203      	movs	r2, #3
 800a7ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a7f4:	e013      	b.n	800a81e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	7812      	ldrb	r2, [r2, #0]
 800a800:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	3301      	adds	r3, #1
 800a806:	613b      	str	r3, [r7, #16]
    idx++;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	3301      	adds	r3, #1
 800a80c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	4413      	add	r3, r2
 800a814:	2200      	movs	r2, #0
 800a816:	701a      	strb	r2, [r3, #0]
    idx++;
 800a818:	7dfb      	ldrb	r3, [r7, #23]
 800a81a:	3301      	adds	r3, #1
 800a81c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e7      	bne.n	800a7f6 <USBD_GetString+0x52>
 800a826:	e000      	b.n	800a82a <USBD_GetString+0x86>
    return;
 800a828:	bf00      	nop
  }
}
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a840:	e005      	b.n	800a84e <USBD_GetLen+0x1e>
  {
    len++;
 800a842:	7bfb      	ldrb	r3, [r7, #15]
 800a844:	3301      	adds	r3, #1
 800a846:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	3301      	adds	r3, #1
 800a84c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f5      	bne.n	800a842 <USBD_GetLen+0x12>
  }

  return len;
 800a856:	7bfb      	ldrb	r3, [r7, #15]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2202      	movs	r2, #2
 800a874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	2100      	movs	r1, #0
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 fce1 	bl	800b252 <USBD_LL_Transmit>

  return USBD_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b084      	sub	sp, #16
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	60f8      	str	r0, [r7, #12]
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 fcd0 	bl	800b252 <USBD_LL_Transmit>

  return USBD_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2203      	movs	r2, #3
 800a8cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f000 fcd4 	bl	800b294 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	2100      	movs	r1, #0
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 fcc3 	bl	800b294 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2204      	movs	r2, #4
 800a924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a928:	2300      	movs	r3, #0
 800a92a:	2200      	movs	r2, #0
 800a92c:	2100      	movs	r1, #0
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fc8f 	bl	800b252 <USBD_LL_Transmit>

  return USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2205      	movs	r2, #5
 800a94a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a94e:	2300      	movs	r3, #0
 800a950:	2200      	movs	r2, #0
 800a952:	2100      	movs	r1, #0
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fc9d 	bl	800b294 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a968:	2200      	movs	r2, #0
 800a96a:	4912      	ldr	r1, [pc, #72]	; (800a9b4 <MX_USB_DEVICE_Init+0x50>)
 800a96c:	4812      	ldr	r0, [pc, #72]	; (800a9b8 <MX_USB_DEVICE_Init+0x54>)
 800a96e:	f7fe fd07 	bl	8009380 <USBD_Init>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a978:	f7f7 fea4 	bl	80026c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a97c:	490f      	ldr	r1, [pc, #60]	; (800a9bc <MX_USB_DEVICE_Init+0x58>)
 800a97e:	480e      	ldr	r0, [pc, #56]	; (800a9b8 <MX_USB_DEVICE_Init+0x54>)
 800a980:	f7fe fd2e 	bl	80093e0 <USBD_RegisterClass>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a98a:	f7f7 fe9b 	bl	80026c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a98e:	490c      	ldr	r1, [pc, #48]	; (800a9c0 <MX_USB_DEVICE_Init+0x5c>)
 800a990:	4809      	ldr	r0, [pc, #36]	; (800a9b8 <MX_USB_DEVICE_Init+0x54>)
 800a992:	f7fe fc1f 	bl	80091d4 <USBD_CDC_RegisterInterface>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a99c:	f7f7 fe92 	bl	80026c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9a0:	4805      	ldr	r0, [pc, #20]	; (800a9b8 <MX_USB_DEVICE_Init+0x54>)
 800a9a2:	f7fe fd53 	bl	800944c <USBD_Start>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a9ac:	f7f7 fe8a 	bl	80026c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9b0:	bf00      	nop
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	200000b0 	.word	0x200000b0
 800a9b8:	200005b4 	.word	0x200005b4
 800a9bc:	2000001c 	.word	0x2000001c
 800a9c0:	2000009c 	.word	0x2000009c

0800a9c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4905      	ldr	r1, [pc, #20]	; (800a9e0 <CDC_Init_FS+0x1c>)
 800a9cc:	4805      	ldr	r0, [pc, #20]	; (800a9e4 <CDC_Init_FS+0x20>)
 800a9ce:	f7fe fc1b 	bl	8009208 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9d2:	4905      	ldr	r1, [pc, #20]	; (800a9e8 <CDC_Init_FS+0x24>)
 800a9d4:	4803      	ldr	r0, [pc, #12]	; (800a9e4 <CDC_Init_FS+0x20>)
 800a9d6:	f7fe fc39 	bl	800924c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	20000c90 	.word	0x20000c90
 800a9e4:	200005b4 	.word	0x200005b4
 800a9e8:	20000890 	.word	0x20000890

0800a9ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	4603      	mov	r3, r0
 800aa04:	6039      	str	r1, [r7, #0]
 800aa06:	71fb      	strb	r3, [r7, #7]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa0c:	79fb      	ldrb	r3, [r7, #7]
 800aa0e:	2b23      	cmp	r3, #35	; 0x23
 800aa10:	d84a      	bhi.n	800aaa8 <CDC_Control_FS+0xac>
 800aa12:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <CDC_Control_FS+0x1c>)
 800aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa18:	0800aaa9 	.word	0x0800aaa9
 800aa1c:	0800aaa9 	.word	0x0800aaa9
 800aa20:	0800aaa9 	.word	0x0800aaa9
 800aa24:	0800aaa9 	.word	0x0800aaa9
 800aa28:	0800aaa9 	.word	0x0800aaa9
 800aa2c:	0800aaa9 	.word	0x0800aaa9
 800aa30:	0800aaa9 	.word	0x0800aaa9
 800aa34:	0800aaa9 	.word	0x0800aaa9
 800aa38:	0800aaa9 	.word	0x0800aaa9
 800aa3c:	0800aaa9 	.word	0x0800aaa9
 800aa40:	0800aaa9 	.word	0x0800aaa9
 800aa44:	0800aaa9 	.word	0x0800aaa9
 800aa48:	0800aaa9 	.word	0x0800aaa9
 800aa4c:	0800aaa9 	.word	0x0800aaa9
 800aa50:	0800aaa9 	.word	0x0800aaa9
 800aa54:	0800aaa9 	.word	0x0800aaa9
 800aa58:	0800aaa9 	.word	0x0800aaa9
 800aa5c:	0800aaa9 	.word	0x0800aaa9
 800aa60:	0800aaa9 	.word	0x0800aaa9
 800aa64:	0800aaa9 	.word	0x0800aaa9
 800aa68:	0800aaa9 	.word	0x0800aaa9
 800aa6c:	0800aaa9 	.word	0x0800aaa9
 800aa70:	0800aaa9 	.word	0x0800aaa9
 800aa74:	0800aaa9 	.word	0x0800aaa9
 800aa78:	0800aaa9 	.word	0x0800aaa9
 800aa7c:	0800aaa9 	.word	0x0800aaa9
 800aa80:	0800aaa9 	.word	0x0800aaa9
 800aa84:	0800aaa9 	.word	0x0800aaa9
 800aa88:	0800aaa9 	.word	0x0800aaa9
 800aa8c:	0800aaa9 	.word	0x0800aaa9
 800aa90:	0800aaa9 	.word	0x0800aaa9
 800aa94:	0800aaa9 	.word	0x0800aaa9
 800aa98:	0800aaa9 	.word	0x0800aaa9
 800aa9c:	0800aaa9 	.word	0x0800aaa9
 800aaa0:	0800aaa9 	.word	0x0800aaa9
 800aaa4:	0800aaa9 	.word	0x0800aaa9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aaa8:	bf00      	nop
  }

  return (USBD_OK);
 800aaaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	4805      	ldr	r0, [pc, #20]	; (800aadc <CDC_Receive_FS+0x24>)
 800aac6:	f7fe fbc1 	bl	800924c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aaca:	4804      	ldr	r0, [pc, #16]	; (800aadc <CDC_Receive_FS+0x24>)
 800aacc:	f7fe fc22 	bl	8009314 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aad0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	200005b4 	.word	0x200005b4

0800aae0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	460b      	mov	r3, r1
 800aaea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aaf0:	4b0d      	ldr	r3, [pc, #52]	; (800ab28 <CDC_Transmit_FS+0x48>)
 800aaf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e00b      	b.n	800ab1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab06:	887b      	ldrh	r3, [r7, #2]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	4806      	ldr	r0, [pc, #24]	; (800ab28 <CDC_Transmit_FS+0x48>)
 800ab0e:	f7fe fb7b 	bl	8009208 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab12:	4805      	ldr	r0, [pc, #20]	; (800ab28 <CDC_Transmit_FS+0x48>)
 800ab14:	f7fe fbb8 	bl	8009288 <USBD_CDC_TransmitPacket>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	200005b4 	.word	0x200005b4

0800ab2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	4613      	mov	r3, r2
 800ab38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	371c      	adds	r7, #28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
	...

0800ab50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2212      	movs	r2, #18
 800ab60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab62:	4b03      	ldr	r3, [pc, #12]	; (800ab70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	200000cc 	.word	0x200000cc

0800ab74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	6039      	str	r1, [r7, #0]
 800ab7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2204      	movs	r2, #4
 800ab84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab86:	4b03      	ldr	r3, [pc, #12]	; (800ab94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	200000e0 	.word	0x200000e0

0800ab98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	6039      	str	r1, [r7, #0]
 800aba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d105      	bne.n	800abb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	4907      	ldr	r1, [pc, #28]	; (800abcc <USBD_FS_ProductStrDescriptor+0x34>)
 800abae:	4808      	ldr	r0, [pc, #32]	; (800abd0 <USBD_FS_ProductStrDescriptor+0x38>)
 800abb0:	f7ff fdf8 	bl	800a7a4 <USBD_GetString>
 800abb4:	e004      	b.n	800abc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	4904      	ldr	r1, [pc, #16]	; (800abcc <USBD_FS_ProductStrDescriptor+0x34>)
 800abba:	4805      	ldr	r0, [pc, #20]	; (800abd0 <USBD_FS_ProductStrDescriptor+0x38>)
 800abbc:	f7ff fdf2 	bl	800a7a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abc0:	4b02      	ldr	r3, [pc, #8]	; (800abcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20001090 	.word	0x20001090
 800abd0:	0800c290 	.word	0x0800c290

0800abd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	6039      	str	r1, [r7, #0]
 800abde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	4904      	ldr	r1, [pc, #16]	; (800abf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800abe4:	4804      	ldr	r0, [pc, #16]	; (800abf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800abe6:	f7ff fddd 	bl	800a7a4 <USBD_GetString>
  return USBD_StrDesc;
 800abea:	4b02      	ldr	r3, [pc, #8]	; (800abf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	20001090 	.word	0x20001090
 800abf8:	0800c2a8 	.word	0x0800c2a8

0800abfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	4603      	mov	r3, r0
 800ac04:	6039      	str	r1, [r7, #0]
 800ac06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	221a      	movs	r2, #26
 800ac0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac0e:	f000 f843 	bl	800ac98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ac12:	4b02      	ldr	r3, [pc, #8]	; (800ac1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	200000e4 	.word	0x200000e4

0800ac20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	6039      	str	r1, [r7, #0]
 800ac2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d105      	bne.n	800ac3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	4907      	ldr	r1, [pc, #28]	; (800ac54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac36:	4808      	ldr	r0, [pc, #32]	; (800ac58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac38:	f7ff fdb4 	bl	800a7a4 <USBD_GetString>
 800ac3c:	e004      	b.n	800ac48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	4904      	ldr	r1, [pc, #16]	; (800ac54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac42:	4805      	ldr	r0, [pc, #20]	; (800ac58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac44:	f7ff fdae 	bl	800a7a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac48:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20001090 	.word	0x20001090
 800ac58:	0800c2bc 	.word	0x0800c2bc

0800ac5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	4603      	mov	r3, r0
 800ac64:	6039      	str	r1, [r7, #0]
 800ac66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac68:	79fb      	ldrb	r3, [r7, #7]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d105      	bne.n	800ac7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	4907      	ldr	r1, [pc, #28]	; (800ac90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac72:	4808      	ldr	r0, [pc, #32]	; (800ac94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac74:	f7ff fd96 	bl	800a7a4 <USBD_GetString>
 800ac78:	e004      	b.n	800ac84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	4904      	ldr	r1, [pc, #16]	; (800ac90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac7e:	4805      	ldr	r0, [pc, #20]	; (800ac94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac80:	f7ff fd90 	bl	800a7a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac84:	4b02      	ldr	r3, [pc, #8]	; (800ac90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20001090 	.word	0x20001090
 800ac94:	0800c2c8 	.word	0x0800c2c8

0800ac98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac9e:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <Get_SerialNum+0x44>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aca4:	4b0e      	ldr	r3, [pc, #56]	; (800ace0 <Get_SerialNum+0x48>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acaa:	4b0e      	ldr	r3, [pc, #56]	; (800ace4 <Get_SerialNum+0x4c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4413      	add	r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d009      	beq.n	800acd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acbe:	2208      	movs	r2, #8
 800acc0:	4909      	ldr	r1, [pc, #36]	; (800ace8 <Get_SerialNum+0x50>)
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 f814 	bl	800acf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acc8:	2204      	movs	r2, #4
 800acca:	4908      	ldr	r1, [pc, #32]	; (800acec <Get_SerialNum+0x54>)
 800accc:	68b8      	ldr	r0, [r7, #8]
 800acce:	f000 f80f 	bl	800acf0 <IntToUnicode>
  }
}
 800acd2:	bf00      	nop
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	1fff7a10 	.word	0x1fff7a10
 800ace0:	1fff7a14 	.word	0x1fff7a14
 800ace4:	1fff7a18 	.word	0x1fff7a18
 800ace8:	200000e6 	.word	0x200000e6
 800acec:	200000f6 	.word	0x200000f6

0800acf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	4613      	mov	r3, r2
 800acfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad02:	2300      	movs	r3, #0
 800ad04:	75fb      	strb	r3, [r7, #23]
 800ad06:	e027      	b.n	800ad58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	0f1b      	lsrs	r3, r3, #28
 800ad0c:	2b09      	cmp	r3, #9
 800ad0e:	d80b      	bhi.n	800ad28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	0f1b      	lsrs	r3, r3, #28
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	7dfb      	ldrb	r3, [r7, #23]
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	440b      	add	r3, r1
 800ad20:	3230      	adds	r2, #48	; 0x30
 800ad22:	b2d2      	uxtb	r2, r2
 800ad24:	701a      	strb	r2, [r3, #0]
 800ad26:	e00a      	b.n	800ad3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	0f1b      	lsrs	r3, r3, #28
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	7dfb      	ldrb	r3, [r7, #23]
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	4619      	mov	r1, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	440b      	add	r3, r1
 800ad38:	3237      	adds	r2, #55	; 0x37
 800ad3a:	b2d2      	uxtb	r2, r2
 800ad3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	011b      	lsls	r3, r3, #4
 800ad42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	3301      	adds	r3, #1
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	2200      	movs	r2, #0
 800ad50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	3301      	adds	r3, #1
 800ad56:	75fb      	strb	r3, [r7, #23]
 800ad58:	7dfa      	ldrb	r2, [r7, #23]
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d3d3      	bcc.n	800ad08 <IntToUnicode+0x18>
  }
}
 800ad60:	bf00      	nop
 800ad62:	bf00      	nop
 800ad64:	371c      	adds	r7, #28
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
	...

0800ad70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08a      	sub	sp, #40	; 0x28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad78:	f107 0314 	add.w	r3, r7, #20
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	605a      	str	r2, [r3, #4]
 800ad82:	609a      	str	r2, [r3, #8]
 800ad84:	60da      	str	r2, [r3, #12]
 800ad86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad90:	d13a      	bne.n	800ae08 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad92:	2300      	movs	r3, #0
 800ad94:	613b      	str	r3, [r7, #16]
 800ad96:	4b1e      	ldr	r3, [pc, #120]	; (800ae10 <HAL_PCD_MspInit+0xa0>)
 800ad98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad9a:	4a1d      	ldr	r2, [pc, #116]	; (800ae10 <HAL_PCD_MspInit+0xa0>)
 800ad9c:	f043 0301 	orr.w	r3, r3, #1
 800ada0:	6313      	str	r3, [r2, #48]	; 0x30
 800ada2:	4b1b      	ldr	r3, [pc, #108]	; (800ae10 <HAL_PCD_MspInit+0xa0>)
 800ada4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	613b      	str	r3, [r7, #16]
 800adac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800adae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800adb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adb4:	2302      	movs	r3, #2
 800adb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adb8:	2300      	movs	r3, #0
 800adba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adbc:	2303      	movs	r3, #3
 800adbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800adc0:	230a      	movs	r3, #10
 800adc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adc4:	f107 0314 	add.w	r3, r7, #20
 800adc8:	4619      	mov	r1, r3
 800adca:	4812      	ldr	r0, [pc, #72]	; (800ae14 <HAL_PCD_MspInit+0xa4>)
 800adcc:	f7f8 f84a 	bl	8002e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800add0:	4b0f      	ldr	r3, [pc, #60]	; (800ae10 <HAL_PCD_MspInit+0xa0>)
 800add2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add4:	4a0e      	ldr	r2, [pc, #56]	; (800ae10 <HAL_PCD_MspInit+0xa0>)
 800add6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adda:	6353      	str	r3, [r2, #52]	; 0x34
 800addc:	2300      	movs	r3, #0
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	4b0b      	ldr	r3, [pc, #44]	; (800ae10 <HAL_PCD_MspInit+0xa0>)
 800ade2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade4:	4a0a      	ldr	r2, [pc, #40]	; (800ae10 <HAL_PCD_MspInit+0xa0>)
 800ade6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800adea:	6453      	str	r3, [r2, #68]	; 0x44
 800adec:	4b08      	ldr	r3, [pc, #32]	; (800ae10 <HAL_PCD_MspInit+0xa0>)
 800adee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800adf8:	2200      	movs	r2, #0
 800adfa:	2100      	movs	r1, #0
 800adfc:	2043      	movs	r0, #67	; 0x43
 800adfe:	f7f7 ff68 	bl	8002cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ae02:	2043      	movs	r0, #67	; 0x43
 800ae04:	f7f7 ff81 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ae08:	bf00      	nop
 800ae0a:	3728      	adds	r7, #40	; 0x28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	40023800 	.word	0x40023800
 800ae14:	40020000 	.word	0x40020000

0800ae18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4610      	mov	r0, r2
 800ae30:	f7fe fb59 	bl	80094e6 <USBD_LL_SetupStage>
}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ae4e:	78fa      	ldrb	r2, [r7, #3]
 800ae50:	6879      	ldr	r1, [r7, #4]
 800ae52:	4613      	mov	r3, r2
 800ae54:	00db      	lsls	r3, r3, #3
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	440b      	add	r3, r1
 800ae5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	78fb      	ldrb	r3, [r7, #3]
 800ae64:	4619      	mov	r1, r3
 800ae66:	f7fe fb93 	bl	8009590 <USBD_LL_DataOutStage>
}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ae84:	78fa      	ldrb	r2, [r7, #3]
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	440b      	add	r3, r1
 800ae92:	334c      	adds	r3, #76	; 0x4c
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f7fe fc2c 	bl	80096f6 <USBD_LL_DataInStage>
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe fd60 	bl	800997a <USBD_LL_SOF>
}
 800aeba:	bf00      	nop
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aeca:	2301      	movs	r3, #1
 800aecc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d001      	beq.n	800aeda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aed6:	f7f7 fbf5 	bl	80026c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aee0:	7bfa      	ldrb	r2, [r7, #15]
 800aee2:	4611      	mov	r1, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fe fd0a 	bl	80098fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fe fcb2 	bl	800985a <USBD_LL_Reset>
}
 800aef6:	bf00      	nop
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe fd05 	bl	800991e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6812      	ldr	r2, [r2, #0]
 800af22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af26:	f043 0301 	orr.w	r3, r3, #1
 800af2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a1b      	ldr	r3, [r3, #32]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d005      	beq.n	800af40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af34:	4b04      	ldr	r3, [pc, #16]	; (800af48 <HAL_PCD_SuspendCallback+0x48>)
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	4a03      	ldr	r2, [pc, #12]	; (800af48 <HAL_PCD_SuspendCallback+0x48>)
 800af3a:	f043 0306 	orr.w	r3, r3, #6
 800af3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	e000ed00 	.word	0xe000ed00

0800af4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fe fcf5 	bl	800994a <USBD_LL_Resume>
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af7a:	78fa      	ldrb	r2, [r7, #3]
 800af7c:	4611      	mov	r1, r2
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fe fd4d 	bl	8009a1e <USBD_LL_IsoOUTIncomplete>
}
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af9e:	78fa      	ldrb	r2, [r7, #3]
 800afa0:	4611      	mov	r1, r2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fe fd09 	bl	80099ba <USBD_LL_IsoINIncomplete>
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fe fd5f 	bl	8009a82 <USBD_LL_DevConnected>
}
 800afc4:	bf00      	nop
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe fd5c 	bl	8009a98 <USBD_LL_DevDisconnected>
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d13c      	bne.n	800b072 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aff8:	4a20      	ldr	r2, [pc, #128]	; (800b07c <USBD_LL_Init+0x94>)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a1e      	ldr	r2, [pc, #120]	; (800b07c <USBD_LL_Init+0x94>)
 800b004:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b008:	4b1c      	ldr	r3, [pc, #112]	; (800b07c <USBD_LL_Init+0x94>)
 800b00a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b00e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b010:	4b1a      	ldr	r3, [pc, #104]	; (800b07c <USBD_LL_Init+0x94>)
 800b012:	2204      	movs	r2, #4
 800b014:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b016:	4b19      	ldr	r3, [pc, #100]	; (800b07c <USBD_LL_Init+0x94>)
 800b018:	2202      	movs	r2, #2
 800b01a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b01c:	4b17      	ldr	r3, [pc, #92]	; (800b07c <USBD_LL_Init+0x94>)
 800b01e:	2200      	movs	r2, #0
 800b020:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b022:	4b16      	ldr	r3, [pc, #88]	; (800b07c <USBD_LL_Init+0x94>)
 800b024:	2202      	movs	r2, #2
 800b026:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b028:	4b14      	ldr	r3, [pc, #80]	; (800b07c <USBD_LL_Init+0x94>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b02e:	4b13      	ldr	r3, [pc, #76]	; (800b07c <USBD_LL_Init+0x94>)
 800b030:	2200      	movs	r2, #0
 800b032:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b034:	4b11      	ldr	r3, [pc, #68]	; (800b07c <USBD_LL_Init+0x94>)
 800b036:	2200      	movs	r2, #0
 800b038:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b03a:	4b10      	ldr	r3, [pc, #64]	; (800b07c <USBD_LL_Init+0x94>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b040:	4b0e      	ldr	r3, [pc, #56]	; (800b07c <USBD_LL_Init+0x94>)
 800b042:	2200      	movs	r2, #0
 800b044:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b046:	480d      	ldr	r0, [pc, #52]	; (800b07c <USBD_LL_Init+0x94>)
 800b048:	f7f8 f8a9 	bl	800319e <HAL_PCD_Init>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b052:	f7f7 fb37 	bl	80026c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b056:	2180      	movs	r1, #128	; 0x80
 800b058:	4808      	ldr	r0, [pc, #32]	; (800b07c <USBD_LL_Init+0x94>)
 800b05a:	f7f9 fb00 	bl	800465e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b05e:	2240      	movs	r2, #64	; 0x40
 800b060:	2100      	movs	r1, #0
 800b062:	4806      	ldr	r0, [pc, #24]	; (800b07c <USBD_LL_Init+0x94>)
 800b064:	f7f9 fab4 	bl	80045d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b068:	2280      	movs	r2, #128	; 0x80
 800b06a:	2101      	movs	r1, #1
 800b06c:	4803      	ldr	r0, [pc, #12]	; (800b07c <USBD_LL_Init+0x94>)
 800b06e:	f7f9 faaf 	bl	80045d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	20001290 	.word	0x20001290

0800b080 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b088:	2300      	movs	r3, #0
 800b08a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b096:	4618      	mov	r0, r3
 800b098:	f7f8 f99e 	bl	80033d8 <HAL_PCD_Start>
 800b09c:	4603      	mov	r3, r0
 800b09e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 f942 	bl	800b32c <USBD_Get_USB_Status>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	4608      	mov	r0, r1
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	70fb      	strb	r3, [r7, #3]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70bb      	strb	r3, [r7, #2]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0de:	78bb      	ldrb	r3, [r7, #2]
 800b0e0:	883a      	ldrh	r2, [r7, #0]
 800b0e2:	78f9      	ldrb	r1, [r7, #3]
 800b0e4:	f7f8 fe6f 	bl	8003dc6 <HAL_PCD_EP_Open>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 f91c 	bl	800b32c <USBD_Get_USB_Status>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b11c:	78fa      	ldrb	r2, [r7, #3]
 800b11e:	4611      	mov	r1, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f7f8 feb8 	bl	8003e96 <HAL_PCD_EP_Close>
 800b126:	4603      	mov	r3, r0
 800b128:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 f8fd 	bl	800b32c <USBD_Get_USB_Status>
 800b132:	4603      	mov	r3, r0
 800b134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b136:	7bbb      	ldrb	r3, [r7, #14]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b15a:	78fa      	ldrb	r2, [r7, #3]
 800b15c:	4611      	mov	r1, r2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7f8 ff90 	bl	8004084 <HAL_PCD_EP_SetStall>
 800b164:	4603      	mov	r3, r0
 800b166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b168:	7bfb      	ldrb	r3, [r7, #15]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f8de 	bl	800b32c <USBD_Get_USB_Status>
 800b170:	4603      	mov	r3, r0
 800b172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b174:	7bbb      	ldrb	r3, [r7, #14]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b198:	78fa      	ldrb	r2, [r7, #3]
 800b19a:	4611      	mov	r1, r2
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7f8 ffd5 	bl	800414c <HAL_PCD_EP_ClrStall>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 f8bf 	bl	800b32c <USBD_Get_USB_Status>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da0b      	bge.n	800b1f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1d8:	78fb      	ldrb	r3, [r7, #3]
 800b1da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1de:	68f9      	ldr	r1, [r7, #12]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	440b      	add	r3, r1
 800b1ea:	333e      	adds	r3, #62	; 0x3e
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	e00b      	b.n	800b208 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1f6:	68f9      	ldr	r1, [r7, #12]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	00db      	lsls	r3, r3, #3
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	440b      	add	r3, r1
 800b202:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b206:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b22e:	78fa      	ldrb	r2, [r7, #3]
 800b230:	4611      	mov	r1, r2
 800b232:	4618      	mov	r0, r3
 800b234:	f7f8 fda2 	bl	8003d7c <HAL_PCD_SetAddress>
 800b238:	4603      	mov	r3, r0
 800b23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 f874 	bl	800b32c <USBD_Get_USB_Status>
 800b244:	4603      	mov	r3, r0
 800b246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b248:	7bbb      	ldrb	r3, [r7, #14]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b086      	sub	sp, #24
 800b256:	af00      	add	r7, sp, #0
 800b258:	60f8      	str	r0, [r7, #12]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	603b      	str	r3, [r7, #0]
 800b25e:	460b      	mov	r3, r1
 800b260:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b270:	7af9      	ldrb	r1, [r7, #11]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	f7f8 febb 	bl	8003ff0 <HAL_PCD_EP_Transmit>
 800b27a:	4603      	mov	r3, r0
 800b27c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	4618      	mov	r0, r3
 800b282:	f000 f853 	bl	800b32c <USBD_Get_USB_Status>
 800b286:	4603      	mov	r3, r0
 800b288:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b28a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3718      	adds	r7, #24
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	607a      	str	r2, [r7, #4]
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2b2:	7af9      	ldrb	r1, [r7, #11]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	f7f8 fe37 	bl	8003f2a <HAL_PCD_EP_Receive>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 f832 	bl	800b32c <USBD_Get_USB_Status>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3718      	adds	r7, #24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2e8:	78fa      	ldrb	r2, [r7, #3]
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7f8 fe67 	bl	8003fc0 <HAL_PCD_EP_GetRxCount>
 800b2f2:	4603      	mov	r3, r0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b304:	4b03      	ldr	r3, [pc, #12]	; (800b314 <USBD_static_malloc+0x18>)
}
 800b306:	4618      	mov	r0, r3
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	2000179c 	.word	0x2000179c

0800b318 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]

}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	4603      	mov	r3, r0
 800b334:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b33a:	79fb      	ldrb	r3, [r7, #7]
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d817      	bhi.n	800b370 <USBD_Get_USB_Status+0x44>
 800b340:	a201      	add	r2, pc, #4	; (adr r2, 800b348 <USBD_Get_USB_Status+0x1c>)
 800b342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b346:	bf00      	nop
 800b348:	0800b359 	.word	0x0800b359
 800b34c:	0800b35f 	.word	0x0800b35f
 800b350:	0800b365 	.word	0x0800b365
 800b354:	0800b36b 	.word	0x0800b36b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
    break;
 800b35c:	e00b      	b.n	800b376 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b35e:	2303      	movs	r3, #3
 800b360:	73fb      	strb	r3, [r7, #15]
    break;
 800b362:	e008      	b.n	800b376 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b364:	2301      	movs	r3, #1
 800b366:	73fb      	strb	r3, [r7, #15]
    break;
 800b368:	e005      	b.n	800b376 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b36a:	2303      	movs	r3, #3
 800b36c:	73fb      	strb	r3, [r7, #15]
    break;
 800b36e:	e002      	b.n	800b376 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b370:	2303      	movs	r3, #3
 800b372:	73fb      	strb	r3, [r7, #15]
    break;
 800b374:	bf00      	nop
  }
  return usb_status;
 800b376:	7bfb      	ldrb	r3, [r7, #15]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <__errno>:
 800b384:	4b01      	ldr	r3, [pc, #4]	; (800b38c <__errno+0x8>)
 800b386:	6818      	ldr	r0, [r3, #0]
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	20000100 	.word	0x20000100

0800b390 <__libc_init_array>:
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	4d0d      	ldr	r5, [pc, #52]	; (800b3c8 <__libc_init_array+0x38>)
 800b394:	4c0d      	ldr	r4, [pc, #52]	; (800b3cc <__libc_init_array+0x3c>)
 800b396:	1b64      	subs	r4, r4, r5
 800b398:	10a4      	asrs	r4, r4, #2
 800b39a:	2600      	movs	r6, #0
 800b39c:	42a6      	cmp	r6, r4
 800b39e:	d109      	bne.n	800b3b4 <__libc_init_array+0x24>
 800b3a0:	4d0b      	ldr	r5, [pc, #44]	; (800b3d0 <__libc_init_array+0x40>)
 800b3a2:	4c0c      	ldr	r4, [pc, #48]	; (800b3d4 <__libc_init_array+0x44>)
 800b3a4:	f000 ff66 	bl	800c274 <_init>
 800b3a8:	1b64      	subs	r4, r4, r5
 800b3aa:	10a4      	asrs	r4, r4, #2
 800b3ac:	2600      	movs	r6, #0
 800b3ae:	42a6      	cmp	r6, r4
 800b3b0:	d105      	bne.n	800b3be <__libc_init_array+0x2e>
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}
 800b3b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b8:	4798      	blx	r3
 800b3ba:	3601      	adds	r6, #1
 800b3bc:	e7ee      	b.n	800b39c <__libc_init_array+0xc>
 800b3be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3c2:	4798      	blx	r3
 800b3c4:	3601      	adds	r6, #1
 800b3c6:	e7f2      	b.n	800b3ae <__libc_init_array+0x1e>
 800b3c8:	0800c328 	.word	0x0800c328
 800b3cc:	0800c328 	.word	0x0800c328
 800b3d0:	0800c328 	.word	0x0800c328
 800b3d4:	0800c32c 	.word	0x0800c32c

0800b3d8 <memset>:
 800b3d8:	4402      	add	r2, r0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d100      	bne.n	800b3e2 <memset+0xa>
 800b3e0:	4770      	bx	lr
 800b3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3e6:	e7f9      	b.n	800b3dc <memset+0x4>

0800b3e8 <pow>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	ed2d 8b02 	vpush	{d8}
 800b3ee:	eeb0 8a40 	vmov.f32	s16, s0
 800b3f2:	eef0 8a60 	vmov.f32	s17, s1
 800b3f6:	ec55 4b11 	vmov	r4, r5, d1
 800b3fa:	f000 f891 	bl	800b520 <__ieee754_pow>
 800b3fe:	4622      	mov	r2, r4
 800b400:	462b      	mov	r3, r5
 800b402:	4620      	mov	r0, r4
 800b404:	4629      	mov	r1, r5
 800b406:	ec57 6b10 	vmov	r6, r7, d0
 800b40a:	f7f5 fb3b 	bl	8000a84 <__aeabi_dcmpun>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d13b      	bne.n	800b48a <pow+0xa2>
 800b412:	ec51 0b18 	vmov	r0, r1, d8
 800b416:	2200      	movs	r2, #0
 800b418:	2300      	movs	r3, #0
 800b41a:	f7f5 fb01 	bl	8000a20 <__aeabi_dcmpeq>
 800b41e:	b1b8      	cbz	r0, 800b450 <pow+0x68>
 800b420:	2200      	movs	r2, #0
 800b422:	2300      	movs	r3, #0
 800b424:	4620      	mov	r0, r4
 800b426:	4629      	mov	r1, r5
 800b428:	f7f5 fafa 	bl	8000a20 <__aeabi_dcmpeq>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d146      	bne.n	800b4be <pow+0xd6>
 800b430:	ec45 4b10 	vmov	d0, r4, r5
 800b434:	f000 fe8d 	bl	800c152 <finite>
 800b438:	b338      	cbz	r0, 800b48a <pow+0xa2>
 800b43a:	2200      	movs	r2, #0
 800b43c:	2300      	movs	r3, #0
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f5 faf7 	bl	8000a34 <__aeabi_dcmplt>
 800b446:	b300      	cbz	r0, 800b48a <pow+0xa2>
 800b448:	f7ff ff9c 	bl	800b384 <__errno>
 800b44c:	2322      	movs	r3, #34	; 0x22
 800b44e:	e01b      	b.n	800b488 <pow+0xa0>
 800b450:	ec47 6b10 	vmov	d0, r6, r7
 800b454:	f000 fe7d 	bl	800c152 <finite>
 800b458:	b9e0      	cbnz	r0, 800b494 <pow+0xac>
 800b45a:	eeb0 0a48 	vmov.f32	s0, s16
 800b45e:	eef0 0a68 	vmov.f32	s1, s17
 800b462:	f000 fe76 	bl	800c152 <finite>
 800b466:	b1a8      	cbz	r0, 800b494 <pow+0xac>
 800b468:	ec45 4b10 	vmov	d0, r4, r5
 800b46c:	f000 fe71 	bl	800c152 <finite>
 800b470:	b180      	cbz	r0, 800b494 <pow+0xac>
 800b472:	4632      	mov	r2, r6
 800b474:	463b      	mov	r3, r7
 800b476:	4630      	mov	r0, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	f7f5 fb03 	bl	8000a84 <__aeabi_dcmpun>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d0e2      	beq.n	800b448 <pow+0x60>
 800b482:	f7ff ff7f 	bl	800b384 <__errno>
 800b486:	2321      	movs	r3, #33	; 0x21
 800b488:	6003      	str	r3, [r0, #0]
 800b48a:	ecbd 8b02 	vpop	{d8}
 800b48e:	ec47 6b10 	vmov	d0, r6, r7
 800b492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b494:	2200      	movs	r2, #0
 800b496:	2300      	movs	r3, #0
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f5 fac0 	bl	8000a20 <__aeabi_dcmpeq>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d0f2      	beq.n	800b48a <pow+0xa2>
 800b4a4:	eeb0 0a48 	vmov.f32	s0, s16
 800b4a8:	eef0 0a68 	vmov.f32	s1, s17
 800b4ac:	f000 fe51 	bl	800c152 <finite>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d0ea      	beq.n	800b48a <pow+0xa2>
 800b4b4:	ec45 4b10 	vmov	d0, r4, r5
 800b4b8:	f000 fe4b 	bl	800c152 <finite>
 800b4bc:	e7c3      	b.n	800b446 <pow+0x5e>
 800b4be:	4f01      	ldr	r7, [pc, #4]	; (800b4c4 <pow+0xdc>)
 800b4c0:	2600      	movs	r6, #0
 800b4c2:	e7e2      	b.n	800b48a <pow+0xa2>
 800b4c4:	3ff00000 	.word	0x3ff00000

0800b4c8 <sqrt>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	ed2d 8b02 	vpush	{d8}
 800b4ce:	ec55 4b10 	vmov	r4, r5, d0
 800b4d2:	f000 fd53 	bl	800bf7c <__ieee754_sqrt>
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	462b      	mov	r3, r5
 800b4da:	4620      	mov	r0, r4
 800b4dc:	4629      	mov	r1, r5
 800b4de:	eeb0 8a40 	vmov.f32	s16, s0
 800b4e2:	eef0 8a60 	vmov.f32	s17, s1
 800b4e6:	f7f5 facd 	bl	8000a84 <__aeabi_dcmpun>
 800b4ea:	b990      	cbnz	r0, 800b512 <sqrt+0x4a>
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	f7f5 fa9e 	bl	8000a34 <__aeabi_dcmplt>
 800b4f8:	b158      	cbz	r0, 800b512 <sqrt+0x4a>
 800b4fa:	f7ff ff43 	bl	800b384 <__errno>
 800b4fe:	2321      	movs	r3, #33	; 0x21
 800b500:	6003      	str	r3, [r0, #0]
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	4610      	mov	r0, r2
 800b508:	4619      	mov	r1, r3
 800b50a:	f7f5 f94b 	bl	80007a4 <__aeabi_ddiv>
 800b50e:	ec41 0b18 	vmov	d8, r0, r1
 800b512:	eeb0 0a48 	vmov.f32	s0, s16
 800b516:	eef0 0a68 	vmov.f32	s1, s17
 800b51a:	ecbd 8b02 	vpop	{d8}
 800b51e:	bd38      	pop	{r3, r4, r5, pc}

0800b520 <__ieee754_pow>:
 800b520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	ed2d 8b06 	vpush	{d8-d10}
 800b528:	b089      	sub	sp, #36	; 0x24
 800b52a:	ed8d 1b00 	vstr	d1, [sp]
 800b52e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b532:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b536:	ea58 0102 	orrs.w	r1, r8, r2
 800b53a:	ec57 6b10 	vmov	r6, r7, d0
 800b53e:	d115      	bne.n	800b56c <__ieee754_pow+0x4c>
 800b540:	19b3      	adds	r3, r6, r6
 800b542:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b546:	4152      	adcs	r2, r2
 800b548:	4299      	cmp	r1, r3
 800b54a:	4b89      	ldr	r3, [pc, #548]	; (800b770 <__ieee754_pow+0x250>)
 800b54c:	4193      	sbcs	r3, r2
 800b54e:	f080 84d2 	bcs.w	800bef6 <__ieee754_pow+0x9d6>
 800b552:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	f7f4 fe43 	bl	80001e4 <__adddf3>
 800b55e:	ec41 0b10 	vmov	d0, r0, r1
 800b562:	b009      	add	sp, #36	; 0x24
 800b564:	ecbd 8b06 	vpop	{d8-d10}
 800b568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56c:	4b81      	ldr	r3, [pc, #516]	; (800b774 <__ieee754_pow+0x254>)
 800b56e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b572:	429c      	cmp	r4, r3
 800b574:	ee10 aa10 	vmov	sl, s0
 800b578:	463d      	mov	r5, r7
 800b57a:	dc06      	bgt.n	800b58a <__ieee754_pow+0x6a>
 800b57c:	d101      	bne.n	800b582 <__ieee754_pow+0x62>
 800b57e:	2e00      	cmp	r6, #0
 800b580:	d1e7      	bne.n	800b552 <__ieee754_pow+0x32>
 800b582:	4598      	cmp	r8, r3
 800b584:	dc01      	bgt.n	800b58a <__ieee754_pow+0x6a>
 800b586:	d10f      	bne.n	800b5a8 <__ieee754_pow+0x88>
 800b588:	b172      	cbz	r2, 800b5a8 <__ieee754_pow+0x88>
 800b58a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b58e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b592:	ea55 050a 	orrs.w	r5, r5, sl
 800b596:	d1dc      	bne.n	800b552 <__ieee754_pow+0x32>
 800b598:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b59c:	18db      	adds	r3, r3, r3
 800b59e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b5a2:	4152      	adcs	r2, r2
 800b5a4:	429d      	cmp	r5, r3
 800b5a6:	e7d0      	b.n	800b54a <__ieee754_pow+0x2a>
 800b5a8:	2d00      	cmp	r5, #0
 800b5aa:	da3b      	bge.n	800b624 <__ieee754_pow+0x104>
 800b5ac:	4b72      	ldr	r3, [pc, #456]	; (800b778 <__ieee754_pow+0x258>)
 800b5ae:	4598      	cmp	r8, r3
 800b5b0:	dc51      	bgt.n	800b656 <__ieee754_pow+0x136>
 800b5b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b5b6:	4598      	cmp	r8, r3
 800b5b8:	f340 84ac 	ble.w	800bf14 <__ieee754_pow+0x9f4>
 800b5bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b5c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5c4:	2b14      	cmp	r3, #20
 800b5c6:	dd0f      	ble.n	800b5e8 <__ieee754_pow+0xc8>
 800b5c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b5cc:	fa22 f103 	lsr.w	r1, r2, r3
 800b5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	f040 849d 	bne.w	800bf14 <__ieee754_pow+0x9f4>
 800b5da:	f001 0101 	and.w	r1, r1, #1
 800b5de:	f1c1 0302 	rsb	r3, r1, #2
 800b5e2:	9304      	str	r3, [sp, #16]
 800b5e4:	b182      	cbz	r2, 800b608 <__ieee754_pow+0xe8>
 800b5e6:	e05f      	b.n	800b6a8 <__ieee754_pow+0x188>
 800b5e8:	2a00      	cmp	r2, #0
 800b5ea:	d15b      	bne.n	800b6a4 <__ieee754_pow+0x184>
 800b5ec:	f1c3 0314 	rsb	r3, r3, #20
 800b5f0:	fa48 f103 	asr.w	r1, r8, r3
 800b5f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f8:	4543      	cmp	r3, r8
 800b5fa:	f040 8488 	bne.w	800bf0e <__ieee754_pow+0x9ee>
 800b5fe:	f001 0101 	and.w	r1, r1, #1
 800b602:	f1c1 0302 	rsb	r3, r1, #2
 800b606:	9304      	str	r3, [sp, #16]
 800b608:	4b5c      	ldr	r3, [pc, #368]	; (800b77c <__ieee754_pow+0x25c>)
 800b60a:	4598      	cmp	r8, r3
 800b60c:	d132      	bne.n	800b674 <__ieee754_pow+0x154>
 800b60e:	f1b9 0f00 	cmp.w	r9, #0
 800b612:	f280 8478 	bge.w	800bf06 <__ieee754_pow+0x9e6>
 800b616:	4959      	ldr	r1, [pc, #356]	; (800b77c <__ieee754_pow+0x25c>)
 800b618:	4632      	mov	r2, r6
 800b61a:	463b      	mov	r3, r7
 800b61c:	2000      	movs	r0, #0
 800b61e:	f7f5 f8c1 	bl	80007a4 <__aeabi_ddiv>
 800b622:	e79c      	b.n	800b55e <__ieee754_pow+0x3e>
 800b624:	2300      	movs	r3, #0
 800b626:	9304      	str	r3, [sp, #16]
 800b628:	2a00      	cmp	r2, #0
 800b62a:	d13d      	bne.n	800b6a8 <__ieee754_pow+0x188>
 800b62c:	4b51      	ldr	r3, [pc, #324]	; (800b774 <__ieee754_pow+0x254>)
 800b62e:	4598      	cmp	r8, r3
 800b630:	d1ea      	bne.n	800b608 <__ieee754_pow+0xe8>
 800b632:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b636:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b63a:	ea53 030a 	orrs.w	r3, r3, sl
 800b63e:	f000 845a 	beq.w	800bef6 <__ieee754_pow+0x9d6>
 800b642:	4b4f      	ldr	r3, [pc, #316]	; (800b780 <__ieee754_pow+0x260>)
 800b644:	429c      	cmp	r4, r3
 800b646:	dd08      	ble.n	800b65a <__ieee754_pow+0x13a>
 800b648:	f1b9 0f00 	cmp.w	r9, #0
 800b64c:	f2c0 8457 	blt.w	800befe <__ieee754_pow+0x9de>
 800b650:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b654:	e783      	b.n	800b55e <__ieee754_pow+0x3e>
 800b656:	2302      	movs	r3, #2
 800b658:	e7e5      	b.n	800b626 <__ieee754_pow+0x106>
 800b65a:	f1b9 0f00 	cmp.w	r9, #0
 800b65e:	f04f 0000 	mov.w	r0, #0
 800b662:	f04f 0100 	mov.w	r1, #0
 800b666:	f6bf af7a 	bge.w	800b55e <__ieee754_pow+0x3e>
 800b66a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b66e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b672:	e774      	b.n	800b55e <__ieee754_pow+0x3e>
 800b674:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b678:	d106      	bne.n	800b688 <__ieee754_pow+0x168>
 800b67a:	4632      	mov	r2, r6
 800b67c:	463b      	mov	r3, r7
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7f4 ff65 	bl	8000550 <__aeabi_dmul>
 800b686:	e76a      	b.n	800b55e <__ieee754_pow+0x3e>
 800b688:	4b3e      	ldr	r3, [pc, #248]	; (800b784 <__ieee754_pow+0x264>)
 800b68a:	4599      	cmp	r9, r3
 800b68c:	d10c      	bne.n	800b6a8 <__ieee754_pow+0x188>
 800b68e:	2d00      	cmp	r5, #0
 800b690:	db0a      	blt.n	800b6a8 <__ieee754_pow+0x188>
 800b692:	ec47 6b10 	vmov	d0, r6, r7
 800b696:	b009      	add	sp, #36	; 0x24
 800b698:	ecbd 8b06 	vpop	{d8-d10}
 800b69c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a0:	f000 bc6c 	b.w	800bf7c <__ieee754_sqrt>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9304      	str	r3, [sp, #16]
 800b6a8:	ec47 6b10 	vmov	d0, r6, r7
 800b6ac:	f000 fd48 	bl	800c140 <fabs>
 800b6b0:	ec51 0b10 	vmov	r0, r1, d0
 800b6b4:	f1ba 0f00 	cmp.w	sl, #0
 800b6b8:	d129      	bne.n	800b70e <__ieee754_pow+0x1ee>
 800b6ba:	b124      	cbz	r4, 800b6c6 <__ieee754_pow+0x1a6>
 800b6bc:	4b2f      	ldr	r3, [pc, #188]	; (800b77c <__ieee754_pow+0x25c>)
 800b6be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d123      	bne.n	800b70e <__ieee754_pow+0x1ee>
 800b6c6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ca:	da05      	bge.n	800b6d8 <__ieee754_pow+0x1b8>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	492a      	ldr	r1, [pc, #168]	; (800b77c <__ieee754_pow+0x25c>)
 800b6d4:	f7f5 f866 	bl	80007a4 <__aeabi_ddiv>
 800b6d8:	2d00      	cmp	r5, #0
 800b6da:	f6bf af40 	bge.w	800b55e <__ieee754_pow+0x3e>
 800b6de:	9b04      	ldr	r3, [sp, #16]
 800b6e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b6e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b6e8:	4323      	orrs	r3, r4
 800b6ea:	d108      	bne.n	800b6fe <__ieee754_pow+0x1de>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	f7f4 fd74 	bl	80001e0 <__aeabi_dsub>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	e78f      	b.n	800b61e <__ieee754_pow+0xfe>
 800b6fe:	9b04      	ldr	r3, [sp, #16]
 800b700:	2b01      	cmp	r3, #1
 800b702:	f47f af2c 	bne.w	800b55e <__ieee754_pow+0x3e>
 800b706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b70a:	4619      	mov	r1, r3
 800b70c:	e727      	b.n	800b55e <__ieee754_pow+0x3e>
 800b70e:	0feb      	lsrs	r3, r5, #31
 800b710:	3b01      	subs	r3, #1
 800b712:	9306      	str	r3, [sp, #24]
 800b714:	9a06      	ldr	r2, [sp, #24]
 800b716:	9b04      	ldr	r3, [sp, #16]
 800b718:	4313      	orrs	r3, r2
 800b71a:	d102      	bne.n	800b722 <__ieee754_pow+0x202>
 800b71c:	4632      	mov	r2, r6
 800b71e:	463b      	mov	r3, r7
 800b720:	e7e6      	b.n	800b6f0 <__ieee754_pow+0x1d0>
 800b722:	4b19      	ldr	r3, [pc, #100]	; (800b788 <__ieee754_pow+0x268>)
 800b724:	4598      	cmp	r8, r3
 800b726:	f340 80fb 	ble.w	800b920 <__ieee754_pow+0x400>
 800b72a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b72e:	4598      	cmp	r8, r3
 800b730:	4b13      	ldr	r3, [pc, #76]	; (800b780 <__ieee754_pow+0x260>)
 800b732:	dd0c      	ble.n	800b74e <__ieee754_pow+0x22e>
 800b734:	429c      	cmp	r4, r3
 800b736:	dc0f      	bgt.n	800b758 <__ieee754_pow+0x238>
 800b738:	f1b9 0f00 	cmp.w	r9, #0
 800b73c:	da0f      	bge.n	800b75e <__ieee754_pow+0x23e>
 800b73e:	2000      	movs	r0, #0
 800b740:	b009      	add	sp, #36	; 0x24
 800b742:	ecbd 8b06 	vpop	{d8-d10}
 800b746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74a:	f000 bcf0 	b.w	800c12e <__math_oflow>
 800b74e:	429c      	cmp	r4, r3
 800b750:	dbf2      	blt.n	800b738 <__ieee754_pow+0x218>
 800b752:	4b0a      	ldr	r3, [pc, #40]	; (800b77c <__ieee754_pow+0x25c>)
 800b754:	429c      	cmp	r4, r3
 800b756:	dd19      	ble.n	800b78c <__ieee754_pow+0x26c>
 800b758:	f1b9 0f00 	cmp.w	r9, #0
 800b75c:	dcef      	bgt.n	800b73e <__ieee754_pow+0x21e>
 800b75e:	2000      	movs	r0, #0
 800b760:	b009      	add	sp, #36	; 0x24
 800b762:	ecbd 8b06 	vpop	{d8-d10}
 800b766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76a:	f000 bcd7 	b.w	800c11c <__math_uflow>
 800b76e:	bf00      	nop
 800b770:	fff00000 	.word	0xfff00000
 800b774:	7ff00000 	.word	0x7ff00000
 800b778:	433fffff 	.word	0x433fffff
 800b77c:	3ff00000 	.word	0x3ff00000
 800b780:	3fefffff 	.word	0x3fefffff
 800b784:	3fe00000 	.word	0x3fe00000
 800b788:	41e00000 	.word	0x41e00000
 800b78c:	4b60      	ldr	r3, [pc, #384]	; (800b910 <__ieee754_pow+0x3f0>)
 800b78e:	2200      	movs	r2, #0
 800b790:	f7f4 fd26 	bl	80001e0 <__aeabi_dsub>
 800b794:	a354      	add	r3, pc, #336	; (adr r3, 800b8e8 <__ieee754_pow+0x3c8>)
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	4604      	mov	r4, r0
 800b79c:	460d      	mov	r5, r1
 800b79e:	f7f4 fed7 	bl	8000550 <__aeabi_dmul>
 800b7a2:	a353      	add	r3, pc, #332	; (adr r3, 800b8f0 <__ieee754_pow+0x3d0>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	460f      	mov	r7, r1
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	f7f4 fece 	bl	8000550 <__aeabi_dmul>
 800b7b4:	4b57      	ldr	r3, [pc, #348]	; (800b914 <__ieee754_pow+0x3f4>)
 800b7b6:	4682      	mov	sl, r0
 800b7b8:	468b      	mov	fp, r1
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	4620      	mov	r0, r4
 800b7be:	4629      	mov	r1, r5
 800b7c0:	f7f4 fec6 	bl	8000550 <__aeabi_dmul>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	a14b      	add	r1, pc, #300	; (adr r1, 800b8f8 <__ieee754_pow+0x3d8>)
 800b7ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7ce:	f7f4 fd07 	bl	80001e0 <__aeabi_dsub>
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	f7f4 febb 	bl	8000550 <__aeabi_dmul>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	2000      	movs	r0, #0
 800b7e0:	494d      	ldr	r1, [pc, #308]	; (800b918 <__ieee754_pow+0x3f8>)
 800b7e2:	f7f4 fcfd 	bl	80001e0 <__aeabi_dsub>
 800b7e6:	4622      	mov	r2, r4
 800b7e8:	4680      	mov	r8, r0
 800b7ea:	4689      	mov	r9, r1
 800b7ec:	462b      	mov	r3, r5
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	f7f4 fead 	bl	8000550 <__aeabi_dmul>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f4 fea7 	bl	8000550 <__aeabi_dmul>
 800b802:	a33f      	add	r3, pc, #252	; (adr r3, 800b900 <__ieee754_pow+0x3e0>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f4 fea2 	bl	8000550 <__aeabi_dmul>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4650      	mov	r0, sl
 800b812:	4659      	mov	r1, fp
 800b814:	f7f4 fce4 	bl	80001e0 <__aeabi_dsub>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4680      	mov	r8, r0
 800b81e:	4689      	mov	r9, r1
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f7f4 fcde 	bl	80001e4 <__adddf3>
 800b828:	2000      	movs	r0, #0
 800b82a:	4632      	mov	r2, r6
 800b82c:	463b      	mov	r3, r7
 800b82e:	4604      	mov	r4, r0
 800b830:	460d      	mov	r5, r1
 800b832:	f7f4 fcd5 	bl	80001e0 <__aeabi_dsub>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	4640      	mov	r0, r8
 800b83c:	4649      	mov	r1, r9
 800b83e:	f7f4 fccf 	bl	80001e0 <__aeabi_dsub>
 800b842:	9b04      	ldr	r3, [sp, #16]
 800b844:	9a06      	ldr	r2, [sp, #24]
 800b846:	3b01      	subs	r3, #1
 800b848:	4313      	orrs	r3, r2
 800b84a:	4682      	mov	sl, r0
 800b84c:	468b      	mov	fp, r1
 800b84e:	f040 81e7 	bne.w	800bc20 <__ieee754_pow+0x700>
 800b852:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b908 <__ieee754_pow+0x3e8>
 800b856:	eeb0 8a47 	vmov.f32	s16, s14
 800b85a:	eef0 8a67 	vmov.f32	s17, s15
 800b85e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b862:	2600      	movs	r6, #0
 800b864:	4632      	mov	r2, r6
 800b866:	463b      	mov	r3, r7
 800b868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b86c:	f7f4 fcb8 	bl	80001e0 <__aeabi_dsub>
 800b870:	4622      	mov	r2, r4
 800b872:	462b      	mov	r3, r5
 800b874:	f7f4 fe6c 	bl	8000550 <__aeabi_dmul>
 800b878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b87c:	4680      	mov	r8, r0
 800b87e:	4689      	mov	r9, r1
 800b880:	4650      	mov	r0, sl
 800b882:	4659      	mov	r1, fp
 800b884:	f7f4 fe64 	bl	8000550 <__aeabi_dmul>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4640      	mov	r0, r8
 800b88e:	4649      	mov	r1, r9
 800b890:	f7f4 fca8 	bl	80001e4 <__adddf3>
 800b894:	4632      	mov	r2, r6
 800b896:	463b      	mov	r3, r7
 800b898:	4680      	mov	r8, r0
 800b89a:	4689      	mov	r9, r1
 800b89c:	4620      	mov	r0, r4
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f7f4 fe56 	bl	8000550 <__aeabi_dmul>
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	460d      	mov	r5, r1
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	f7f4 fc98 	bl	80001e4 <__adddf3>
 800b8b4:	4b19      	ldr	r3, [pc, #100]	; (800b91c <__ieee754_pow+0x3fc>)
 800b8b6:	4299      	cmp	r1, r3
 800b8b8:	ec45 4b19 	vmov	d9, r4, r5
 800b8bc:	4606      	mov	r6, r0
 800b8be:	460f      	mov	r7, r1
 800b8c0:	468b      	mov	fp, r1
 800b8c2:	f340 82f1 	ble.w	800bea8 <__ieee754_pow+0x988>
 800b8c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b8ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b8ce:	4303      	orrs	r3, r0
 800b8d0:	f000 81e4 	beq.w	800bc9c <__ieee754_pow+0x77c>
 800b8d4:	ec51 0b18 	vmov	r0, r1, d8
 800b8d8:	2200      	movs	r2, #0
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f7f5 f8aa 	bl	8000a34 <__aeabi_dcmplt>
 800b8e0:	3800      	subs	r0, #0
 800b8e2:	bf18      	it	ne
 800b8e4:	2001      	movne	r0, #1
 800b8e6:	e72b      	b.n	800b740 <__ieee754_pow+0x220>
 800b8e8:	60000000 	.word	0x60000000
 800b8ec:	3ff71547 	.word	0x3ff71547
 800b8f0:	f85ddf44 	.word	0xf85ddf44
 800b8f4:	3e54ae0b 	.word	0x3e54ae0b
 800b8f8:	55555555 	.word	0x55555555
 800b8fc:	3fd55555 	.word	0x3fd55555
 800b900:	652b82fe 	.word	0x652b82fe
 800b904:	3ff71547 	.word	0x3ff71547
 800b908:	00000000 	.word	0x00000000
 800b90c:	bff00000 	.word	0xbff00000
 800b910:	3ff00000 	.word	0x3ff00000
 800b914:	3fd00000 	.word	0x3fd00000
 800b918:	3fe00000 	.word	0x3fe00000
 800b91c:	408fffff 	.word	0x408fffff
 800b920:	4bd5      	ldr	r3, [pc, #852]	; (800bc78 <__ieee754_pow+0x758>)
 800b922:	402b      	ands	r3, r5
 800b924:	2200      	movs	r2, #0
 800b926:	b92b      	cbnz	r3, 800b934 <__ieee754_pow+0x414>
 800b928:	4bd4      	ldr	r3, [pc, #848]	; (800bc7c <__ieee754_pow+0x75c>)
 800b92a:	f7f4 fe11 	bl	8000550 <__aeabi_dmul>
 800b92e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b932:	460c      	mov	r4, r1
 800b934:	1523      	asrs	r3, r4, #20
 800b936:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b93a:	4413      	add	r3, r2
 800b93c:	9305      	str	r3, [sp, #20]
 800b93e:	4bd0      	ldr	r3, [pc, #832]	; (800bc80 <__ieee754_pow+0x760>)
 800b940:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b944:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b948:	429c      	cmp	r4, r3
 800b94a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b94e:	dd08      	ble.n	800b962 <__ieee754_pow+0x442>
 800b950:	4bcc      	ldr	r3, [pc, #816]	; (800bc84 <__ieee754_pow+0x764>)
 800b952:	429c      	cmp	r4, r3
 800b954:	f340 8162 	ble.w	800bc1c <__ieee754_pow+0x6fc>
 800b958:	9b05      	ldr	r3, [sp, #20]
 800b95a:	3301      	adds	r3, #1
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b962:	2400      	movs	r4, #0
 800b964:	00e3      	lsls	r3, r4, #3
 800b966:	9307      	str	r3, [sp, #28]
 800b968:	4bc7      	ldr	r3, [pc, #796]	; (800bc88 <__ieee754_pow+0x768>)
 800b96a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b96e:	ed93 7b00 	vldr	d7, [r3]
 800b972:	4629      	mov	r1, r5
 800b974:	ec53 2b17 	vmov	r2, r3, d7
 800b978:	eeb0 9a47 	vmov.f32	s18, s14
 800b97c:	eef0 9a67 	vmov.f32	s19, s15
 800b980:	4682      	mov	sl, r0
 800b982:	f7f4 fc2d 	bl	80001e0 <__aeabi_dsub>
 800b986:	4652      	mov	r2, sl
 800b988:	4606      	mov	r6, r0
 800b98a:	460f      	mov	r7, r1
 800b98c:	462b      	mov	r3, r5
 800b98e:	ec51 0b19 	vmov	r0, r1, d9
 800b992:	f7f4 fc27 	bl	80001e4 <__adddf3>
 800b996:	4602      	mov	r2, r0
 800b998:	460b      	mov	r3, r1
 800b99a:	2000      	movs	r0, #0
 800b99c:	49bb      	ldr	r1, [pc, #748]	; (800bc8c <__ieee754_pow+0x76c>)
 800b99e:	f7f4 ff01 	bl	80007a4 <__aeabi_ddiv>
 800b9a2:	ec41 0b1a 	vmov	d10, r0, r1
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	f7f4 fdcf 	bl	8000550 <__aeabi_dmul>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9b8:	9302      	str	r3, [sp, #8]
 800b9ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b9be:	46ab      	mov	fp, r5
 800b9c0:	106d      	asrs	r5, r5, #1
 800b9c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b9c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b9ca:	ec41 0b18 	vmov	d8, r0, r1
 800b9ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	4640      	mov	r0, r8
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	4614      	mov	r4, r2
 800b9da:	461d      	mov	r5, r3
 800b9dc:	f7f4 fdb8 	bl	8000550 <__aeabi_dmul>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	f7f4 fbfa 	bl	80001e0 <__aeabi_dsub>
 800b9ec:	ec53 2b19 	vmov	r2, r3, d9
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	460f      	mov	r7, r1
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	f7f4 fbf2 	bl	80001e0 <__aeabi_dsub>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4650      	mov	r0, sl
 800ba02:	4659      	mov	r1, fp
 800ba04:	f7f4 fbec 	bl	80001e0 <__aeabi_dsub>
 800ba08:	4642      	mov	r2, r8
 800ba0a:	464b      	mov	r3, r9
 800ba0c:	f7f4 fda0 	bl	8000550 <__aeabi_dmul>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4630      	mov	r0, r6
 800ba16:	4639      	mov	r1, r7
 800ba18:	f7f4 fbe2 	bl	80001e0 <__aeabi_dsub>
 800ba1c:	ec53 2b1a 	vmov	r2, r3, d10
 800ba20:	f7f4 fd96 	bl	8000550 <__aeabi_dmul>
 800ba24:	ec53 2b18 	vmov	r2, r3, d8
 800ba28:	ec41 0b19 	vmov	d9, r0, r1
 800ba2c:	ec51 0b18 	vmov	r0, r1, d8
 800ba30:	f7f4 fd8e 	bl	8000550 <__aeabi_dmul>
 800ba34:	a37c      	add	r3, pc, #496	; (adr r3, 800bc28 <__ieee754_pow+0x708>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	460d      	mov	r5, r1
 800ba3e:	f7f4 fd87 	bl	8000550 <__aeabi_dmul>
 800ba42:	a37b      	add	r3, pc, #492	; (adr r3, 800bc30 <__ieee754_pow+0x710>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	f7f4 fbcc 	bl	80001e4 <__adddf3>
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	462b      	mov	r3, r5
 800ba50:	f7f4 fd7e 	bl	8000550 <__aeabi_dmul>
 800ba54:	a378      	add	r3, pc, #480	; (adr r3, 800bc38 <__ieee754_pow+0x718>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fbc3 	bl	80001e4 <__adddf3>
 800ba5e:	4622      	mov	r2, r4
 800ba60:	462b      	mov	r3, r5
 800ba62:	f7f4 fd75 	bl	8000550 <__aeabi_dmul>
 800ba66:	a376      	add	r3, pc, #472	; (adr r3, 800bc40 <__ieee754_pow+0x720>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f7f4 fbba 	bl	80001e4 <__adddf3>
 800ba70:	4622      	mov	r2, r4
 800ba72:	462b      	mov	r3, r5
 800ba74:	f7f4 fd6c 	bl	8000550 <__aeabi_dmul>
 800ba78:	a373      	add	r3, pc, #460	; (adr r3, 800bc48 <__ieee754_pow+0x728>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f7f4 fbb1 	bl	80001e4 <__adddf3>
 800ba82:	4622      	mov	r2, r4
 800ba84:	462b      	mov	r3, r5
 800ba86:	f7f4 fd63 	bl	8000550 <__aeabi_dmul>
 800ba8a:	a371      	add	r3, pc, #452	; (adr r3, 800bc50 <__ieee754_pow+0x730>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	f7f4 fba8 	bl	80001e4 <__adddf3>
 800ba94:	4622      	mov	r2, r4
 800ba96:	4606      	mov	r6, r0
 800ba98:	460f      	mov	r7, r1
 800ba9a:	462b      	mov	r3, r5
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 fd56 	bl	8000550 <__aeabi_dmul>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f4 fd50 	bl	8000550 <__aeabi_dmul>
 800bab0:	4642      	mov	r2, r8
 800bab2:	4604      	mov	r4, r0
 800bab4:	460d      	mov	r5, r1
 800bab6:	464b      	mov	r3, r9
 800bab8:	ec51 0b18 	vmov	r0, r1, d8
 800babc:	f7f4 fb92 	bl	80001e4 <__adddf3>
 800bac0:	ec53 2b19 	vmov	r2, r3, d9
 800bac4:	f7f4 fd44 	bl	8000550 <__aeabi_dmul>
 800bac8:	4622      	mov	r2, r4
 800baca:	462b      	mov	r3, r5
 800bacc:	f7f4 fb8a 	bl	80001e4 <__adddf3>
 800bad0:	4642      	mov	r2, r8
 800bad2:	4682      	mov	sl, r0
 800bad4:	468b      	mov	fp, r1
 800bad6:	464b      	mov	r3, r9
 800bad8:	4640      	mov	r0, r8
 800bada:	4649      	mov	r1, r9
 800badc:	f7f4 fd38 	bl	8000550 <__aeabi_dmul>
 800bae0:	4b6b      	ldr	r3, [pc, #428]	; (800bc90 <__ieee754_pow+0x770>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	4606      	mov	r6, r0
 800bae6:	460f      	mov	r7, r1
 800bae8:	f7f4 fb7c 	bl	80001e4 <__adddf3>
 800baec:	4652      	mov	r2, sl
 800baee:	465b      	mov	r3, fp
 800baf0:	f7f4 fb78 	bl	80001e4 <__adddf3>
 800baf4:	2000      	movs	r0, #0
 800baf6:	4604      	mov	r4, r0
 800baf8:	460d      	mov	r5, r1
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4640      	mov	r0, r8
 800bb00:	4649      	mov	r1, r9
 800bb02:	f7f4 fd25 	bl	8000550 <__aeabi_dmul>
 800bb06:	4b62      	ldr	r3, [pc, #392]	; (800bc90 <__ieee754_pow+0x770>)
 800bb08:	4680      	mov	r8, r0
 800bb0a:	4689      	mov	r9, r1
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4620      	mov	r0, r4
 800bb10:	4629      	mov	r1, r5
 800bb12:	f7f4 fb65 	bl	80001e0 <__aeabi_dsub>
 800bb16:	4632      	mov	r2, r6
 800bb18:	463b      	mov	r3, r7
 800bb1a:	f7f4 fb61 	bl	80001e0 <__aeabi_dsub>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	4650      	mov	r0, sl
 800bb24:	4659      	mov	r1, fp
 800bb26:	f7f4 fb5b 	bl	80001e0 <__aeabi_dsub>
 800bb2a:	ec53 2b18 	vmov	r2, r3, d8
 800bb2e:	f7f4 fd0f 	bl	8000550 <__aeabi_dmul>
 800bb32:	4622      	mov	r2, r4
 800bb34:	4606      	mov	r6, r0
 800bb36:	460f      	mov	r7, r1
 800bb38:	462b      	mov	r3, r5
 800bb3a:	ec51 0b19 	vmov	r0, r1, d9
 800bb3e:	f7f4 fd07 	bl	8000550 <__aeabi_dmul>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	4630      	mov	r0, r6
 800bb48:	4639      	mov	r1, r7
 800bb4a:	f7f4 fb4b 	bl	80001e4 <__adddf3>
 800bb4e:	4606      	mov	r6, r0
 800bb50:	460f      	mov	r7, r1
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 fb43 	bl	80001e4 <__adddf3>
 800bb5e:	a33e      	add	r3, pc, #248	; (adr r3, 800bc58 <__ieee754_pow+0x738>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	2000      	movs	r0, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	460d      	mov	r5, r1
 800bb6a:	f7f4 fcf1 	bl	8000550 <__aeabi_dmul>
 800bb6e:	4642      	mov	r2, r8
 800bb70:	ec41 0b18 	vmov	d8, r0, r1
 800bb74:	464b      	mov	r3, r9
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7f4 fb31 	bl	80001e0 <__aeabi_dsub>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	460b      	mov	r3, r1
 800bb82:	4630      	mov	r0, r6
 800bb84:	4639      	mov	r1, r7
 800bb86:	f7f4 fb2b 	bl	80001e0 <__aeabi_dsub>
 800bb8a:	a335      	add	r3, pc, #212	; (adr r3, 800bc60 <__ieee754_pow+0x740>)
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	f7f4 fcde 	bl	8000550 <__aeabi_dmul>
 800bb94:	a334      	add	r3, pc, #208	; (adr r3, 800bc68 <__ieee754_pow+0x748>)
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	4620      	mov	r0, r4
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7f4 fcd5 	bl	8000550 <__aeabi_dmul>
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	f7f4 fb19 	bl	80001e4 <__adddf3>
 800bbb2:	9a07      	ldr	r2, [sp, #28]
 800bbb4:	4b37      	ldr	r3, [pc, #220]	; (800bc94 <__ieee754_pow+0x774>)
 800bbb6:	4413      	add	r3, r2
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f7f4 fb12 	bl	80001e4 <__adddf3>
 800bbc0:	4682      	mov	sl, r0
 800bbc2:	9805      	ldr	r0, [sp, #20]
 800bbc4:	468b      	mov	fp, r1
 800bbc6:	f7f4 fc59 	bl	800047c <__aeabi_i2d>
 800bbca:	9a07      	ldr	r2, [sp, #28]
 800bbcc:	4b32      	ldr	r3, [pc, #200]	; (800bc98 <__ieee754_pow+0x778>)
 800bbce:	4413      	add	r3, r2
 800bbd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	460f      	mov	r7, r1
 800bbd8:	4652      	mov	r2, sl
 800bbda:	465b      	mov	r3, fp
 800bbdc:	ec51 0b18 	vmov	r0, r1, d8
 800bbe0:	f7f4 fb00 	bl	80001e4 <__adddf3>
 800bbe4:	4642      	mov	r2, r8
 800bbe6:	464b      	mov	r3, r9
 800bbe8:	f7f4 fafc 	bl	80001e4 <__adddf3>
 800bbec:	4632      	mov	r2, r6
 800bbee:	463b      	mov	r3, r7
 800bbf0:	f7f4 faf8 	bl	80001e4 <__adddf3>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	4632      	mov	r2, r6
 800bbf8:	463b      	mov	r3, r7
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	f7f4 faef 	bl	80001e0 <__aeabi_dsub>
 800bc02:	4642      	mov	r2, r8
 800bc04:	464b      	mov	r3, r9
 800bc06:	f7f4 faeb 	bl	80001e0 <__aeabi_dsub>
 800bc0a:	ec53 2b18 	vmov	r2, r3, d8
 800bc0e:	f7f4 fae7 	bl	80001e0 <__aeabi_dsub>
 800bc12:	4602      	mov	r2, r0
 800bc14:	460b      	mov	r3, r1
 800bc16:	4650      	mov	r0, sl
 800bc18:	4659      	mov	r1, fp
 800bc1a:	e610      	b.n	800b83e <__ieee754_pow+0x31e>
 800bc1c:	2401      	movs	r4, #1
 800bc1e:	e6a1      	b.n	800b964 <__ieee754_pow+0x444>
 800bc20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bc70 <__ieee754_pow+0x750>
 800bc24:	e617      	b.n	800b856 <__ieee754_pow+0x336>
 800bc26:	bf00      	nop
 800bc28:	4a454eef 	.word	0x4a454eef
 800bc2c:	3fca7e28 	.word	0x3fca7e28
 800bc30:	93c9db65 	.word	0x93c9db65
 800bc34:	3fcd864a 	.word	0x3fcd864a
 800bc38:	a91d4101 	.word	0xa91d4101
 800bc3c:	3fd17460 	.word	0x3fd17460
 800bc40:	518f264d 	.word	0x518f264d
 800bc44:	3fd55555 	.word	0x3fd55555
 800bc48:	db6fabff 	.word	0xdb6fabff
 800bc4c:	3fdb6db6 	.word	0x3fdb6db6
 800bc50:	33333303 	.word	0x33333303
 800bc54:	3fe33333 	.word	0x3fe33333
 800bc58:	e0000000 	.word	0xe0000000
 800bc5c:	3feec709 	.word	0x3feec709
 800bc60:	dc3a03fd 	.word	0xdc3a03fd
 800bc64:	3feec709 	.word	0x3feec709
 800bc68:	145b01f5 	.word	0x145b01f5
 800bc6c:	be3e2fe0 	.word	0xbe3e2fe0
 800bc70:	00000000 	.word	0x00000000
 800bc74:	3ff00000 	.word	0x3ff00000
 800bc78:	7ff00000 	.word	0x7ff00000
 800bc7c:	43400000 	.word	0x43400000
 800bc80:	0003988e 	.word	0x0003988e
 800bc84:	000bb679 	.word	0x000bb679
 800bc88:	0800c2f0 	.word	0x0800c2f0
 800bc8c:	3ff00000 	.word	0x3ff00000
 800bc90:	40080000 	.word	0x40080000
 800bc94:	0800c310 	.word	0x0800c310
 800bc98:	0800c300 	.word	0x0800c300
 800bc9c:	a3b5      	add	r3, pc, #724	; (adr r3, 800bf74 <__ieee754_pow+0xa54>)
 800bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	f7f4 fa9d 	bl	80001e4 <__adddf3>
 800bcaa:	4622      	mov	r2, r4
 800bcac:	ec41 0b1a 	vmov	d10, r0, r1
 800bcb0:	462b      	mov	r3, r5
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	f7f4 fa93 	bl	80001e0 <__aeabi_dsub>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	ec51 0b1a 	vmov	r0, r1, d10
 800bcc2:	f7f4 fed5 	bl	8000a70 <__aeabi_dcmpgt>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	f47f ae04 	bne.w	800b8d4 <__ieee754_pow+0x3b4>
 800bccc:	4aa4      	ldr	r2, [pc, #656]	; (800bf60 <__ieee754_pow+0xa40>)
 800bcce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	f340 8108 	ble.w	800bee8 <__ieee754_pow+0x9c8>
 800bcd8:	151b      	asrs	r3, r3, #20
 800bcda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bcde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bce2:	fa4a f303 	asr.w	r3, sl, r3
 800bce6:	445b      	add	r3, fp
 800bce8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bcec:	4e9d      	ldr	r6, [pc, #628]	; (800bf64 <__ieee754_pow+0xa44>)
 800bcee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bcf2:	4116      	asrs	r6, r2
 800bcf4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	ea23 0106 	bic.w	r1, r3, r6
 800bcfe:	f1c2 0214 	rsb	r2, r2, #20
 800bd02:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bd06:	fa4a fa02 	asr.w	sl, sl, r2
 800bd0a:	f1bb 0f00 	cmp.w	fp, #0
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4620      	mov	r0, r4
 800bd14:	4629      	mov	r1, r5
 800bd16:	bfb8      	it	lt
 800bd18:	f1ca 0a00 	rsblt	sl, sl, #0
 800bd1c:	f7f4 fa60 	bl	80001e0 <__aeabi_dsub>
 800bd20:	ec41 0b19 	vmov	d9, r0, r1
 800bd24:	4642      	mov	r2, r8
 800bd26:	464b      	mov	r3, r9
 800bd28:	ec51 0b19 	vmov	r0, r1, d9
 800bd2c:	f7f4 fa5a 	bl	80001e4 <__adddf3>
 800bd30:	a37b      	add	r3, pc, #492	; (adr r3, 800bf20 <__ieee754_pow+0xa00>)
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	2000      	movs	r0, #0
 800bd38:	4604      	mov	r4, r0
 800bd3a:	460d      	mov	r5, r1
 800bd3c:	f7f4 fc08 	bl	8000550 <__aeabi_dmul>
 800bd40:	ec53 2b19 	vmov	r2, r3, d9
 800bd44:	4606      	mov	r6, r0
 800bd46:	460f      	mov	r7, r1
 800bd48:	4620      	mov	r0, r4
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	f7f4 fa48 	bl	80001e0 <__aeabi_dsub>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4640      	mov	r0, r8
 800bd56:	4649      	mov	r1, r9
 800bd58:	f7f4 fa42 	bl	80001e0 <__aeabi_dsub>
 800bd5c:	a372      	add	r3, pc, #456	; (adr r3, 800bf28 <__ieee754_pow+0xa08>)
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	f7f4 fbf5 	bl	8000550 <__aeabi_dmul>
 800bd66:	a372      	add	r3, pc, #456	; (adr r3, 800bf30 <__ieee754_pow+0xa10>)
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	4680      	mov	r8, r0
 800bd6e:	4689      	mov	r9, r1
 800bd70:	4620      	mov	r0, r4
 800bd72:	4629      	mov	r1, r5
 800bd74:	f7f4 fbec 	bl	8000550 <__aeabi_dmul>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4640      	mov	r0, r8
 800bd7e:	4649      	mov	r1, r9
 800bd80:	f7f4 fa30 	bl	80001e4 <__adddf3>
 800bd84:	4604      	mov	r4, r0
 800bd86:	460d      	mov	r5, r1
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f7f4 fa28 	bl	80001e4 <__adddf3>
 800bd94:	4632      	mov	r2, r6
 800bd96:	463b      	mov	r3, r7
 800bd98:	4680      	mov	r8, r0
 800bd9a:	4689      	mov	r9, r1
 800bd9c:	f7f4 fa20 	bl	80001e0 <__aeabi_dsub>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4620      	mov	r0, r4
 800bda6:	4629      	mov	r1, r5
 800bda8:	f7f4 fa1a 	bl	80001e0 <__aeabi_dsub>
 800bdac:	4642      	mov	r2, r8
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	464b      	mov	r3, r9
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	f7f4 fbca 	bl	8000550 <__aeabi_dmul>
 800bdbc:	a35e      	add	r3, pc, #376	; (adr r3, 800bf38 <__ieee754_pow+0xa18>)
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	460d      	mov	r5, r1
 800bdc6:	f7f4 fbc3 	bl	8000550 <__aeabi_dmul>
 800bdca:	a35d      	add	r3, pc, #372	; (adr r3, 800bf40 <__ieee754_pow+0xa20>)
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	f7f4 fa06 	bl	80001e0 <__aeabi_dsub>
 800bdd4:	4622      	mov	r2, r4
 800bdd6:	462b      	mov	r3, r5
 800bdd8:	f7f4 fbba 	bl	8000550 <__aeabi_dmul>
 800bddc:	a35a      	add	r3, pc, #360	; (adr r3, 800bf48 <__ieee754_pow+0xa28>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	f7f4 f9ff 	bl	80001e4 <__adddf3>
 800bde6:	4622      	mov	r2, r4
 800bde8:	462b      	mov	r3, r5
 800bdea:	f7f4 fbb1 	bl	8000550 <__aeabi_dmul>
 800bdee:	a358      	add	r3, pc, #352	; (adr r3, 800bf50 <__ieee754_pow+0xa30>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	f7f4 f9f4 	bl	80001e0 <__aeabi_dsub>
 800bdf8:	4622      	mov	r2, r4
 800bdfa:	462b      	mov	r3, r5
 800bdfc:	f7f4 fba8 	bl	8000550 <__aeabi_dmul>
 800be00:	a355      	add	r3, pc, #340	; (adr r3, 800bf58 <__ieee754_pow+0xa38>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 f9ed 	bl	80001e4 <__adddf3>
 800be0a:	4622      	mov	r2, r4
 800be0c:	462b      	mov	r3, r5
 800be0e:	f7f4 fb9f 	bl	8000550 <__aeabi_dmul>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	4640      	mov	r0, r8
 800be18:	4649      	mov	r1, r9
 800be1a:	f7f4 f9e1 	bl	80001e0 <__aeabi_dsub>
 800be1e:	4604      	mov	r4, r0
 800be20:	460d      	mov	r5, r1
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	4640      	mov	r0, r8
 800be28:	4649      	mov	r1, r9
 800be2a:	f7f4 fb91 	bl	8000550 <__aeabi_dmul>
 800be2e:	2200      	movs	r2, #0
 800be30:	ec41 0b19 	vmov	d9, r0, r1
 800be34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be38:	4620      	mov	r0, r4
 800be3a:	4629      	mov	r1, r5
 800be3c:	f7f4 f9d0 	bl	80001e0 <__aeabi_dsub>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	ec51 0b19 	vmov	r0, r1, d9
 800be48:	f7f4 fcac 	bl	80007a4 <__aeabi_ddiv>
 800be4c:	4632      	mov	r2, r6
 800be4e:	4604      	mov	r4, r0
 800be50:	460d      	mov	r5, r1
 800be52:	463b      	mov	r3, r7
 800be54:	4640      	mov	r0, r8
 800be56:	4649      	mov	r1, r9
 800be58:	f7f4 fb7a 	bl	8000550 <__aeabi_dmul>
 800be5c:	4632      	mov	r2, r6
 800be5e:	463b      	mov	r3, r7
 800be60:	f7f4 f9c0 	bl	80001e4 <__adddf3>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4620      	mov	r0, r4
 800be6a:	4629      	mov	r1, r5
 800be6c:	f7f4 f9b8 	bl	80001e0 <__aeabi_dsub>
 800be70:	4642      	mov	r2, r8
 800be72:	464b      	mov	r3, r9
 800be74:	f7f4 f9b4 	bl	80001e0 <__aeabi_dsub>
 800be78:	460b      	mov	r3, r1
 800be7a:	4602      	mov	r2, r0
 800be7c:	493a      	ldr	r1, [pc, #232]	; (800bf68 <__ieee754_pow+0xa48>)
 800be7e:	2000      	movs	r0, #0
 800be80:	f7f4 f9ae 	bl	80001e0 <__aeabi_dsub>
 800be84:	ec41 0b10 	vmov	d0, r0, r1
 800be88:	ee10 3a90 	vmov	r3, s1
 800be8c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800be90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be94:	da2b      	bge.n	800beee <__ieee754_pow+0x9ce>
 800be96:	4650      	mov	r0, sl
 800be98:	f000 f966 	bl	800c168 <scalbn>
 800be9c:	ec51 0b10 	vmov	r0, r1, d0
 800bea0:	ec53 2b18 	vmov	r2, r3, d8
 800bea4:	f7ff bbed 	b.w	800b682 <__ieee754_pow+0x162>
 800bea8:	4b30      	ldr	r3, [pc, #192]	; (800bf6c <__ieee754_pow+0xa4c>)
 800beaa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800beae:	429e      	cmp	r6, r3
 800beb0:	f77f af0c 	ble.w	800bccc <__ieee754_pow+0x7ac>
 800beb4:	4b2e      	ldr	r3, [pc, #184]	; (800bf70 <__ieee754_pow+0xa50>)
 800beb6:	440b      	add	r3, r1
 800beb8:	4303      	orrs	r3, r0
 800beba:	d009      	beq.n	800bed0 <__ieee754_pow+0x9b0>
 800bebc:	ec51 0b18 	vmov	r0, r1, d8
 800bec0:	2200      	movs	r2, #0
 800bec2:	2300      	movs	r3, #0
 800bec4:	f7f4 fdb6 	bl	8000a34 <__aeabi_dcmplt>
 800bec8:	3800      	subs	r0, #0
 800beca:	bf18      	it	ne
 800becc:	2001      	movne	r0, #1
 800bece:	e447      	b.n	800b760 <__ieee754_pow+0x240>
 800bed0:	4622      	mov	r2, r4
 800bed2:	462b      	mov	r3, r5
 800bed4:	f7f4 f984 	bl	80001e0 <__aeabi_dsub>
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	f7f4 fdbe 	bl	8000a5c <__aeabi_dcmpge>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	f43f aef3 	beq.w	800bccc <__ieee754_pow+0x7ac>
 800bee6:	e7e9      	b.n	800bebc <__ieee754_pow+0x99c>
 800bee8:	f04f 0a00 	mov.w	sl, #0
 800beec:	e71a      	b.n	800bd24 <__ieee754_pow+0x804>
 800beee:	ec51 0b10 	vmov	r0, r1, d0
 800bef2:	4619      	mov	r1, r3
 800bef4:	e7d4      	b.n	800bea0 <__ieee754_pow+0x980>
 800bef6:	491c      	ldr	r1, [pc, #112]	; (800bf68 <__ieee754_pow+0xa48>)
 800bef8:	2000      	movs	r0, #0
 800befa:	f7ff bb30 	b.w	800b55e <__ieee754_pow+0x3e>
 800befe:	2000      	movs	r0, #0
 800bf00:	2100      	movs	r1, #0
 800bf02:	f7ff bb2c 	b.w	800b55e <__ieee754_pow+0x3e>
 800bf06:	4630      	mov	r0, r6
 800bf08:	4639      	mov	r1, r7
 800bf0a:	f7ff bb28 	b.w	800b55e <__ieee754_pow+0x3e>
 800bf0e:	9204      	str	r2, [sp, #16]
 800bf10:	f7ff bb7a 	b.w	800b608 <__ieee754_pow+0xe8>
 800bf14:	2300      	movs	r3, #0
 800bf16:	f7ff bb64 	b.w	800b5e2 <__ieee754_pow+0xc2>
 800bf1a:	bf00      	nop
 800bf1c:	f3af 8000 	nop.w
 800bf20:	00000000 	.word	0x00000000
 800bf24:	3fe62e43 	.word	0x3fe62e43
 800bf28:	fefa39ef 	.word	0xfefa39ef
 800bf2c:	3fe62e42 	.word	0x3fe62e42
 800bf30:	0ca86c39 	.word	0x0ca86c39
 800bf34:	be205c61 	.word	0xbe205c61
 800bf38:	72bea4d0 	.word	0x72bea4d0
 800bf3c:	3e663769 	.word	0x3e663769
 800bf40:	c5d26bf1 	.word	0xc5d26bf1
 800bf44:	3ebbbd41 	.word	0x3ebbbd41
 800bf48:	af25de2c 	.word	0xaf25de2c
 800bf4c:	3f11566a 	.word	0x3f11566a
 800bf50:	16bebd93 	.word	0x16bebd93
 800bf54:	3f66c16c 	.word	0x3f66c16c
 800bf58:	5555553e 	.word	0x5555553e
 800bf5c:	3fc55555 	.word	0x3fc55555
 800bf60:	3fe00000 	.word	0x3fe00000
 800bf64:	000fffff 	.word	0x000fffff
 800bf68:	3ff00000 	.word	0x3ff00000
 800bf6c:	4090cbff 	.word	0x4090cbff
 800bf70:	3f6f3400 	.word	0x3f6f3400
 800bf74:	652b82fe 	.word	0x652b82fe
 800bf78:	3c971547 	.word	0x3c971547

0800bf7c <__ieee754_sqrt>:
 800bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf80:	ec55 4b10 	vmov	r4, r5, d0
 800bf84:	4e55      	ldr	r6, [pc, #340]	; (800c0dc <__ieee754_sqrt+0x160>)
 800bf86:	43ae      	bics	r6, r5
 800bf88:	ee10 0a10 	vmov	r0, s0
 800bf8c:	ee10 3a10 	vmov	r3, s0
 800bf90:	462a      	mov	r2, r5
 800bf92:	4629      	mov	r1, r5
 800bf94:	d110      	bne.n	800bfb8 <__ieee754_sqrt+0x3c>
 800bf96:	ee10 2a10 	vmov	r2, s0
 800bf9a:	462b      	mov	r3, r5
 800bf9c:	f7f4 fad8 	bl	8000550 <__aeabi_dmul>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	f7f4 f91c 	bl	80001e4 <__adddf3>
 800bfac:	4604      	mov	r4, r0
 800bfae:	460d      	mov	r5, r1
 800bfb0:	ec45 4b10 	vmov	d0, r4, r5
 800bfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb8:	2d00      	cmp	r5, #0
 800bfba:	dc10      	bgt.n	800bfde <__ieee754_sqrt+0x62>
 800bfbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bfc0:	4330      	orrs	r0, r6
 800bfc2:	d0f5      	beq.n	800bfb0 <__ieee754_sqrt+0x34>
 800bfc4:	b15d      	cbz	r5, 800bfde <__ieee754_sqrt+0x62>
 800bfc6:	ee10 2a10 	vmov	r2, s0
 800bfca:	462b      	mov	r3, r5
 800bfcc:	ee10 0a10 	vmov	r0, s0
 800bfd0:	f7f4 f906 	bl	80001e0 <__aeabi_dsub>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	f7f4 fbe4 	bl	80007a4 <__aeabi_ddiv>
 800bfdc:	e7e6      	b.n	800bfac <__ieee754_sqrt+0x30>
 800bfde:	1512      	asrs	r2, r2, #20
 800bfe0:	d074      	beq.n	800c0cc <__ieee754_sqrt+0x150>
 800bfe2:	07d4      	lsls	r4, r2, #31
 800bfe4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bfe8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bfec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bff0:	bf5e      	ittt	pl
 800bff2:	0fda      	lsrpl	r2, r3, #31
 800bff4:	005b      	lslpl	r3, r3, #1
 800bff6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bffa:	2400      	movs	r4, #0
 800bffc:	0fda      	lsrs	r2, r3, #31
 800bffe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c002:	107f      	asrs	r7, r7, #1
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	2516      	movs	r5, #22
 800c008:	4620      	mov	r0, r4
 800c00a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c00e:	1886      	adds	r6, r0, r2
 800c010:	428e      	cmp	r6, r1
 800c012:	bfde      	ittt	le
 800c014:	1b89      	suble	r1, r1, r6
 800c016:	18b0      	addle	r0, r6, r2
 800c018:	18a4      	addle	r4, r4, r2
 800c01a:	0049      	lsls	r1, r1, #1
 800c01c:	3d01      	subs	r5, #1
 800c01e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c022:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c026:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c02a:	d1f0      	bne.n	800c00e <__ieee754_sqrt+0x92>
 800c02c:	462a      	mov	r2, r5
 800c02e:	f04f 0e20 	mov.w	lr, #32
 800c032:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c036:	4281      	cmp	r1, r0
 800c038:	eb06 0c05 	add.w	ip, r6, r5
 800c03c:	dc02      	bgt.n	800c044 <__ieee754_sqrt+0xc8>
 800c03e:	d113      	bne.n	800c068 <__ieee754_sqrt+0xec>
 800c040:	459c      	cmp	ip, r3
 800c042:	d811      	bhi.n	800c068 <__ieee754_sqrt+0xec>
 800c044:	f1bc 0f00 	cmp.w	ip, #0
 800c048:	eb0c 0506 	add.w	r5, ip, r6
 800c04c:	da43      	bge.n	800c0d6 <__ieee754_sqrt+0x15a>
 800c04e:	2d00      	cmp	r5, #0
 800c050:	db41      	blt.n	800c0d6 <__ieee754_sqrt+0x15a>
 800c052:	f100 0801 	add.w	r8, r0, #1
 800c056:	1a09      	subs	r1, r1, r0
 800c058:	459c      	cmp	ip, r3
 800c05a:	bf88      	it	hi
 800c05c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c060:	eba3 030c 	sub.w	r3, r3, ip
 800c064:	4432      	add	r2, r6
 800c066:	4640      	mov	r0, r8
 800c068:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c06c:	f1be 0e01 	subs.w	lr, lr, #1
 800c070:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c074:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c078:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c07c:	d1db      	bne.n	800c036 <__ieee754_sqrt+0xba>
 800c07e:	430b      	orrs	r3, r1
 800c080:	d006      	beq.n	800c090 <__ieee754_sqrt+0x114>
 800c082:	1c50      	adds	r0, r2, #1
 800c084:	bf13      	iteet	ne
 800c086:	3201      	addne	r2, #1
 800c088:	3401      	addeq	r4, #1
 800c08a:	4672      	moveq	r2, lr
 800c08c:	f022 0201 	bicne.w	r2, r2, #1
 800c090:	1063      	asrs	r3, r4, #1
 800c092:	0852      	lsrs	r2, r2, #1
 800c094:	07e1      	lsls	r1, r4, #31
 800c096:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c09a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c09e:	bf48      	it	mi
 800c0a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c0a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	e781      	b.n	800bfb0 <__ieee754_sqrt+0x34>
 800c0ac:	0ad9      	lsrs	r1, r3, #11
 800c0ae:	3815      	subs	r0, #21
 800c0b0:	055b      	lsls	r3, r3, #21
 800c0b2:	2900      	cmp	r1, #0
 800c0b4:	d0fa      	beq.n	800c0ac <__ieee754_sqrt+0x130>
 800c0b6:	02cd      	lsls	r5, r1, #11
 800c0b8:	d50a      	bpl.n	800c0d0 <__ieee754_sqrt+0x154>
 800c0ba:	f1c2 0420 	rsb	r4, r2, #32
 800c0be:	fa23 f404 	lsr.w	r4, r3, r4
 800c0c2:	1e55      	subs	r5, r2, #1
 800c0c4:	4093      	lsls	r3, r2
 800c0c6:	4321      	orrs	r1, r4
 800c0c8:	1b42      	subs	r2, r0, r5
 800c0ca:	e78a      	b.n	800bfe2 <__ieee754_sqrt+0x66>
 800c0cc:	4610      	mov	r0, r2
 800c0ce:	e7f0      	b.n	800c0b2 <__ieee754_sqrt+0x136>
 800c0d0:	0049      	lsls	r1, r1, #1
 800c0d2:	3201      	adds	r2, #1
 800c0d4:	e7ef      	b.n	800c0b6 <__ieee754_sqrt+0x13a>
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	e7bd      	b.n	800c056 <__ieee754_sqrt+0xda>
 800c0da:	bf00      	nop
 800c0dc:	7ff00000 	.word	0x7ff00000

0800c0e0 <with_errno>:
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	460d      	mov	r5, r1
 800c0e6:	4616      	mov	r6, r2
 800c0e8:	f7ff f94c 	bl	800b384 <__errno>
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	6006      	str	r6, [r0, #0]
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}

0800c0f4 <xflow>:
 800c0f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0f6:	4614      	mov	r4, r2
 800c0f8:	461d      	mov	r5, r3
 800c0fa:	b108      	cbz	r0, 800c100 <xflow+0xc>
 800c0fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c100:	e9cd 2300 	strd	r2, r3, [sp]
 800c104:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c108:	4620      	mov	r0, r4
 800c10a:	4629      	mov	r1, r5
 800c10c:	f7f4 fa20 	bl	8000550 <__aeabi_dmul>
 800c110:	2222      	movs	r2, #34	; 0x22
 800c112:	b003      	add	sp, #12
 800c114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c118:	f7ff bfe2 	b.w	800c0e0 <with_errno>

0800c11c <__math_uflow>:
 800c11c:	b508      	push	{r3, lr}
 800c11e:	2200      	movs	r2, #0
 800c120:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c124:	f7ff ffe6 	bl	800c0f4 <xflow>
 800c128:	ec41 0b10 	vmov	d0, r0, r1
 800c12c:	bd08      	pop	{r3, pc}

0800c12e <__math_oflow>:
 800c12e:	b508      	push	{r3, lr}
 800c130:	2200      	movs	r2, #0
 800c132:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c136:	f7ff ffdd 	bl	800c0f4 <xflow>
 800c13a:	ec41 0b10 	vmov	d0, r0, r1
 800c13e:	bd08      	pop	{r3, pc}

0800c140 <fabs>:
 800c140:	ec51 0b10 	vmov	r0, r1, d0
 800c144:	ee10 2a10 	vmov	r2, s0
 800c148:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c14c:	ec43 2b10 	vmov	d0, r2, r3
 800c150:	4770      	bx	lr

0800c152 <finite>:
 800c152:	b082      	sub	sp, #8
 800c154:	ed8d 0b00 	vstr	d0, [sp]
 800c158:	9801      	ldr	r0, [sp, #4]
 800c15a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c15e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c162:	0fc0      	lsrs	r0, r0, #31
 800c164:	b002      	add	sp, #8
 800c166:	4770      	bx	lr

0800c168 <scalbn>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	ec55 4b10 	vmov	r4, r5, d0
 800c16e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c172:	4606      	mov	r6, r0
 800c174:	462b      	mov	r3, r5
 800c176:	b99a      	cbnz	r2, 800c1a0 <scalbn+0x38>
 800c178:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c17c:	4323      	orrs	r3, r4
 800c17e:	d036      	beq.n	800c1ee <scalbn+0x86>
 800c180:	4b39      	ldr	r3, [pc, #228]	; (800c268 <scalbn+0x100>)
 800c182:	4629      	mov	r1, r5
 800c184:	ee10 0a10 	vmov	r0, s0
 800c188:	2200      	movs	r2, #0
 800c18a:	f7f4 f9e1 	bl	8000550 <__aeabi_dmul>
 800c18e:	4b37      	ldr	r3, [pc, #220]	; (800c26c <scalbn+0x104>)
 800c190:	429e      	cmp	r6, r3
 800c192:	4604      	mov	r4, r0
 800c194:	460d      	mov	r5, r1
 800c196:	da10      	bge.n	800c1ba <scalbn+0x52>
 800c198:	a32b      	add	r3, pc, #172	; (adr r3, 800c248 <scalbn+0xe0>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	e03a      	b.n	800c216 <scalbn+0xae>
 800c1a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c1a4:	428a      	cmp	r2, r1
 800c1a6:	d10c      	bne.n	800c1c2 <scalbn+0x5a>
 800c1a8:	ee10 2a10 	vmov	r2, s0
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7f4 f818 	bl	80001e4 <__adddf3>
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	e019      	b.n	800c1ee <scalbn+0x86>
 800c1ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1be:	460b      	mov	r3, r1
 800c1c0:	3a36      	subs	r2, #54	; 0x36
 800c1c2:	4432      	add	r2, r6
 800c1c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c1c8:	428a      	cmp	r2, r1
 800c1ca:	dd08      	ble.n	800c1de <scalbn+0x76>
 800c1cc:	2d00      	cmp	r5, #0
 800c1ce:	a120      	add	r1, pc, #128	; (adr r1, 800c250 <scalbn+0xe8>)
 800c1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1d4:	da1c      	bge.n	800c210 <scalbn+0xa8>
 800c1d6:	a120      	add	r1, pc, #128	; (adr r1, 800c258 <scalbn+0xf0>)
 800c1d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1dc:	e018      	b.n	800c210 <scalbn+0xa8>
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	dd08      	ble.n	800c1f4 <scalbn+0x8c>
 800c1e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1ee:	ec45 4b10 	vmov	d0, r4, r5
 800c1f2:	bd70      	pop	{r4, r5, r6, pc}
 800c1f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c1f8:	da19      	bge.n	800c22e <scalbn+0xc6>
 800c1fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c1fe:	429e      	cmp	r6, r3
 800c200:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c204:	dd0a      	ble.n	800c21c <scalbn+0xb4>
 800c206:	a112      	add	r1, pc, #72	; (adr r1, 800c250 <scalbn+0xe8>)
 800c208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1e2      	bne.n	800c1d6 <scalbn+0x6e>
 800c210:	a30f      	add	r3, pc, #60	; (adr r3, 800c250 <scalbn+0xe8>)
 800c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c216:	f7f4 f99b 	bl	8000550 <__aeabi_dmul>
 800c21a:	e7cb      	b.n	800c1b4 <scalbn+0x4c>
 800c21c:	a10a      	add	r1, pc, #40	; (adr r1, 800c248 <scalbn+0xe0>)
 800c21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0b8      	beq.n	800c198 <scalbn+0x30>
 800c226:	a10e      	add	r1, pc, #56	; (adr r1, 800c260 <scalbn+0xf8>)
 800c228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c22c:	e7b4      	b.n	800c198 <scalbn+0x30>
 800c22e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c232:	3236      	adds	r2, #54	; 0x36
 800c234:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c238:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c23c:	4620      	mov	r0, r4
 800c23e:	4b0c      	ldr	r3, [pc, #48]	; (800c270 <scalbn+0x108>)
 800c240:	2200      	movs	r2, #0
 800c242:	e7e8      	b.n	800c216 <scalbn+0xae>
 800c244:	f3af 8000 	nop.w
 800c248:	c2f8f359 	.word	0xc2f8f359
 800c24c:	01a56e1f 	.word	0x01a56e1f
 800c250:	8800759c 	.word	0x8800759c
 800c254:	7e37e43c 	.word	0x7e37e43c
 800c258:	8800759c 	.word	0x8800759c
 800c25c:	fe37e43c 	.word	0xfe37e43c
 800c260:	c2f8f359 	.word	0xc2f8f359
 800c264:	81a56e1f 	.word	0x81a56e1f
 800c268:	43500000 	.word	0x43500000
 800c26c:	ffff3cb0 	.word	0xffff3cb0
 800c270:	3c900000 	.word	0x3c900000

0800c274 <_init>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	bf00      	nop
 800c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27a:	bc08      	pop	{r3}
 800c27c:	469e      	mov	lr, r3
 800c27e:	4770      	bx	lr

0800c280 <_fini>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	bf00      	nop
 800c284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c286:	bc08      	pop	{r3}
 800c288:	469e      	mov	lr, r3
 800c28a:	4770      	bx	lr
