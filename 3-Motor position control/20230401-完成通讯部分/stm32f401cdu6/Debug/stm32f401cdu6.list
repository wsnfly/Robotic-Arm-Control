
stm32f401cdu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005370  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800551c  0800551c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005524  08005524  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800552c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a7c  20000078  080055a0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  080055a0  00020af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df85  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e57  00000000  00000000  0002e029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0002fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00030b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163d6  00000000  00000000  00031738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec4f  00000000  00000000  00047b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce34  00000000  00000000  0005675d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003860  00000000  00000000  000e35e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080054ec 	.word	0x080054ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	080054ec 	.word	0x080054ec

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__gedf2>:
 8000970:	f04f 3cff 	mov.w	ip, #4294967295
 8000974:	e006      	b.n	8000984 <__cmpdf2+0x4>
 8000976:	bf00      	nop

08000978 <__ledf2>:
 8000978:	f04f 0c01 	mov.w	ip, #1
 800097c:	e002      	b.n	8000984 <__cmpdf2+0x4>
 800097e:	bf00      	nop

08000980 <__cmpdf2>:
 8000980:	f04f 0c01 	mov.w	ip, #1
 8000984:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099a:	d01b      	beq.n	80009d4 <__cmpdf2+0x54>
 800099c:	b001      	add	sp, #4
 800099e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a2:	bf0c      	ite	eq
 80009a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a8:	ea91 0f03 	teqne	r1, r3
 80009ac:	bf02      	ittt	eq
 80009ae:	ea90 0f02 	teqeq	r0, r2
 80009b2:	2000      	moveq	r0, #0
 80009b4:	4770      	bxeq	lr
 80009b6:	f110 0f00 	cmn.w	r0, #0
 80009ba:	ea91 0f03 	teq	r1, r3
 80009be:	bf58      	it	pl
 80009c0:	4299      	cmppl	r1, r3
 80009c2:	bf08      	it	eq
 80009c4:	4290      	cmpeq	r0, r2
 80009c6:	bf2c      	ite	cs
 80009c8:	17d8      	asrcs	r0, r3, #31
 80009ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ce:	f040 0001 	orr.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	d102      	bne.n	80009e4 <__cmpdf2+0x64>
 80009de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e2:	d107      	bne.n	80009f4 <__cmpdf2+0x74>
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d1d6      	bne.n	800099c <__cmpdf2+0x1c>
 80009ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f2:	d0d3      	beq.n	800099c <__cmpdf2+0x1c>
 80009f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_cdrcmple>:
 80009fc:	4684      	mov	ip, r0
 80009fe:	4610      	mov	r0, r2
 8000a00:	4662      	mov	r2, ip
 8000a02:	468c      	mov	ip, r1
 8000a04:	4619      	mov	r1, r3
 8000a06:	4663      	mov	r3, ip
 8000a08:	e000      	b.n	8000a0c <__aeabi_cdcmpeq>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdcmpeq>:
 8000a0c:	b501      	push	{r0, lr}
 8000a0e:	f7ff ffb7 	bl	8000980 <__cmpdf2>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	bf48      	it	mi
 8000a16:	f110 0f00 	cmnmi.w	r0, #0
 8000a1a:	bd01      	pop	{r0, pc}

08000a1c <__aeabi_dcmpeq>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff fff4 	bl	8000a0c <__aeabi_cdcmpeq>
 8000a24:	bf0c      	ite	eq
 8000a26:	2001      	moveq	r0, #1
 8000a28:	2000      	movne	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmplt>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffea 	bl	8000a0c <__aeabi_cdcmpeq>
 8000a38:	bf34      	ite	cc
 8000a3a:	2001      	movcc	r0, #1
 8000a3c:	2000      	movcs	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmple>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffe0 	bl	8000a0c <__aeabi_cdcmpeq>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpge>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffce 	bl	80009fc <__aeabi_cdrcmple>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpgt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffc4 	bl	80009fc <__aeabi_cdrcmple>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpun>:
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__aeabi_dcmpun+0x10>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d10a      	bne.n	8000aa6 <__aeabi_dcmpun+0x26>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__aeabi_dcmpun+0x20>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_dcmpun+0x26>
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0001 	mov.w	r0, #1
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2uiz>:
 8000aac:	004a      	lsls	r2, r1, #1
 8000aae:	d211      	bcs.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d211      	bcs.n	8000ada <__aeabi_d2uiz+0x2e>
 8000ab6:	d50d      	bpl.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d40e      	bmi.n	8000ae0 <__aeabi_d2uiz+0x34>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ade:	d102      	bne.n	8000ae6 <__aeabi_d2uiz+0x3a>
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	4770      	bx	lr
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	4770      	bx	lr

08000aec <__aeabi_ldivmod>:
 8000aec:	b97b      	cbnz	r3, 8000b0e <__aeabi_ldivmod+0x22>
 8000aee:	b972      	cbnz	r2, 8000b0e <__aeabi_ldivmod+0x22>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bfbe      	ittt	lt
 8000af4:	2000      	movlt	r0, #0
 8000af6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000afa:	e006      	blt.n	8000b0a <__aeabi_ldivmod+0x1e>
 8000afc:	bf08      	it	eq
 8000afe:	2800      	cmpeq	r0, #0
 8000b00:	bf1c      	itt	ne
 8000b02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b06:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0a:	f000 b9bf 	b.w	8000e8c <__aeabi_idiv0>
 8000b0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b16:	2900      	cmp	r1, #0
 8000b18:	db09      	blt.n	8000b2e <__aeabi_ldivmod+0x42>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db1a      	blt.n	8000b54 <__aeabi_ldivmod+0x68>
 8000b1e:	f000 f84d 	bl	8000bbc <__udivmoddi4>
 8000b22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db1b      	blt.n	8000b70 <__aeabi_ldivmod+0x84>
 8000b38:	f000 f840 	bl	8000bbc <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	4252      	negs	r2, r2
 8000b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b52:	4770      	bx	lr
 8000b54:	4252      	negs	r2, r2
 8000b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5a:	f000 f82f 	bl	8000bbc <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4240      	negs	r0, r0
 8000b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f821 	bl	8000bbc <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b974 	b.w	8000e8c <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468e      	mov	lr, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14d      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4694      	mov	ip, r2
 8000bce:	d969      	bls.n	8000ca4 <__udivmoddi4+0xe8>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b152      	cbz	r2, 8000bec <__udivmoddi4+0x30>
 8000bd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bda:	f1c2 0120 	rsb	r1, r2, #32
 8000bde:	fa20 f101 	lsr.w	r1, r0, r1
 8000be2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bea:	4094      	lsls	r4, r2
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	0c21      	lsrs	r1, r4, #16
 8000bf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bf6:	fa1f f78c 	uxth.w	r7, ip
 8000bfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000bfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c02:	fb06 f107 	mul.w	r1, r6, r7
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 811f 	bcs.w	8000e54 <__udivmoddi4+0x298>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 811c 	bls.w	8000e54 <__udivmoddi4+0x298>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 f707 	mul.w	r7, r0, r7
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x92>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c40:	f080 810a 	bcs.w	8000e58 <__udivmoddi4+0x29c>
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	f240 8107 	bls.w	8000e58 <__udivmoddi4+0x29c>
 8000c4a:	4464      	add	r4, ip
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	1be4      	subs	r4, r4, r7
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa4>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xc2>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	f000 80ef 	beq.w	8000e4e <__udivmoddi4+0x292>
 8000c70:	2600      	movs	r6, #0
 8000c72:	e9c5 0100 	strd	r0, r1, [r5]
 8000c76:	4630      	mov	r0, r6
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f683 	clz	r6, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d14a      	bne.n	8000d1c <__udivmoddi4+0x160>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd4>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80f9 	bhi.w	8000e82 <__udivmoddi4+0x2c6>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	469e      	mov	lr, r3
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa4>
 8000c9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xec>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 8092 	bne.w	8000dd6 <__udivmoddi4+0x21a>
 8000cb2:	eba1 010c 	sub.w	r1, r1, ip
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f fe8c 	uxth.w	lr, ip
 8000cbe:	2601      	movs	r6, #1
 8000cc0:	0c20      	lsrs	r0, r4, #16
 8000cc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cce:	fb0e f003 	mul.w	r0, lr, r3
 8000cd2:	4288      	cmp	r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x12c>
 8000cd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x12a>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f200 80cb 	bhi.w	8000e7c <__udivmoddi4+0x2c0>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	1a09      	subs	r1, r1, r0
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x156>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d08:	d202      	bcs.n	8000d10 <__udivmoddi4+0x154>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f200 80bb 	bhi.w	8000e86 <__udivmoddi4+0x2ca>
 8000d10:	4608      	mov	r0, r1
 8000d12:	eba4 040e 	sub.w	r4, r4, lr
 8000d16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x9a>
 8000d1c:	f1c6 0720 	rsb	r7, r6, #32
 8000d20:	40b3      	lsls	r3, r6
 8000d22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d32:	431c      	orrs	r4, r3
 8000d34:	40f9      	lsrs	r1, r7
 8000d36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d42:	0c20      	lsrs	r0, r4, #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fb09 1118 	mls	r1, r9, r8, r1
 8000d4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d50:	fb08 f00e 	mul.w	r0, r8, lr
 8000d54:	4288      	cmp	r0, r1
 8000d56:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5a:	d90b      	bls.n	8000d74 <__udivmoddi4+0x1b8>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d64:	f080 8088 	bcs.w	8000e78 <__udivmoddi4+0x2bc>
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	f240 8085 	bls.w	8000e78 <__udivmoddi4+0x2bc>
 8000d6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	458e      	cmp	lr, r1
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1e2>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d94:	d26c      	bcs.n	8000e70 <__udivmoddi4+0x2b4>
 8000d96:	458e      	cmp	lr, r1
 8000d98:	d96a      	bls.n	8000e70 <__udivmoddi4+0x2b4>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4461      	add	r1, ip
 8000d9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da2:	fba0 9402 	umull	r9, r4, r0, r2
 8000da6:	eba1 010e 	sub.w	r1, r1, lr
 8000daa:	42a1      	cmp	r1, r4
 8000dac:	46c8      	mov	r8, r9
 8000dae:	46a6      	mov	lr, r4
 8000db0:	d356      	bcc.n	8000e60 <__udivmoddi4+0x2a4>
 8000db2:	d053      	beq.n	8000e5c <__udivmoddi4+0x2a0>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x212>
 8000db6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dba:	eb61 010e 	sbc.w	r1, r1, lr
 8000dbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dc6:	40f1      	lsrs	r1, r6
 8000dc8:	431f      	orrs	r7, r3
 8000dca:	e9c5 7100 	strd	r7, r1, [r5]
 8000dce:	2600      	movs	r6, #0
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	f1c2 0320 	rsb	r3, r2, #32
 8000dda:	40d8      	lsrs	r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa21 f303 	lsr.w	r3, r1, r3
 8000de4:	4091      	lsls	r1, r2
 8000de6:	4301      	orrs	r1, r0
 8000de8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dec:	fa1f fe8c 	uxth.w	lr, ip
 8000df0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df4:	fb07 3610 	mls	r6, r7, r0, r3
 8000df8:	0c0b      	lsrs	r3, r1, #16
 8000dfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000e02:	429e      	cmp	r6, r3
 8000e04:	fa04 f402 	lsl.w	r4, r4, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x260>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e12:	d22f      	bcs.n	8000e74 <__udivmoddi4+0x2b8>
 8000e14:	429e      	cmp	r6, r3
 8000e16:	d92d      	bls.n	8000e74 <__udivmoddi4+0x2b8>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1b9b      	subs	r3, r3, r6
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e24:	fb07 3316 	mls	r3, r7, r6, r3
 8000e28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x28a>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e3c:	d216      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d914      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e42:	3e02      	subs	r6, #2
 8000e44:	4461      	add	r1, ip
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e4c:	e738      	b.n	8000cc0 <__udivmoddi4+0x104>
 8000e4e:	462e      	mov	r6, r5
 8000e50:	4628      	mov	r0, r5
 8000e52:	e705      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000e54:	4606      	mov	r6, r0
 8000e56:	e6e3      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6f8      	b.n	8000c4e <__udivmoddi4+0x92>
 8000e5c:	454b      	cmp	r3, r9
 8000e5e:	d2a9      	bcs.n	8000db4 <__udivmoddi4+0x1f8>
 8000e60:	ebb9 0802 	subs.w	r8, r9, r2
 8000e64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e7a3      	b.n	8000db4 <__udivmoddi4+0x1f8>
 8000e6c:	4646      	mov	r6, r8
 8000e6e:	e7ea      	b.n	8000e46 <__udivmoddi4+0x28a>
 8000e70:	4620      	mov	r0, r4
 8000e72:	e794      	b.n	8000d9e <__udivmoddi4+0x1e2>
 8000e74:	4640      	mov	r0, r8
 8000e76:	e7d1      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e78:	46d0      	mov	r8, sl
 8000e7a:	e77b      	b.n	8000d74 <__udivmoddi4+0x1b8>
 8000e7c:	3b02      	subs	r3, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	e732      	b.n	8000ce8 <__udivmoddi4+0x12c>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e709      	b.n	8000c9a <__udivmoddi4+0xde>
 8000e86:	4464      	add	r4, ip
 8000e88:	3802      	subs	r0, #2
 8000e8a:	e742      	b.n	8000d12 <__udivmoddi4+0x156>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <pwmzhongduankongzhi>:
bujinpwm dianji[4];
uint16_t jjj[10];
uint16_t dingshi;

void pwmzhongduankongzhi(void)
{
 8000e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0

	//如果用的不是pwm方式，首先交换引脚电平给出脉冲�??
	jjj[0] = TIM4->CNT;
 8000e98:	4bac      	ldr	r3, [pc, #688]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4aac      	ldr	r2, [pc, #688]	; (8001150 <pwmzhongduankongzhi+0x2c0>)
 8000ea0:	8013      	strh	r3, [r2, #0]

	if(PWMKUANDU > 0 )//判断电机方向，增加绝对位置或者减少绝对位
 8000ea2:	4baa      	ldr	r3, [pc, #680]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8000ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d01d      	beq.n	8000ee6 <pwmzhongduankongzhi+0x56>
	{
		if(dianji[0].dangqiansudu > 0)dianji[0].dangqianweizhi++;
 8000eaa:	4baa      	ldr	r3, [pc, #680]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	2a01      	cmp	r2, #1
 8000eb2:	f173 0300 	sbcs.w	r3, r3, #0
 8000eb6:	db08      	blt.n	8000eca <pwmzhongduankongzhi+0x3a>
 8000eb8:	4ba6      	ldr	r3, [pc, #664]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000eba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000ebe:	1c50      	adds	r0, r2, #1
 8000ec0:	f143 0100 	adc.w	r1, r3, #0
 8000ec4:	4ba3      	ldr	r3, [pc, #652]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000ec6:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
		if(dianji[0].dangqiansudu < 0)dianji[0].dangqianweizhi--;
 8000eca:	4ba2      	ldr	r3, [pc, #648]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	da08      	bge.n	8000ee6 <pwmzhongduankongzhi+0x56>
 8000ed4:	4b9f      	ldr	r3, [pc, #636]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000ed6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000eda:	1e54      	subs	r4, r2, #1
 8000edc:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000ee0:	4b9c      	ldr	r3, [pc, #624]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000ee2:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
	}

	//判断电机正转还是反转
	if(dianji[0].dangqiansudu > 0)
 8000ee6:	4b9b      	ldr	r3, [pc, #620]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	2a01      	cmp	r2, #1
 8000eee:	f173 0300 	sbcs.w	r3, r3, #0
 8000ef2:	db5a      	blt.n	8000faa <pwmzhongduankongzhi+0x11a>
	{

		//设置方向引脚输出-20230322
		//--------------------------------------------------------------速度控制�???-20230322
		if(dianji[0].yudingsudu > dianji[0].dangqiansudu)// 如果没有达到�???大度，继续加�???-20230322
 8000ef4:	4b97      	ldr	r3, [pc, #604]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000ef6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000efa:	4996      	ldr	r1, [pc, #600]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f00:	4290      	cmp	r0, r2
 8000f02:	eb71 0303 	sbcs.w	r3, r1, r3
 8000f06:	da07      	bge.n	8000f18 <pwmzhongduankongzhi+0x88>
		{
			dianji[0].sudukongzhi = 1;
 8000f08:	4992      	ldr	r1, [pc, #584]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f0a:	f04f 0201 	mov.w	r2, #1
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000f16:	e006      	b.n	8000f26 <pwmzhongduankongzhi+0x96>
		}else{
			dianji[0].sudukongzhi = 0;//否则不加�???-20230322
 8000f18:	498e      	ldr	r1, [pc, #568]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
		dianji[0].tingzhiweizhi = dianji[0].dangqianweizhi + dianji[0].dangqiansudu;// 计算得到当前停止�??????
 8000f26:	4b8b      	ldr	r3, [pc, #556]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f28:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000f2c:	4b89      	ldr	r3, [pc, #548]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	1884      	adds	r4, r0, r2
 8000f34:	613c      	str	r4, [r7, #16]
 8000f36:	eb41 0303 	adc.w	r3, r1, r3
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	4b85      	ldr	r3, [pc, #532]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000f42:	e9c3 1206 	strd	r1, r2, [r3, #24]
		// 判断电机是否�???要减�???-20230322
		if(dianji[0].tingzhiweizhi >= dianji[0].yudingweizhi)
 8000f46:	4b83      	ldr	r3, [pc, #524]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f48:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000f4c:	4b81      	ldr	r3, [pc, #516]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f4e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f52:	4290      	cmp	r0, r2
 8000f54:	eb71 0303 	sbcs.w	r3, r1, r3
 8000f58:	db06      	blt.n	8000f68 <pwmzhongduankongzhi+0xd8>
		{
			dianji[0].sudukongzhi = -1;
 8000f5a:	497e      	ldr	r1, [pc, #504]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
		dianji[0].dangqiansudu = dianji[0].dangqiansudu + dianji[0].sudukongzhi;
 8000f68:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f6e:	4b79      	ldr	r3, [pc, #484]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f74:	1884      	adds	r4, r0, r2
 8000f76:	60bc      	str	r4, [r7, #8]
 8000f78:	eb41 0303 	adc.w	r3, r1, r3
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b75      	ldr	r3, [pc, #468]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000f84:	e9c3 1200 	strd	r1, r2, [r3]
		//DINGSHIQICHONGZHI =jiasuliebiao[ dianji[0].dangqiansudu];// 设置定时器中断时�??????
		//DINGSHIQICHONGZHI = 32000000 / ( sqrt(250000 + 2 * 50000 * dianji[0].dangqiansudu));
		DINGSHIQICHONGZHI = dianji[0].dingshi;
 8000f88:	4b72      	ldr	r3, [pc, #456]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000f8a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000f8e:	4b6f      	ldr	r3, [pc, #444]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
		//---------------------------------------------------------------
		if(PWMKUANDU == 0)
 8000f92:	4b6e      	ldr	r3, [pc, #440]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8000f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d107      	bne.n	8000faa <pwmzhongduankongzhi+0x11a>
		{
			while(DINGSHIQIZHI <= ccr);
 8000f9a:	bf00      	nop
 8000f9c:	4b6b      	ldr	r3, [pc, #428]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d9fb      	bls.n	8000f9c <pwmzhongduankongzhi+0x10c>
			PWMKUANDU = ccr;
 8000fa4:	4b69      	ldr	r3, [pc, #420]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8000fa6:	2264      	movs	r2, #100	; 0x64
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	if(dianji[0].dangqiansudu < 0)
 8000faa:	4b6a      	ldr	r3, [pc, #424]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	da57      	bge.n	8001064 <pwmzhongduankongzhi+0x1d4>
	{
		//设置方向引脚输出-20230322

		//--------------------------------------------------------------速度控制�???-20230322
		if(dianji[0].yudingsudu < dianji[0].dangqiansudu)// 如果没有达到�???大度，继续加�???-20230322
 8000fb4:	4b67      	ldr	r3, [pc, #412]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000fb6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fba:	4b66      	ldr	r3, [pc, #408]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	4290      	cmp	r0, r2
 8000fc2:	eb71 0303 	sbcs.w	r3, r1, r3
 8000fc6:	da07      	bge.n	8000fd8 <pwmzhongduankongzhi+0x148>
		{
			dianji[0].sudukongzhi = -1;
 8000fc8:	4962      	ldr	r1, [pc, #392]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000fca:	f04f 32ff 	mov.w	r2, #4294967295
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd6:	e006      	b.n	8000fe6 <pwmzhongduankongzhi+0x156>
		}else{
			dianji[0].sudukongzhi = 0;//否则不加�???-20230322
 8000fd8:	495e      	ldr	r1, [pc, #376]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
		dianji[0].tingzhiweizhi = dianji[0].dangqianweizhi + dianji[0].dangqiansudu;// 计算得到当前停止�??????
 8000fe6:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000fe8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000fec:	4b59      	ldr	r3, [pc, #356]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	1884      	adds	r4, r0, r2
 8000ff4:	603c      	str	r4, [r7, #0]
 8000ff6:	eb41 0303 	adc.w	r3, r1, r3
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	4b55      	ldr	r3, [pc, #340]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8000ffe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001002:	e9c3 1206 	strd	r1, r2, [r3, #24]
		// 判断电机是否�???要减�???-20230322
		if(dianji[0].tingzhiweizhi <= dianji[0].yudingweizhi)
 8001006:	4b53      	ldr	r3, [pc, #332]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8001008:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800100c:	4951      	ldr	r1, [pc, #324]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 800100e:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
 8001012:	4290      	cmp	r0, r2
 8001014:	eb71 0303 	sbcs.w	r3, r1, r3
 8001018:	db06      	blt.n	8001028 <pwmzhongduankongzhi+0x198>
		{
			dianji[0].sudukongzhi = 1;
 800101a:	494e      	ldr	r1, [pc, #312]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 800101c:	f04f 0201 	mov.w	r2, #1
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
		dianji[0].dangqiansudu = dianji[0].dangqiansudu + dianji[0].sudukongzhi;
 8001028:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 800102a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800102e:	4b49      	ldr	r3, [pc, #292]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8001030:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001034:	eb10 0a02 	adds.w	sl, r0, r2
 8001038:	eb41 0b03 	adc.w	fp, r1, r3
 800103c:	4b45      	ldr	r3, [pc, #276]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 800103e:	e9c3 ab00 	strd	sl, fp, [r3]
		//DINGSHIQICHONGZHI =jiasuliebiao[ -dianji[0].dangqiansudu];// 设置定时器中断时�??????
		//DINGSHIQICHONGZHI = 32000000 / ( sqrt(250000 + 2 * 50000 * (-dianji[0].dangqiansudu)));
		DINGSHIQICHONGZHI = dianji[0].dingshi;
 8001042:	4b44      	ldr	r3, [pc, #272]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8001044:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001048:	4b40      	ldr	r3, [pc, #256]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
		//---------------------------------------------------------------
		if(PWMKUANDU == 0)
 800104c:	4b3f      	ldr	r3, [pc, #252]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 800104e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <pwmzhongduankongzhi+0x1d4>
		{
			while(DINGSHIQIZHI <= ccr);
 8001054:	bf00      	nop
 8001056:	4b3d      	ldr	r3, [pc, #244]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d9fb      	bls.n	8001056 <pwmzhongduankongzhi+0x1c6>
			PWMKUANDU = ccr;
 800105e:	4b3b      	ldr	r3, [pc, #236]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8001060:	2264      	movs	r2, #100	; 0x64
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}

	if(dianji[0].dangqiansudu == 0)
 8001064:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	4313      	orrs	r3, r2
 800106c:	d145      	bne.n	80010fa <pwmzhongduankongzhi+0x26a>
	{
		PWMKUANDU = 0;
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8001070:	2200      	movs	r2, #0
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
			if(dianji[0].dangqianweizhi < dianji[0].yudingweizhi)
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8001076:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 800107c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001080:	4290      	cmp	r0, r2
 8001082:	eb71 0303 	sbcs.w	r3, r1, r3
 8001086:	da14      	bge.n	80010b2 <pwmzhongduankongzhi+0x222>
			{
				  dianji[0].yudingsudu = dianji[0].zuidasudu;
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 800108a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800108e:	4931      	ldr	r1, [pc, #196]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8001090:	e9c1 2302 	strd	r2, r3, [r1, #8]
				  dianji[0].dangqiansudu = 1;
 8001094:	492f      	ldr	r1, [pc, #188]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8001096:	f04f 0201 	mov.w	r2, #1
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	e9c1 2300 	strd	r2, r3, [r1]
				  while(DINGSHIQIZHI <= ccr);
 80010a2:	bf00      	nop
 80010a4:	4b29      	ldr	r3, [pc, #164]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	2b64      	cmp	r3, #100	; 0x64
 80010aa:	d9fb      	bls.n	80010a4 <pwmzhongduankongzhi+0x214>
				  PWMKUANDU = ccr;
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 80010ae:	2264      	movs	r2, #100	; 0x64
 80010b0:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(dianji[0].dangqianweizhi > dianji[0].yudingweizhi)
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 80010b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010b8:	4926      	ldr	r1, [pc, #152]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 80010ba:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
 80010be:	4290      	cmp	r0, r2
 80010c0:	eb71 0303 	sbcs.w	r3, r1, r3
 80010c4:	da19      	bge.n	80010fa <pwmzhongduankongzhi+0x26a>
			{
				  dianji[0].yudingsudu = -dianji[0].zuidasudu;
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 80010c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010cc:	2100      	movs	r1, #0
 80010ce:	f1d2 0800 	rsbs	r8, r2, #0
 80010d2:	eb61 0903 	sbc.w	r9, r1, r3
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 80010d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
				  dianji[0].dangqiansudu = -1;
 80010dc:	491d      	ldr	r1, [pc, #116]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 80010de:	f04f 32ff 	mov.w	r2, #4294967295
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e9c1 2300 	strd	r2, r3, [r1]
				  while(DINGSHIQIZHI <= ccr);
 80010ea:	bf00      	nop
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	2b64      	cmp	r3, #100	; 0x64
 80010f2:	d9fb      	bls.n	80010ec <pwmzhongduankongzhi+0x25c>
				  PWMKUANDU = ccr;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 80010f6:	2264      	movs	r2, #100	; 0x64
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
			}
	}
	if(dianji[0].dangqiansudu > 0)
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	2a01      	cmp	r2, #1
 8001102:	f173 0300 	sbcs.w	r3, r3, #0
 8001106:	db08      	blt.n	800111a <pwmzhongduankongzhi+0x28a>
		{
		dianji[0].shijifangxiang = 1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 800110a:	2201      	movs	r2, #1
 800110c:	649a      	str	r2, [r3, #72]	; 0x48
			FANGXIANGZHENG;
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <pwmzhongduankongzhi+0x2c8>)
 8001116:	f001 fc47 	bl	80029a8 <HAL_GPIO_WritePin>
		}
	if(dianji[0].dangqiansudu < 0)
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	2b00      	cmp	r3, #0
 8001122:	da08      	bge.n	8001136 <pwmzhongduankongzhi+0x2a6>
		{
		dianji[0].shijifangxiang = 0;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <pwmzhongduankongzhi+0x2c4>)
 8001126:	2200      	movs	r2, #0
 8001128:	649a      	str	r2, [r3, #72]	; 0x48
			FANGXIANGFAN;
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <pwmzhongduankongzhi+0x2c8>)
 8001132:	f001 fc39 	bl	80029a8 <HAL_GPIO_WritePin>
		}
	jjj[1] = TIM4->CNT;
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <pwmzhongduankongzhi+0x2bc>)
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <pwmzhongduankongzhi+0x2c0>)
 800113e:	805a      	strh	r2, [r3, #2]
	//判断下一个脉冲所�?????????要延迟的时间，设置定时器�?????????
	// 如果目标位置和当前位置重合，做出动作
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800114a:	bf00      	nop
 800114c:	40000800 	.word	0x40000800
 8001150:	200001d8 	.word	0x200001d8
 8001154:	20000098 	.word	0x20000098
 8001158:	40020800 	.word	0x40020800

0800115c <s2b2>:
//参数1 初始速度
//参数2 加速度
//参数3 目标速度
//返回达到目标速度所需的步数
uint64_t s2b2(uint64_t u,uint64_t a ,uint64_t s)
{
 800115c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001160:	b088      	sub	sp, #32
 8001162:	af00      	add	r7, sp, #0
 8001164:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001168:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t i = 0,x;
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//chuankoufasong(210,s);

	x =(uint64_t) (s * s);
 8001178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800117a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800117c:	fb03 f202 	mul.w	r2, r3, r2
 8001180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001182:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001184:	fb01 f303 	mul.w	r3, r1, r3
 8001188:	441a      	add	r2, r3
 800118a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800118c:	fba3 8903 	umull	r8, r9, r3, r3
 8001190:	eb02 0309 	add.w	r3, r2, r9
 8001194:	4699      	mov	r9, r3
 8001196:	e9c7 8904 	strd	r8, r9, [r7, #16]
 800119a:	e9c7 8904 	strd	r8, r9, [r7, #16]
	//chuankoufasong(211,x);
	//chuankoufasong(213,a);
	x = (x - u*u)/2/a;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	fb03 f202 	mul.w	r2, r3, r2
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	fb01 f303 	mul.w	r3, r1, r3
 80011ae:	441a      	add	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	fba3 4503 	umull	r4, r5, r3, r3
 80011b6:	1953      	adds	r3, r2, r5
 80011b8:	461d      	mov	r5, r3
 80011ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011be:	ebb2 0a04 	subs.w	sl, r2, r4
 80011c2:	eb63 0b05 	sbc.w	fp, r3, r5
 80011c6:	f04f 0000 	mov.w	r0, #0
 80011ca:	f04f 0100 	mov.w	r1, #0
 80011ce:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80011d2:	ea40 70cb 	orr.w	r0, r0, fp, lsl #31
 80011d6:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80011da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011de:	f7ff fcd5 	bl	8000b8c <__aeabi_uldivmod>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//chuankoufasong(212,x);
	return x;
 80011ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080011fc <duqu>:
 extern UART_HandleTypeDef huart1;
 extern bujinpwm dianji[4];
 uint8_t jieshou1zongchangdu = 30,jieshou1[30];
 volatile uint32_t jieshou1changdu,jieshou1tim=0;
 void duqu(int64_t d)
 {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	e9c7 0100 	strd	r0, r1, [r7]
	 jieshou1[5] = (d>>56) & 0xff;
 8001206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	0e0a      	lsrs	r2, r1, #24
 8001214:	2300      	movs	r3, #0
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <duqu+0xc4>)
 800121a:	715a      	strb	r2, [r3, #5]
	 jieshou1[6] = (d>>48) & 0xff;
 800121c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	140a      	asrs	r2, r1, #16
 800122a:	17cb      	asrs	r3, r1, #31
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <duqu+0xc4>)
 8001230:	719a      	strb	r2, [r3, #6]
	 jieshou1[7] = (d>>40) & 0xff;
 8001232:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	120a      	asrs	r2, r1, #8
 8001240:	17cb      	asrs	r3, r1, #31
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <duqu+0xc4>)
 8001246:	71da      	strb	r2, [r3, #7]
	 jieshou1[8] = (d>>32) & 0xff;
 8001248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	000a      	movs	r2, r1
 8001256:	17cb      	asrs	r3, r1, #31
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <duqu+0xc4>)
 800125c:	721a      	strb	r2, [r3, #8]
	 jieshou1[9] = (d>>24) & 0xff;
 800125e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	0e02      	lsrs	r2, r0, #24
 800126c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001270:	160b      	asrs	r3, r1, #24
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <duqu+0xc4>)
 8001276:	725a      	strb	r2, [r3, #9]
	 jieshou1[10] = (d>>16) & 0xff;
 8001278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	0c02      	lsrs	r2, r0, #16
 8001286:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800128a:	140b      	asrs	r3, r1, #16
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <duqu+0xc4>)
 8001290:	729a      	strb	r2, [r3, #10]
	 jieshou1[11] = (d>>8) & 0xff;
 8001292:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	0a02      	lsrs	r2, r0, #8
 80012a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012a4:	120b      	asrs	r3, r1, #8
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <duqu+0xc4>)
 80012aa:	72da      	strb	r2, [r3, #11]
	 jieshou1[12] = (d) & 0xff;
 80012ac:	783a      	ldrb	r2, [r7, #0]
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <duqu+0xc4>)
 80012b0:	731a      	strb	r2, [r3, #12]
 }
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200009f0 	.word	0x200009f0

080012c4 <shujuduqu>:
 void shujuduqu(void)
 {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	 if(jieshou1[3] == 0)//寄存器部分
 80012c8:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <shujuduqu+0x1bc>)
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f040 8082 	bne.w	80013d6 <shujuduqu+0x112>
	 {
		 jieshou1[5] = (jicunqi[ jieshou1[4]]>>56) & 0xff;
 80012d2:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <shujuduqu+0x1bc>)
 80012d4:	791b      	ldrb	r3, [r3, #4]
 80012d6:	4a6b      	ldr	r2, [pc, #428]	; (8001484 <shujuduqu+0x1c0>)
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	0e0a      	lsrs	r2, r1, #24
 80012ee:	2300      	movs	r3, #0
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	4b63      	ldr	r3, [pc, #396]	; (8001480 <shujuduqu+0x1bc>)
 80012f4:	715a      	strb	r2, [r3, #5]
		 jieshou1[6] = (jicunqi[jieshou1[4]]>>48) & 0xff;
 80012f6:	4b62      	ldr	r3, [pc, #392]	; (8001480 <shujuduqu+0x1bc>)
 80012f8:	791b      	ldrb	r3, [r3, #4]
 80012fa:	4a62      	ldr	r2, [pc, #392]	; (8001484 <shujuduqu+0x1c0>)
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	140a      	asrs	r2, r1, #16
 800130e:	17cb      	asrs	r3, r1, #31
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <shujuduqu+0x1bc>)
 8001314:	719a      	strb	r2, [r3, #6]
		 jieshou1[7] = (jicunqi[jieshou1[4]]>>40) & 0xff;
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <shujuduqu+0x1bc>)
 8001318:	791b      	ldrb	r3, [r3, #4]
 800131a:	4a5a      	ldr	r2, [pc, #360]	; (8001484 <shujuduqu+0x1c0>)
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4413      	add	r3, r2
 8001320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	120a      	asrs	r2, r1, #8
 800132e:	17cb      	asrs	r3, r1, #31
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <shujuduqu+0x1bc>)
 8001334:	71da      	strb	r2, [r3, #7]
		 jieshou1[8] = (jicunqi[jieshou1[4]]>>32) & 0xff;
 8001336:	4b52      	ldr	r3, [pc, #328]	; (8001480 <shujuduqu+0x1bc>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	4a52      	ldr	r2, [pc, #328]	; (8001484 <shujuduqu+0x1c0>)
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	000a      	movs	r2, r1
 800134e:	17cb      	asrs	r3, r1, #31
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <shujuduqu+0x1bc>)
 8001354:	721a      	strb	r2, [r3, #8]
		 jieshou1[9] = (jicunqi[jieshou1[4]]>>24) & 0xff;
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <shujuduqu+0x1bc>)
 8001358:	791b      	ldrb	r3, [r3, #4]
 800135a:	4a4a      	ldr	r2, [pc, #296]	; (8001484 <shujuduqu+0x1c0>)
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	0e02      	lsrs	r2, r0, #24
 800136e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001372:	160b      	asrs	r3, r1, #24
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <shujuduqu+0x1bc>)
 8001378:	725a      	strb	r2, [r3, #9]
		 jieshou1[10] = (jicunqi[jieshou1[4]]>>16) & 0xff;
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <shujuduqu+0x1bc>)
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	4a41      	ldr	r2, [pc, #260]	; (8001484 <shujuduqu+0x1c0>)
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	0c02      	lsrs	r2, r0, #16
 8001392:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001396:	140b      	asrs	r3, r1, #16
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <shujuduqu+0x1bc>)
 800139c:	729a      	strb	r2, [r3, #10]
		 jieshou1[11] = (jicunqi[jieshou1[4]]>>8) & 0xff;
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <shujuduqu+0x1bc>)
 80013a0:	791b      	ldrb	r3, [r3, #4]
 80013a2:	4a38      	ldr	r2, [pc, #224]	; (8001484 <shujuduqu+0x1c0>)
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4413      	add	r3, r2
 80013a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	0a02      	lsrs	r2, r0, #8
 80013b6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013ba:	120b      	asrs	r3, r1, #8
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <shujuduqu+0x1bc>)
 80013c0:	72da      	strb	r2, [r3, #11]
		 jieshou1[12] = (jicunqi[jieshou1[4]]) & 0xff;
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <shujuduqu+0x1bc>)
 80013c4:	791b      	ldrb	r3, [r3, #4]
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <shujuduqu+0x1c0>)
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <shujuduqu+0x1bc>)
 80013d4:	731a      	strb	r2, [r3, #12]
	 }
	 if(jieshou1[3] == 1)//只读部分
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <shujuduqu+0x1bc>)
 80013d8:	78db      	ldrb	r3, [r3, #3]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d145      	bne.n	800146a <shujuduqu+0x1a6>
	 {
		 if(jieshou1[4] == 0)//当前位置
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <shujuduqu+0x1bc>)
 80013e0:	791b      	ldrb	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <shujuduqu+0x130>
		 {
			 duqu(dianji[0].dangqianweizhi);
 80013e6:	4b28      	ldr	r3, [pc, #160]	; (8001488 <shujuduqu+0x1c4>)
 80013e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff ff04 	bl	80011fc <duqu>
		 }
		 if(jieshou1[4] == 1)//当前速度
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <shujuduqu+0x1bc>)
 80013f6:	791b      	ldrb	r3, [r3, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d106      	bne.n	800140a <shujuduqu+0x146>
		 {
			 duqu(dianji[0].dangqiansudu);
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <shujuduqu+0x1c4>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fef9 	bl	80011fc <duqu>
		 }
		 if(jieshou1[4] == 2)//当前刹车停止位置
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <shujuduqu+0x1bc>)
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d106      	bne.n	8001420 <shujuduqu+0x15c>
		 {
			 duqu(dianji[0].tingzhiweizhi);
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <shujuduqu+0x1c4>)
 8001414:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff feee 	bl	80011fc <duqu>
		 }
		 if(jieshou1[4] == 3)//定时CNT
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <shujuduqu+0x1bc>)
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d10a      	bne.n	800143e <shujuduqu+0x17a>
		 {
			 duqu(dianji[0].dingshi);
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <shujuduqu+0x1c4>)
 800142a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800142e:	b29b      	uxth	r3, r3
 8001430:	2200      	movs	r2, #0
 8001432:	461c      	mov	r4, r3
 8001434:	4615      	mov	r5, r2
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7ff fedf 	bl	80011fc <duqu>
		 }
		 if(jieshou1[4] == 4)//速度控制
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <shujuduqu+0x1bc>)
 8001440:	791b      	ldrb	r3, [r3, #4]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d106      	bne.n	8001454 <shujuduqu+0x190>
		 {
			 duqu(dianji[0].sudukongzhi);
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <shujuduqu+0x1c4>)
 8001448:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fed4 	bl	80011fc <duqu>
		 }
		 if(jieshou1[4] == 5)//返回外部中断记录的位置
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <shujuduqu+0x1bc>)
 8001456:	791b      	ldrb	r3, [r3, #4]
 8001458:	2b05      	cmp	r3, #5
 800145a:	d106      	bne.n	800146a <shujuduqu+0x1a6>
		 {
			 duqu(dianji[0].jiluweizhi);
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <shujuduqu+0x1c4>)
 800145e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fec9 	bl	80011fc <duqu>
		 }

	 }


	 HAL_UART_Transmit(duankou, jieshou1 ,15,100);
 800146a:	2364      	movs	r3, #100	; 0x64
 800146c:	220f      	movs	r2, #15
 800146e:	4904      	ldr	r1, [pc, #16]	; (8001480 <shujuduqu+0x1bc>)
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <shujuduqu+0x1c8>)
 8001472:	f002 ff64 	bl	800433e <HAL_UART_Transmit>

	 duankou1qingchu();//清除数据
 8001476:	f000 f921 	bl	80016bc <duankou1qingchu>
 }
 800147a:	bf00      	nop
 800147c:	bdb0      	pop	{r4, r5, r7, pc}
 800147e:	bf00      	nop
 8001480:	200009f0 	.word	0x200009f0
 8001484:	200001f0 	.word	0x200001f0
 8001488:	20000098 	.word	0x20000098
 800148c:	20000aac 	.word	0x20000aac

08001490 <shujuxieru>:
 void shujuxieru(void)
 {
 8001490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001494:	b09b      	sub	sp, #108	; 0x6c
 8001496:	af00      	add	r7, sp, #0
	 if(jieshou1[3] == 0)
 8001498:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <shujuxieru+0x188>)
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f040 80ad 	bne.w	80015fc <shujuxieru+0x16c>
	 {
		 jicunqi[jieshou1[4]] = ((int64_t)jieshou1[5]<<56) + ((int64_t)jieshou1[6]<<48) + ((int64_t)jieshou1[7]<<40) +
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <shujuxieru+0x188>)
 80014a4:	795b      	ldrb	r3, [r3, #5]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2200      	movs	r2, #0
 80014aa:	663b      	str	r3, [r7, #96]	; 0x60
 80014ac:	667a      	str	r2, [r7, #100]	; 0x64
 80014ae:	f04f 0000 	mov.w	r0, #0
 80014b2:	f04f 0100 	mov.w	r1, #0
 80014b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014b8:	0619      	lsls	r1, r3, #24
 80014ba:	2000      	movs	r0, #0
 80014bc:	4b56      	ldr	r3, [pc, #344]	; (8001618 <shujuxieru+0x188>)
 80014be:	799b      	ldrb	r3, [r3, #6]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2200      	movs	r2, #0
 80014c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80014c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 80014d2:	0433      	lsls	r3, r6, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	1884      	adds	r4, r0, r2
 80014d8:	eb41 0503 	adc.w	r5, r1, r3
 80014dc:	4b4e      	ldr	r3, [pc, #312]	; (8001618 <shujuxieru+0x188>)
 80014de:	79db      	ldrb	r3, [r3, #7]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2200      	movs	r2, #0
 80014e4:	653b      	str	r3, [r7, #80]	; 0x50
 80014e6:	657a      	str	r2, [r7, #84]	; 0x54
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80014f2:	020b      	lsls	r3, r1, #8
 80014f4:	2200      	movs	r2, #0
 80014f6:	eb14 0802 	adds.w	r8, r4, r2
 80014fa:	eb45 0903 	adc.w	r9, r5, r3
				 ((int64_t)jieshou1[8]<<32) + ((int64_t)jieshou1[9]<<24) + ((int64_t)jieshou1[10]<<16) + ((int64_t)jieshou1[11]<<8) + jieshou1[12];
 80014fe:	4b46      	ldr	r3, [pc, #280]	; (8001618 <shujuxieru+0x188>)
 8001500:	7a1b      	ldrb	r3, [r3, #8]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2200      	movs	r2, #0
 8001506:	64bb      	str	r3, [r7, #72]	; 0x48
 8001508:	64fa      	str	r2, [r7, #76]	; 0x4c
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001514:	000b      	movs	r3, r1
 8001516:	2200      	movs	r2, #0
		 jicunqi[jieshou1[4]] = ((int64_t)jieshou1[5]<<56) + ((int64_t)jieshou1[6]<<48) + ((int64_t)jieshou1[7]<<40) +
 8001518:	eb18 0102 	adds.w	r1, r8, r2
 800151c:	6439      	str	r1, [r7, #64]	; 0x40
 800151e:	eb49 0303 	adc.w	r3, r9, r3
 8001522:	647b      	str	r3, [r7, #68]	; 0x44
				 ((int64_t)jieshou1[8]<<32) + ((int64_t)jieshou1[9]<<24) + ((int64_t)jieshou1[10]<<16) + ((int64_t)jieshou1[11]<<8) + jieshou1[12];
 8001524:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <shujuxieru+0x188>)
 8001526:	7a5b      	ldrb	r3, [r3, #9]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2200      	movs	r2, #0
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
 800152e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001530:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001534:	460b      	mov	r3, r1
 8001536:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 800153a:	460b      	mov	r3, r1
 800153c:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8001540:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001544:	460b      	mov	r3, r1
 8001546:	eb13 030a 	adds.w	r3, r3, sl
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
 800154c:	4613      	mov	r3, r2
 800154e:	eb43 030b 	adc.w	r3, r3, fp
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
 8001554:	4b30      	ldr	r3, [pc, #192]	; (8001618 <shujuxieru+0x188>)
 8001556:	7a9b      	ldrb	r3, [r3, #10]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2200      	movs	r2, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
 800155e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800156c:	4629      	mov	r1, r5
 800156e:	040b      	lsls	r3, r1, #16
 8001570:	4621      	mov	r1, r4
 8001572:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001576:	4621      	mov	r1, r4
 8001578:	040a      	lsls	r2, r1, #16
 800157a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800157e:	4621      	mov	r1, r4
 8001580:	1889      	adds	r1, r1, r2
 8001582:	6239      	str	r1, [r7, #32]
 8001584:	4629      	mov	r1, r5
 8001586:	eb43 0101 	adc.w	r1, r3, r1
 800158a:	6279      	str	r1, [r7, #36]	; 0x24
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <shujuxieru+0x188>)
 800158e:	7adb      	ldrb	r3, [r3, #11]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2200      	movs	r2, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	61fa      	str	r2, [r7, #28]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80015a4:	4629      	mov	r1, r5
 80015a6:	020b      	lsls	r3, r1, #8
 80015a8:	4621      	mov	r1, r4
 80015aa:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80015ae:	4621      	mov	r1, r4
 80015b0:	020a      	lsls	r2, r1, #8
 80015b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015b6:	4621      	mov	r1, r4
 80015b8:	1889      	adds	r1, r1, r2
 80015ba:	6139      	str	r1, [r7, #16]
 80015bc:	4629      	mov	r1, r5
 80015be:	eb43 0101 	adc.w	r1, r3, r1
 80015c2:	6179      	str	r1, [r7, #20]
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <shujuxieru+0x188>)
 80015c6:	7b1b      	ldrb	r3, [r3, #12]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2200      	movs	r2, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	60fa      	str	r2, [r7, #12]
		 jicunqi[jieshou1[4]] = ((int64_t)jieshou1[5]<<56) + ((int64_t)jieshou1[6]<<48) + ((int64_t)jieshou1[7]<<40) +
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <shujuxieru+0x188>)
 80015d2:	791b      	ldrb	r3, [r3, #4]
				 ((int64_t)jieshou1[8]<<32) + ((int64_t)jieshou1[9]<<24) + ((int64_t)jieshou1[10]<<16) + ((int64_t)jieshou1[11]<<8) + jieshou1[12];
 80015d4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015d8:	4642      	mov	r2, r8
 80015da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015de:	4621      	mov	r1, r4
 80015e0:	1852      	adds	r2, r2, r1
 80015e2:	603a      	str	r2, [r7, #0]
 80015e4:	462a      	mov	r2, r5
 80015e6:	4649      	mov	r1, r9
 80015e8:	eb41 0202 	adc.w	r2, r1, r2
 80015ec:	607a      	str	r2, [r7, #4]
		 jicunqi[jieshou1[4]] = ((int64_t)jieshou1[5]<<56) + ((int64_t)jieshou1[6]<<48) + ((int64_t)jieshou1[7]<<40) +
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <shujuxieru+0x18c>)
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80015f8:	e9c3 1200 	strd	r1, r2, [r3]

	 }
	 HAL_UART_Transmit(duankou, jieshou1 ,15,100);
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	220f      	movs	r2, #15
 8001600:	4905      	ldr	r1, [pc, #20]	; (8001618 <shujuxieru+0x188>)
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <shujuxieru+0x190>)
 8001604:	f002 fe9b 	bl	800433e <HAL_UART_Transmit>
	 duankou1qingchu();//清除数据
 8001608:	f000 f858 	bl	80016bc <duankou1qingchu>
 }
 800160c:	bf00      	nop
 800160e:	376c      	adds	r7, #108	; 0x6c
 8001610:	46bd      	mov	sp, r7
 8001612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001616:	bf00      	nop
 8001618:	200009f0 	.word	0x200009f0
 800161c:	200001f0 	.word	0x200001f0
 8001620:	20000aac 	.word	0x20000aac

08001624 <duankoupanduan>:

uint32_t duankoupanduan(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
	uint32_t inok = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
	uint16_t c;
	uint8_t cl,ch;
	if(jieshou1changdu >= 15)//目前数据包长度为统一15字节-20230331
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <duankoupanduan+0x90>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b0e      	cmp	r3, #14
 8001634:	d938      	bls.n	80016a8 <duankoupanduan+0x84>
	{
		 if(jieshou1[0] == 0xcc)//这个时数据包头字节，固定为0xcc
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <duankoupanduan+0x94>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2bcc      	cmp	r3, #204	; 0xcc
 800163c:	d130      	bne.n	80016a0 <duankoupanduan+0x7c>
		 {
			 if(jieshou1[1] == SHEBEIDIZHI)//如果对应的设备地址为该设备-20230331
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <duankoupanduan+0x94>)
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d129      	bne.n	800169a <duankoupanduan+0x76>
			 {
				 c = modbus_crc16((uint8_t*)&jieshou1[0],13);
 8001646:	210d      	movs	r1, #13
 8001648:	481b      	ldr	r0, [pc, #108]	; (80016b8 <duankoupanduan+0x94>)
 800164a:	f000 f8a9 	bl	80017a0 <modbus_crc16>
 800164e:	4603      	mov	r3, r0
 8001650:	807b      	strh	r3, [r7, #2]
				 cl = c&0xff;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	707b      	strb	r3, [r7, #1]
				 ch = (c/256)&0xff;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	b29b      	uxth	r3, r3
 800165c:	703b      	strb	r3, [r7, #0]
				 if(cl == jieshou1[13] && ch == jieshou1[14])//CRC
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <duankoupanduan+0x94>)
 8001660:	7b5b      	ldrb	r3, [r3, #13]
 8001662:	787a      	ldrb	r2, [r7, #1]
 8001664:	429a      	cmp	r2, r3
 8001666:	d115      	bne.n	8001694 <duankoupanduan+0x70>
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <duankoupanduan+0x94>)
 800166a:	7b9b      	ldrb	r3, [r3, #14]
 800166c:	783a      	ldrb	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d110      	bne.n	8001694 <duankoupanduan+0x70>
				 {
						 if(jieshou1[2] == 3)//如果操作码为读取
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <duankoupanduan+0x94>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d102      	bne.n	8001680 <duankoupanduan+0x5c>
						 {
							 shujuduqu();
 800167a:	f7ff fe23 	bl	80012c4 <shujuduqu>
						 if(jieshou1[2] == 3)//如果操作码为读取
 800167e:	e011      	b.n	80016a4 <duankoupanduan+0x80>
						 }else if(jieshou1[2] == 6)//如果操作码为写操作
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <duankoupanduan+0x94>)
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	2b06      	cmp	r3, #6
 8001686:	d102      	bne.n	800168e <duankoupanduan+0x6a>
						 {
							 shujuxieru();
 8001688:	f7ff ff02 	bl	8001490 <shujuxieru>
						 if(jieshou1[2] == 3)//如果操作码为读取
 800168c:	e00a      	b.n	80016a4 <duankoupanduan+0x80>
						 }else{inok = 3;}//如果操作码错误
 800168e:	2303      	movs	r3, #3
 8001690:	607b      	str	r3, [r7, #4]
						 if(jieshou1[2] == 3)//如果操作码为读取
 8001692:	e007      	b.n	80016a4 <duankoupanduan+0x80>
				 }else{inok = 4;}//如果crc校验出错
 8001694:	2304      	movs	r3, #4
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	e004      	b.n	80016a4 <duankoupanduan+0x80>
			 }else{inok = 2;}//如果设备号错误
 800169a:	2302      	movs	r3, #2
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	e001      	b.n	80016a4 <duankoupanduan+0x80>
		 }else{inok = 1;}//如果头字节错误
 80016a0:	2301      	movs	r3, #1
 80016a2:	607b      	str	r3, [r7, #4]

		 duankou1qingchu();//清除数据
 80016a4:	f000 f80a 	bl	80016bc <duankou1qingchu>
	}

	return inok;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000a10 	.word	0x20000a10
 80016b8:	200009f0 	.word	0x200009f0

080016bc <duankou1qingchu>:
void duankou1qingchu(void)//端口3清除数据
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
	uint32_t i;
	for(i = 0; i < jieshou1zongchangdu;i ++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	e007      	b.n	80016d8 <duankou1qingchu+0x1c>
		{
			jieshou1[ i ] = 0;
 80016c8:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <duankou1qingchu+0x40>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < jieshou1zongchangdu;i ++)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3301      	adds	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <duankou1qingchu+0x44>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d3f1      	bcc.n	80016c8 <duankou1qingchu+0xc>
		}
		jieshou1tim = 0;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <duankou1qingchu+0x48>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
		jieshou1changdu = 0;
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <duankou1qingchu+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	200009f0 	.word	0x200009f0
 8001700:	20000000 	.word	0x20000000
 8001704:	20000a14 	.word	0x20000a14
 8001708:	20000a10 	.word	0x20000a10

0800170c <duankou1xunhuan>:

void duankou1xunhuan(void)//端口3循环处理事件
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	jieshou1tim++;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <duankou1xunhuan+0x2c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <duankou1xunhuan+0x2c>)
 8001718:	6013      	str	r3, [r2, #0]
	if(jieshou1changdu == 0)//如果没有接收到数据，就将错误溢出设置成0
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <duankou1xunhuan+0x30>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <duankou1xunhuan+0x1c>
	{
		jieshou1tim = 0;
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <duankou1xunhuan+0x2c>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
	}
	if(jieshou1tim > 50)
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <duankou1xunhuan+0x2c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b32      	cmp	r3, #50	; 0x32
 800172e:	d901      	bls.n	8001734 <duankou1xunhuan+0x28>
	{
		duankou1qingchu();
 8001730:	f7ff ffc4 	bl	80016bc <duankou1qingchu>
	}

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000a14 	.word	0x20000a14
 800173c:	20000a10 	.word	0x20000a10

08001740 <USART1_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint8_t d;

	if(jieshou1zongchangdu > jieshou1changdu)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <USART1_IRQHandler+0x48>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <USART1_IRQHandler+0x4c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d90e      	bls.n	8001772 <USART1_IRQHandler+0x32>
		{
			jieshou1[ jieshou1changdu ] = USART1->DR;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <USART1_IRQHandler+0x50>)
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <USART1_IRQHandler+0x4c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b2d1      	uxtb	r1, r2
 800175e:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <USART1_IRQHandler+0x54>)
 8001760:	54d1      	strb	r1, [r2, r3]
			jieshou1tim = 0;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <USART1_IRQHandler+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
			jieshou1changdu++;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <USART1_IRQHandler+0x4c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <USART1_IRQHandler+0x4c>)
 8001770:	6013      	str	r3, [r2, #0]

		}
	d = USART1->DR;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <USART1_IRQHandler+0x50>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	71fb      	strb	r3, [r7, #7]
	d=d;
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <USART1_IRQHandler+0x5c>)
 800177a:	f002 fe73 	bl	8004464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000000 	.word	0x20000000
 800178c:	20000a10 	.word	0x20000a10
 8001790:	40011000 	.word	0x40011000
 8001794:	200009f0 	.word	0x200009f0
 8001798:	20000a14 	.word	0x20000a14
 800179c:	20000aac 	.word	0x20000aac

080017a0 <modbus_crc16>:
}



uint16_t modbus_crc16(uint8_t *data, size_t length)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    const uint16_t crc_poly = 0xA001; // Modbus CRC polynomial
 80017aa:	f24a 0301 	movw	r3, #40961	; 0xa001
 80017ae:	817b      	strh	r3, [r7, #10]
    uint16_t crc = 0xFFFF; // Initial value for CRC register
 80017b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b4:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < length; ++i) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	e023      	b.n	8001804 <modbus_crc16+0x64>
        crc ^= (uint16_t)data[i];
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4413      	add	r3, r2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	8afb      	ldrh	r3, [r7, #22]
 80017c8:	4053      	eors	r3, r2
 80017ca:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; ++j) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e012      	b.n	80017f8 <modbus_crc16+0x58>
            if ((crc & 0x0001) != 0) {
 80017d2:	8afb      	ldrh	r3, [r7, #22]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <modbus_crc16+0x4c>
                crc >>= 1;
 80017dc:	8afb      	ldrh	r3, [r7, #22]
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	82fb      	strh	r3, [r7, #22]
                crc ^= crc_poly;
 80017e2:	8afa      	ldrh	r2, [r7, #22]
 80017e4:	897b      	ldrh	r3, [r7, #10]
 80017e6:	4053      	eors	r3, r2
 80017e8:	82fb      	strh	r3, [r7, #22]
 80017ea:	e002      	b.n	80017f2 <modbus_crc16+0x52>
            } else {
                crc >>= 1;
 80017ec:	8afb      	ldrh	r3, [r7, #22]
 80017ee:	085b      	lsrs	r3, r3, #1
 80017f0:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; ++j) {
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	dde9      	ble.n	80017d2 <modbus_crc16+0x32>
    for (size_t i = 0; i < length; ++i) {
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	3301      	adds	r3, #1
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d3d7      	bcc.n	80017bc <modbus_crc16+0x1c>
            }
        }
    }
    return crc;
 800180c:	8afb      	ldrh	r3, [r7, #22]
}
 800180e:	4618      	mov	r0, r3
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <TIM4_IRQHandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TIM4_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	pwmzhongduankongzhi();
 8001820:	f7ff fb36 	bl	8000e90 <pwmzhongduankongzhi>
  /* USER CODE END TIM4_IRQn 0 */
	//HAL_GPIO_TogglePin(bu1c_GPIO_Port, bu1c_Pin);
  HAL_TIM_IRQHandler(&htim4);
 8001824:	4809      	ldr	r0, [pc, #36]	; (800184c <TIM4_IRQHandler+0x30>)
 8001826:	f001 ff2b 	bl	8003680 <HAL_TIM_IRQHandler>
  jjj[3] = TIM4->CNT;
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <TIM4_IRQHandler+0x34>)
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <TIM4_IRQHandler+0x38>)
 8001832:	80da      	strh	r2, [r3, #6]
  if(jjj[4] < jjj[3])jjj[4] = jjj[3];
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <TIM4_IRQHandler+0x38>)
 8001836:	891a      	ldrh	r2, [r3, #8]
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <TIM4_IRQHandler+0x38>)
 800183a:	88db      	ldrh	r3, [r3, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	d203      	bcs.n	8001848 <TIM4_IRQHandler+0x2c>
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <TIM4_IRQHandler+0x38>)
 8001842:	88da      	ldrh	r2, [r3, #6]
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <TIM4_IRQHandler+0x38>)
 8001846:	811a      	strh	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000a64 	.word	0x20000a64
 8001850:	40000800 	.word	0x40000800
 8001854:	200001d8 	.word	0x200001d8

08001858 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)//毫秒定时�?-20230330
{
 8001858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800185c:	b090      	sub	sp, #64	; 0x40
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	duankou1xunhuan();//串口循环
 8001860:	f7ff ff54 	bl	800170c <duankou1xunhuan>
	duankoupanduan();
 8001864:	f7ff fede 	bl	8001624 <duankoupanduan>
	if(dianji[0].dangqiansudu < 0)
 8001868:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	da61      	bge.n	8001936 <TIM1_UP_TIM10_IRQHandler+0xde>
	dianji[0].dingshi = jicunqi[0] / ( sqrt(jicunqi[1]*jicunqi[1] + 2 * jicunqi[3] * (-dianji[0].dangqiansudu)));
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7fe fe38 	bl	80004f0 <__aeabi_l2d>
 8001880:	e9c7 0100 	strd	r0, r1, [r7]
 8001884:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 8001886:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800188a:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 800188c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001890:	fb02 f501 	mul.w	r5, r2, r1
 8001894:	fb00 f403 	mul.w	r4, r0, r3
 8001898:	442c      	add	r4, r5
 800189a:	fba0 2302 	umull	r2, r3, r0, r2
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a0:	4613      	mov	r3, r2
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a6:	18e3      	adds	r3, r4, r3
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018aa:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 80018ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b0:	1891      	adds	r1, r2, r2
 80018b2:	6139      	str	r1, [r7, #16]
 80018b4:	415b      	adcs	r3, r3
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018bc:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	2400      	movs	r4, #0
 80018c4:	f1d2 0800 	rsbs	r8, r2, #0
 80018c8:	eb64 0903 	sbc.w	r9, r4, r3
 80018cc:	fb08 f201 	mul.w	r2, r8, r1
 80018d0:	fb00 f309 	mul.w	r3, r0, r9
 80018d4:	4413      	add	r3, r2
 80018d6:	fba0 1208 	umull	r1, r2, r0, r8
 80018da:	637a      	str	r2, [r7, #52]	; 0x34
 80018dc:	460a      	mov	r2, r1
 80018de:	633a      	str	r2, [r7, #48]	; 0x30
 80018e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018e2:	4413      	add	r3, r2
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
 80018e6:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018ea:	4643      	mov	r3, r8
 80018ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018f0:	4622      	mov	r2, r4
 80018f2:	189b      	adds	r3, r3, r2
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	462b      	mov	r3, r5
 80018f8:	464a      	mov	r2, r9
 80018fa:	eb42 0303 	adc.w	r3, r2, r3
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001900:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001904:	f7fe fdf4 	bl	80004f0 <__aeabi_l2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	ec43 2b10 	vmov	d0, r2, r3
 8001910:	f003 fd0e 	bl	8005330 <sqrt>
 8001914:	ec53 2b10 	vmov	r2, r3, d0
 8001918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800191c:	f7fe ff40 	bl	80007a0 <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f8c0 	bl	8000aac <__aeabi_d2uiz>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001932:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	if(dianji[0].dangqiansudu >= 0)
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db56      	blt.n	80019ee <TIM1_UP_TIM10_IRQHandler+0x196>
	dianji[0].dingshi = jicunqi[0] / ( sqrt(jicunqi[1]*jicunqi[1] + 2 * jicunqi[3] * (dianji[0].dangqiansudu)));
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7fe fdd1 	bl	80004f0 <__aeabi_l2d>
 800194e:	4680      	mov	r8, r0
 8001950:	4689      	mov	r9, r1
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 8001954:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001958:	492a      	ldr	r1, [pc, #168]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 800195a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800195e:	fb00 f503 	mul.w	r5, r0, r3
 8001962:	fb02 f401 	mul.w	r4, r2, r1
 8001966:	442c      	add	r4, r5
 8001968:	fba2 ab00 	umull	sl, fp, r2, r0
 800196c:	eb04 030b 	add.w	r3, r4, fp
 8001970:	469b      	mov	fp, r3
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 8001974:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001978:	1891      	adds	r1, r2, r2
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	415b      	adcs	r3, r3
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001984:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	fb02 f501 	mul.w	r5, r2, r1
 800198e:	fb00 f403 	mul.w	r4, r0, r3
 8001992:	442c      	add	r4, r5
 8001994:	fba0 2302 	umull	r2, r3, r0, r2
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199a:	4613      	mov	r3, r2
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	18e3      	adds	r3, r4, r3
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80019a8:	460b      	mov	r3, r1
 80019aa:	eb1a 0303 	adds.w	r3, sl, r3
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	4613      	mov	r3, r2
 80019b2:	eb4b 0303 	adc.w	r3, fp, r3
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019bc:	f7fe fd98 	bl	80004f0 <__aeabi_l2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	ec43 2b10 	vmov	d0, r2, r3
 80019c8:	f003 fcb2 	bl	8005330 <sqrt>
 80019cc:	ec53 2b10 	vmov	r2, r3, d0
 80019d0:	4640      	mov	r0, r8
 80019d2:	4649      	mov	r1, r9
 80019d4:	f7fe fee4 	bl	80007a0 <__aeabi_ddiv>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f864 	bl	8000aac <__aeabi_d2uiz>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 80019ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	/* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <TIM1_UP_TIM10_IRQHandler+0x1b0>)
 80019f0:	f001 fe46 	bl	8003680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	3740      	adds	r7, #64	; 0x40
 80019f8:	46bd      	mov	sp, r7
 80019fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019fe:	bf00      	nop
 8001a00:	20000098 	.word	0x20000098
 8001a04:	200001f0 	.word	0x200001f0
 8001a08:	20000a1c 	.word	0x20000a1c

08001a0c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(dianji[0].shijifangxiang == 1)
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <EXTI9_5_IRQHandler+0x44>)
 8001a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <EXTI9_5_IRQHandler+0x1e>
	{
		dianji[0].jiluweizhi  ++;
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <EXTI9_5_IRQHandler+0x44>)
 8001a1a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a1e:	1c54      	adds	r4, r2, #1
 8001a20:	f143 0500 	adc.w	r5, r3, #0
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <EXTI9_5_IRQHandler+0x44>)
 8001a26:	e9c3 450c 	strd	r4, r5, [r3, #48]	; 0x30
	}
	if(dianji[0].shijifangxiang == 0)
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <EXTI9_5_IRQHandler+0x44>)
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EXTI9_5_IRQHandler+0x38>
	{
		dianji[0].jiluweizhi  --;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <EXTI9_5_IRQHandler+0x44>)
 8001a34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a38:	1e50      	subs	r0, r2, #1
 8001a3a:	f143 31ff 	adc.w	r1, r3, #4294967295
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <EXTI9_5_IRQHandler+0x44>)
 8001a40:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a44:	2080      	movs	r0, #128	; 0x80
 8001a46:	f000 ffe3 	bl	8002a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000098 	.word	0x20000098

08001a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a54:	b5b0      	push	{r4, r5, r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5a:	f000 fbe7 	bl	800222c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5e:	f000 f8bd 	bl	8001bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a62:	f000 fa15 	bl	8001e90 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001a66:	f000 f973 	bl	8001d50 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001a6a:	f000 f9e7 	bl	8001e3c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001a6e:	f000 f91f 	bl	8001cb0 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001a72:	2100      	movs	r1, #0
 8001a74:	4851      	ldr	r0, [pc, #324]	; (8001bbc <main+0x168>)
 8001a76:	f001 fd53 	bl	8003520 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001a7a:	4850      	ldr	r0, [pc, #320]	; (8001bbc <main+0x168>)
 8001a7c:	f001 fc94 	bl	80033a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001a80:	484f      	ldr	r0, [pc, #316]	; (8001bc0 <main+0x16c>)
 8001a82:	f001 fc91 	bl	80033a8 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001a86:	4b4f      	ldr	r3, [pc, #316]	; (8001bc4 <main+0x170>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <main+0x170>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0220 	orr.w	r2, r2, #32
 8001a94:	60da      	str	r2, [r3, #12]
  HAL_Delay(100);
 8001a96:	2064      	movs	r0, #100	; 0x64
 8001a98:	f000 fc3a 	bl	8002310 <HAL_Delay>
  jicunqi[0] = 32000000;//定时器频率
 8001a9c:	494a      	ldr	r1, [pc, #296]	; (8001bc8 <main+0x174>)
 8001a9e:	4a4b      	ldr	r2, [pc, #300]	; (8001bcc <main+0x178>)
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9c1 2300 	strd	r2, r3, [r1]
  jicunqi[1] = 500;//最小速度
 8001aa8:	4947      	ldr	r1, [pc, #284]	; (8001bc8 <main+0x174>)
 8001aaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  jicunqi[2] = 32000;//最大速度
 8001ab6:	4944      	ldr	r1, [pc, #272]	; (8001bc8 <main+0x174>)
 8001ab8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e9c1 2304 	strd	r2, r3, [r1, #16]
  jicunqi[3] = 64000;//加速度
 8001ac4:	4940      	ldr	r1, [pc, #256]	; (8001bc8 <main+0x174>)
 8001ac6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9c1 2306 	strd	r2, r3, [r1, #24]
  jicunqi[4] = 0;
 8001ad2:	493d      	ldr	r1, [pc, #244]	; (8001bc8 <main+0x174>)
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9c1 2308 	strd	r2, r3, [r1, #32]
  jicunqi[5] = 0;//是否立即启动
 8001ae0:	4939      	ldr	r1, [pc, #228]	; (8001bc8 <main+0x174>)
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  jicunqi[6] = 0;//是否返回数据
 8001aee:	4936      	ldr	r1, [pc, #216]	; (8001bc8 <main+0x174>)
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

 // dianji[0].yudingweizhi = 32000;//设置位置

  while (1)
  {
	  jici++;
 8001afc:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <main+0x17c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <main+0x17c>)
 8001b04:	6013      	str	r3, [r2, #0]
	  dianji[0].zuidasudu = s2b2(jicunqi[1],jicunqi[3],jicunqi[2]);
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <main+0x174>)
 8001b08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <main+0x174>)
 8001b12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b16:	4614      	mov	r4, r2
 8001b18:	461d      	mov	r5, r3
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <main+0x174>)
 8001b1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b20:	e9cd 2300 	strd	r2, r3, [sp]
 8001b24:	4622      	mov	r2, r4
 8001b26:	462b      	mov	r3, r5
 8001b28:	f7ff fb18 	bl	800115c <s2b2>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4928      	ldr	r1, [pc, #160]	; (8001bd4 <main+0x180>)
 8001b32:	e9c1 2308 	strd	r2, r3, [r1, #32]
/////---------------实时位置设定
		  if(jicunqi[5] == 0){
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <main+0x174>)
 8001b38:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	d106      	bne.n	8001b4e <main+0xfa>
					  dianji[0].yudingweizhi = jicunqi[4];
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <main+0x174>)
 8001b42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b46:	4923      	ldr	r1, [pc, #140]	; (8001bd4 <main+0x180>)
 8001b48:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001b4c:	e012      	b.n	8001b74 <main+0x120>
				  }else{
					  if(jicunqi[5] == 2)
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <main+0x174>)
 8001b50:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b54:	1e91      	subs	r1, r2, #2
 8001b56:	430b      	orrs	r3, r1
 8001b58:	d10c      	bne.n	8001b74 <main+0x120>
					  {
						  jicunqi[5] = 1;
 8001b5a:	491b      	ldr	r1, [pc, #108]	; (8001bc8 <main+0x174>)
 8001b5c:	f04f 0201 	mov.w	r2, #1
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
						  dianji[0].yudingweizhi = jicunqi[4];
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <main+0x174>)
 8001b6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b6e:	4919      	ldr	r1, [pc, #100]	; (8001bd4 <main+0x180>)
 8001b70:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
					  }
				  }

///---------------------紧急停止
	  if(jicunqi[7] != 0)
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <main+0x174>)
 8001b76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	d00c      	beq.n	8001b98 <main+0x144>
	  {
		  jicunqi[7] = 0;
 8001b7e:	4912      	ldr	r1, [pc, #72]	; (8001bc8 <main+0x174>)
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		  jicunqi[4] = dianji[0].tingzhiweizhi;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <main+0x180>)
 8001b8e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b92:	490d      	ldr	r1, [pc, #52]	; (8001bc8 <main+0x174>)
 8001b94:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  }

	  if((dianji[0].dangqianweizhi%320) == 0)
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <main+0x180>)
 8001b9a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001b9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	f7fe ffa1 	bl	8000aec <__aeabi_ldivmod>
 8001baa:	4313      	orrs	r3, r2
 8001bac:	d1a6      	bne.n	8001afc <main+0xa8>
	  HAL_GPIO_TogglePin(bu1c_GPIO_Port, bu1c_Pin);
 8001bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <main+0x184>)
 8001bb4:	f000 ff11 	bl	80029da <HAL_GPIO_TogglePin>
	  jici++;
 8001bb8:	e7a0      	b.n	8001afc <main+0xa8>
 8001bba:	bf00      	nop
 8001bbc:	20000a64 	.word	0x20000a64
 8001bc0:	20000a1c 	.word	0x20000a1c
 8001bc4:	20000aac 	.word	0x20000aac
 8001bc8:	200001f0 	.word	0x200001f0
 8001bcc:	01e84800 	.word	0x01e84800
 8001bd0:	20000a18 	.word	0x20000a18
 8001bd4:	20000098 	.word	0x20000098
 8001bd8:	40020800 	.word	0x40020800

08001bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	; 0x50
 8001be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	2230      	movs	r2, #48	; 0x30
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fb98 	bl	8005320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <SystemClock_Config+0xcc>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a27      	ldr	r2, [pc, #156]	; (8001ca8 <SystemClock_Config+0xcc>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <SystemClock_Config+0xcc>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <SystemClock_Config+0xd0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <SystemClock_Config+0xd0>)
 8001c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <SystemClock_Config+0xd0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c40:	2301      	movs	r3, #1
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c44:	2310      	movs	r3, #16
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c50:	2308      	movs	r3, #8
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001c54:	2340      	movs	r3, #64	; 0x40
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fef7 	bl	8002a58 <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c70:	f000 f978 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c74:	230f      	movs	r3, #15
 8001c76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	2102      	movs	r1, #2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 f959 	bl	8002f48 <HAL_RCC_ClockConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c9c:	f000 f962 	bl	8001f64 <Error_Handler>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3750      	adds	r7, #80	; 0x50
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40007000 	.word	0x40007000

08001cb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <MX_TIM1_Init+0x9c>)
 8001cd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001cd4:	223f      	movs	r2, #63	; 0x3f
 8001cd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001ce0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cf8:	4813      	ldr	r0, [pc, #76]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001cfa:	f001 fb05 	bl	8003308 <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d04:	f000 f92e 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	4619      	mov	r1, r3
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001d16:	f001 fe7d 	bl	8003a14 <HAL_TIM_ConfigClockSource>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d20:	f000 f920 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_TIM1_Init+0x98>)
 8001d32:	f002 fa35 	bl	80041a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d3c:	f000 f912 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000a1c 	.word	0x20000a1c
 8001d4c:	40010000 	.word	0x40010000

08001d50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08e      	sub	sp, #56	; 0x38
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	f107 0320 	add.w	r3, r7, #32
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	615a      	str	r2, [r3, #20]
 8001d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001d82:	4a2d      	ldr	r2, [pc, #180]	; (8001e38 <MX_TIM4_Init+0xe8>)
 8001d84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001d94:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001da6:	4823      	ldr	r0, [pc, #140]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001da8:	f001 faae 	bl	8003308 <HAL_TIM_Base_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001db2:	f000 f8d7 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481c      	ldr	r0, [pc, #112]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001dc4:	f001 fe26 	bl	8003a14 <HAL_TIM_ConfigClockSource>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001dce:	f000 f8c9 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dd2:	4818      	ldr	r0, [pc, #96]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001dd4:	f001 fb4a 	bl	800346c <HAL_TIM_PWM_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001dde:	f000 f8c1 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dea:	f107 0320 	add.w	r3, r7, #32
 8001dee:	4619      	mov	r1, r3
 8001df0:	4810      	ldr	r0, [pc, #64]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001df2:	f002 f9d5 	bl	80041a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001dfc:	f000 f8b2 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e00:	2360      	movs	r3, #96	; 0x60
 8001e02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2200      	movs	r2, #0
 8001e14:	4619      	mov	r1, r3
 8001e16:	4807      	ldr	r0, [pc, #28]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001e18:	f001 fd3a 	bl	8003890 <HAL_TIM_PWM_ConfigChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e22:	f000 f89f 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <MX_TIM4_Init+0xe4>)
 8001e28:	f000 f910 	bl	800204c <HAL_TIM_MspPostInit>

}
 8001e2c:	bf00      	nop
 8001e2e:	3738      	adds	r7, #56	; 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000a64 	.word	0x20000a64
 8001e38:	40000800 	.word	0x40000800

08001e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <MX_USART1_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_USART1_UART_Init+0x4c>)
 8001e74:	f002 fa16 	bl	80042a4 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f000 f871 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000aac 	.word	0x20000aac
 8001e8c:	40011000 	.word	0x40011000

08001e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <MX_GPIO_Init+0xc8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <MX_GPIO_Init+0xc8>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <MX_GPIO_Init+0xc8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <MX_GPIO_Init+0xc8>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <MX_GPIO_Init+0xc8>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <MX_GPIO_Init+0xc8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <MX_GPIO_Init+0xc8>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <MX_GPIO_Init+0xc8>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_GPIO_Init+0xc8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, bu1c_Pin|bu1f_Pin, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001f00:	4816      	ldr	r0, [pc, #88]	; (8001f5c <MX_GPIO_Init+0xcc>)
 8001f02:	f000 fd51 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : bu1c_Pin bu1f_Pin */
  GPIO_InitStruct.Pin = bu1c_Pin|bu1f_Pin;
 8001f06:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480f      	ldr	r0, [pc, #60]	; (8001f5c <MX_GPIO_Init+0xcc>)
 8001f20:	f000 fbbe 	bl	80026a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4619      	mov	r1, r3
 8001f38:	4809      	ldr	r0, [pc, #36]	; (8001f60 <MX_GPIO_Init+0xd0>)
 8001f3a:	f000 fbb1 	bl	80026a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2017      	movs	r0, #23
 8001f44:	f000 fae3 	bl	800250e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f48:	2017      	movs	r0, #23
 8001f4a:	f000 fafc 	bl	8002546 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f4e:	bf00      	nop
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020400 	.word	0x40020400

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <Error_Handler+0x8>
	...

08001f70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_TIM_Base_MspInit+0x80>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d116      	bne.n	8002000 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_TIM_Base_MspInit+0x84>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_TIM_Base_MspInit+0x84>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_TIM_Base_MspInit+0x84>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	2019      	movs	r0, #25
 8001ff4:	f000 fa8b 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ff8:	2019      	movs	r0, #25
 8001ffa:	f000 faa4 	bl	8002546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ffe:	e01a      	b.n	8002036 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_TIM_Base_MspInit+0x88>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d115      	bne.n	8002036 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_TIM_Base_MspInit+0x84>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_TIM_Base_MspInit+0x84>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_TIM_Base_MspInit+0x84>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2101      	movs	r1, #1
 800202a:	201e      	movs	r0, #30
 800202c:	f000 fa6f 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002030:	201e      	movs	r0, #30
 8002032:	f000 fa88 	bl	8002546 <HAL_NVIC_EnableIRQ>
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000
 8002044:	40023800 	.word	0x40023800
 8002048:	40000800 	.word	0x40000800

0800204c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <HAL_TIM_MspPostInit+0x68>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d11d      	bne.n	80020aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_TIM_MspPostInit+0x6c>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_TIM_MspPostInit+0x6c>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_TIM_MspPostInit+0x6c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800208a:	2340      	movs	r3, #64	; 0x40
 800208c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800209a:	2302      	movs	r3, #2
 800209c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	; (80020bc <HAL_TIM_MspPostInit+0x70>)
 80020a6:	f000 fafb 	bl	80026a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40000800 	.word	0x40000800
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020400 	.word	0x40020400

080020c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_UART_MspInit+0x94>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d134      	bne.n	800214c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_UART_MspInit+0x98>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_UART_MspInit+0x98>)
 80020ec:	f043 0310 	orr.w	r3, r3, #16
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_UART_MspInit+0x98>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_UART_MspInit+0x98>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_UART_MspInit+0x98>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_UART_MspInit+0x98>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800211a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800212c:	2307      	movs	r3, #7
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <HAL_UART_MspInit+0x9c>)
 8002138:	f000 fab2 	bl	80026a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2102      	movs	r1, #2
 8002140:	2025      	movs	r0, #37	; 0x25
 8002142:	f000 f9e4 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002146:	2025      	movs	r0, #37	; 0x25
 8002148:	f000 f9fd 	bl	8002546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800214c:	bf00      	nop
 800214e:	3728      	adds	r7, #40	; 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40011000 	.word	0x40011000
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000

08002160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <NMI_Handler+0x4>

08002166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <HardFault_Handler+0x4>

0800216c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <MemManage_Handler+0x4>

08002172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <BusFault_Handler+0x4>

08002178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <UsageFault_Handler+0x4>

0800217e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ac:	f000 f890 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <SystemInit+0x20>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <SystemInit+0x20>)
 80021c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <Reset_Handler>:
 80021d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002210 <LoopFillZerobss+0x12>
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <LoopFillZerobss+0x16>)
 80021de:	490e      	ldr	r1, [pc, #56]	; (8002218 <LoopFillZerobss+0x1a>)
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <LoopFillZerobss+0x1e>)
 80021e2:	2300      	movs	r3, #0
 80021e4:	e002      	b.n	80021ec <LoopCopyDataInit>

080021e6 <CopyDataInit>:
 80021e6:	58d4      	ldr	r4, [r2, r3]
 80021e8:	50c4      	str	r4, [r0, r3]
 80021ea:	3304      	adds	r3, #4

080021ec <LoopCopyDataInit>:
 80021ec:	18c4      	adds	r4, r0, r3
 80021ee:	428c      	cmp	r4, r1
 80021f0:	d3f9      	bcc.n	80021e6 <CopyDataInit>
 80021f2:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <LoopFillZerobss+0x22>)
 80021f4:	4c0b      	ldr	r4, [pc, #44]	; (8002224 <LoopFillZerobss+0x26>)
 80021f6:	2300      	movs	r3, #0
 80021f8:	e001      	b.n	80021fe <LoopFillZerobss>

080021fa <FillZerobss>:
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	3204      	adds	r2, #4

080021fe <LoopFillZerobss>:
 80021fe:	42a2      	cmp	r2, r4
 8002200:	d3fb      	bcc.n	80021fa <FillZerobss>
 8002202:	f7ff ffd7 	bl	80021b4 <SystemInit>
 8002206:	f003 f867 	bl	80052d8 <__libc_init_array>
 800220a:	f7ff fc23 	bl	8001a54 <main>
 800220e:	4770      	bx	lr
 8002210:	20018000 	.word	0x20018000
 8002214:	20000000 	.word	0x20000000
 8002218:	20000074 	.word	0x20000074
 800221c:	0800552c 	.word	0x0800552c
 8002220:	20000078 	.word	0x20000078
 8002224:	20000af4 	.word	0x20000af4

08002228 <ADC_IRQHandler>:
 8002228:	e7fe      	b.n	8002228 <ADC_IRQHandler>
	...

0800222c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <HAL_Init+0x40>)
 8002236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_Init+0x40>)
 8002242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	; (800226c <HAL_Init+0x40>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f000 f94f 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225a:	200f      	movs	r0, #15
 800225c:	f000 f808 	bl	8002270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002260:	f7ff fe86 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023c00 	.word	0x40023c00

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x54>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_InitTick+0x58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f967 	bl	8002562 <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f000 f92f 	bl	800250e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <HAL_InitTick+0x5c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000004 	.word	0x20000004
 80022c8:	2000000c 	.word	0x2000000c
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	20000af0 	.word	0x20000af0

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000af0 	.word	0x20000af0

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000000c 	.word	0x2000000c

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	60d3      	str	r3, [r2, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <__NVIC_EnableIRQ+0x38>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c4:	d301      	bcc.n	80024ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00f      	b.n	80024ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <SysTick_Config+0x40>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d2:	210f      	movs	r1, #15
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f7ff ff8e 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <SysTick_Config+0x40>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <SysTick_Config+0x40>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	e000e010 	.word	0xe000e010

080024f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff29 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002520:	f7ff ff3e 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 8002524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f7ff ff8e 	bl	800244c <NVIC_EncodePriority>
 8002530:	4602      	mov	r2, r0
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff5d 	bl	80023f8 <__NVIC_SetPriority>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff31 	bl	80023bc <__NVIC_EnableIRQ>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ffa2 	bl	80024b4 <SysTick_Config>
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff feb6 	bl	80022f8 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d008      	beq.n	80025ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e052      	b.n	8002652 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0216 	bic.w	r2, r2, #22
 80025ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <HAL_DMA_Abort+0x62>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0208 	bic.w	r2, r2, #8
 80025ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025fc:	e013      	b.n	8002626 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025fe:	f7ff fe7b 	bl	80022f8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b05      	cmp	r3, #5
 800260a:	d90c      	bls.n	8002626 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2203      	movs	r2, #3
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e015      	b.n	8002652 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e4      	bne.n	80025fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	223f      	movs	r2, #63	; 0x3f
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d004      	beq.n	8002678 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e00c      	b.n	8002692 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2205      	movs	r2, #5
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	e159      	b.n	8002970 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026bc:	2201      	movs	r2, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	f040 8148 	bne.w	800296a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d005      	beq.n	80026f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d130      	bne.n	8002754 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002728:	2201      	movs	r2, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 0201 	and.w	r2, r3, #1
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b03      	cmp	r3, #3
 800275e:	d017      	beq.n	8002790 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d123      	bne.n	80027e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	08da      	lsrs	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3208      	adds	r2, #8
 80027a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	220f      	movs	r2, #15
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	08da      	lsrs	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3208      	adds	r2, #8
 80027de:	69b9      	ldr	r1, [r7, #24]
 80027e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0203 	and.w	r2, r3, #3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80a2 	beq.w	800296a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b57      	ldr	r3, [pc, #348]	; (8002988 <HAL_GPIO_Init+0x2e8>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a56      	ldr	r2, [pc, #344]	; (8002988 <HAL_GPIO_Init+0x2e8>)
 8002830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b54      	ldr	r3, [pc, #336]	; (8002988 <HAL_GPIO_Init+0x2e8>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002842:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_GPIO_Init+0x2ec>)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	3302      	adds	r3, #2
 800284a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	220f      	movs	r2, #15
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a49      	ldr	r2, [pc, #292]	; (8002990 <HAL_GPIO_Init+0x2f0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d019      	beq.n	80028a2 <HAL_GPIO_Init+0x202>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a48      	ldr	r2, [pc, #288]	; (8002994 <HAL_GPIO_Init+0x2f4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0x1fe>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a47      	ldr	r2, [pc, #284]	; (8002998 <HAL_GPIO_Init+0x2f8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00d      	beq.n	800289a <HAL_GPIO_Init+0x1fa>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a46      	ldr	r2, [pc, #280]	; (800299c <HAL_GPIO_Init+0x2fc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <HAL_GPIO_Init+0x1f6>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a45      	ldr	r2, [pc, #276]	; (80029a0 <HAL_GPIO_Init+0x300>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_GPIO_Init+0x1f2>
 800288e:	2304      	movs	r3, #4
 8002890:	e008      	b.n	80028a4 <HAL_GPIO_Init+0x204>
 8002892:	2307      	movs	r3, #7
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x204>
 8002896:	2303      	movs	r3, #3
 8002898:	e004      	b.n	80028a4 <HAL_GPIO_Init+0x204>
 800289a:	2302      	movs	r3, #2
 800289c:	e002      	b.n	80028a4 <HAL_GPIO_Init+0x204>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_GPIO_Init+0x204>
 80028a2:	2300      	movs	r3, #0
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	f002 0203 	and.w	r2, r2, #3
 80028aa:	0092      	lsls	r2, r2, #2
 80028ac:	4093      	lsls	r3, r2
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b4:	4935      	ldr	r1, [pc, #212]	; (800298c <HAL_GPIO_Init+0x2ec>)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c2:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <HAL_GPIO_Init+0x304>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e6:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <HAL_GPIO_Init+0x304>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_GPIO_Init+0x304>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002910:	4a24      	ldr	r2, [pc, #144]	; (80029a4 <HAL_GPIO_Init+0x304>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002916:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <HAL_GPIO_Init+0x304>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800293a:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <HAL_GPIO_Init+0x304>)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <HAL_GPIO_Init+0x304>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002964:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_GPIO_Init+0x304>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3301      	adds	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b0f      	cmp	r3, #15
 8002974:	f67f aea2 	bls.w	80026bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	40013800 	.word	0x40013800
 8002990:	40020000 	.word	0x40020000
 8002994:	40020400 	.word	0x40020400
 8002998:	40020800 	.word	0x40020800
 800299c:	40020c00 	.word	0x40020c00
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
 80029b4:	4613      	mov	r3, r2
 80029b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b8:	787b      	ldrb	r3, [r7, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c4:	e003      	b.n	80029ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	041a      	lsls	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	619a      	str	r2, [r3, #24]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	041a      	lsls	r2, r3, #16
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	400b      	ands	r3, r1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	619a      	str	r2, [r3, #24]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f806 	bl	8002a40 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40013c00 	.word	0x40013c00

08002a40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e267      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d075      	beq.n	8002b62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d00c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a82:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d112      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8e:	4b82      	ldr	r3, [pc, #520]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	4b7e      	ldr	r3, [pc, #504]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d05b      	beq.n	8002b60 <HAL_RCC_OscConfig+0x108>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d157      	bne.n	8002b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e242      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d106      	bne.n	8002acc <HAL_RCC_OscConfig+0x74>
 8002abe:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a75      	ldr	r2, [pc, #468]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e01d      	b.n	8002b08 <HAL_RCC_OscConfig+0xb0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x98>
 8002ad6:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a6f      	ldr	r2, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b6d      	ldr	r3, [pc, #436]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6c      	ldr	r2, [pc, #432]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0xb0>
 8002af0:	4b69      	ldr	r3, [pc, #420]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a68      	ldr	r2, [pc, #416]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b66      	ldr	r3, [pc, #408]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a65      	ldr	r2, [pc, #404]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7ff fbf2 	bl	80022f8 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b18:	f7ff fbee 	bl	80022f8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e207      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0xc0>
 8002b36:	e014      	b.n	8002b62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7ff fbde 	bl	80022f8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b40:	f7ff fbda 	bl	80022f8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1f3      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	4b51      	ldr	r3, [pc, #324]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0xe8>
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d063      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d11c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b86:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d116      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_RCC_OscConfig+0x152>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e1c7      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4937      	ldr	r1, [pc, #220]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	e03a      	b.n	8002c36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc8:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <HAL_RCC_OscConfig+0x244>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7ff fb93 	bl	80022f8 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd6:	f7ff fb8f 	bl	80022f8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e1a8      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4925      	ldr	r1, [pc, #148]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0a:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <HAL_RCC_OscConfig+0x244>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7ff fb72 	bl	80022f8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c18:	f7ff fb6e 	bl	80022f8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e187      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d036      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d016      	beq.n	8002c78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_RCC_OscConfig+0x248>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7ff fb52 	bl	80022f8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c58:	f7ff fb4e 	bl	80022f8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e167      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x200>
 8002c76:	e01b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_OscConfig+0x248>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7ff fb3b 	bl	80022f8 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	e00e      	b.n	8002ca4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c86:	f7ff fb37 	bl	80022f8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d907      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e150      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	42470000 	.word	0x42470000
 8002ca0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	4b88      	ldr	r3, [pc, #544]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ea      	bne.n	8002c86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8097 	beq.w	8002dec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc2:	4b81      	ldr	r3, [pc, #516]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10f      	bne.n	8002cee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	4b7d      	ldr	r3, [pc, #500]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	4a7c      	ldr	r2, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cde:	4b7a      	ldr	r3, [pc, #488]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cee:	4b77      	ldr	r3, [pc, #476]	; (8002ecc <HAL_RCC_OscConfig+0x474>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d118      	bne.n	8002d2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfa:	4b74      	ldr	r3, [pc, #464]	; (8002ecc <HAL_RCC_OscConfig+0x474>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a73      	ldr	r2, [pc, #460]	; (8002ecc <HAL_RCC_OscConfig+0x474>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d06:	f7ff faf7 	bl	80022f8 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7ff faf3 	bl	80022f8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e10c      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x474>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x2ea>
 8002d34:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	4a63      	ldr	r2, [pc, #396]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d40:	e01c      	b.n	8002d7c <HAL_RCC_OscConfig+0x324>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b05      	cmp	r3, #5
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x30c>
 8002d4a:	4b5f      	ldr	r3, [pc, #380]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a5e      	ldr	r2, [pc, #376]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	4b5c      	ldr	r3, [pc, #368]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a5b      	ldr	r2, [pc, #364]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0x324>
 8002d64:	4b58      	ldr	r3, [pc, #352]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a57      	ldr	r2, [pc, #348]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	4a54      	ldr	r2, [pc, #336]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002d76:	f023 0304 	bic.w	r3, r3, #4
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d015      	beq.n	8002db0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7ff fab8 	bl	80022f8 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7ff fab4 	bl	80022f8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e0cb      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da2:	4b49      	ldr	r3, [pc, #292]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0ee      	beq.n	8002d8c <HAL_RCC_OscConfig+0x334>
 8002dae:	e014      	b.n	8002dda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db0:	f7ff faa2 	bl	80022f8 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7ff fa9e 	bl	80022f8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0b5      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dce:	4b3e      	ldr	r3, [pc, #248]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ee      	bne.n	8002db8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de0:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	4a38      	ldr	r2, [pc, #224]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a1 	beq.w	8002f38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002df6:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d05c      	beq.n	8002ebc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d141      	bne.n	8002e8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_RCC_OscConfig+0x478>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff fa72 	bl	80022f8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e18:	f7ff fa6e 	bl	80022f8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e087      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	085b      	lsrs	r3, r3, #1
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	491b      	ldr	r1, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_RCC_OscConfig+0x478>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7ff fa47 	bl	80022f8 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7ff fa43 	bl	80022f8 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e05c      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x416>
 8002e8c:	e054      	b.n	8002f38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_RCC_OscConfig+0x478>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7ff fa30 	bl	80022f8 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7ff fa2c 	bl	80022f8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e045      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x444>
 8002eba:	e03d      	b.n	8002f38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e038      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_RCC_OscConfig+0x4ec>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d028      	beq.n	8002f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d121      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d11a      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d111      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800

08002f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0cc      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b68      	ldr	r3, [pc, #416]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d90c      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b65      	ldr	r3, [pc, #404]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0b8      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f9c:	4b59      	ldr	r3, [pc, #356]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	494d      	ldr	r1, [pc, #308]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d044      	beq.n	8003068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b47      	ldr	r3, [pc, #284]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d119      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d003      	beq.n	8003006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003002:	2b03      	cmp	r3, #3
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e067      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003026:	4b37      	ldr	r3, [pc, #220]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4934      	ldr	r1, [pc, #208]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003038:	f7ff f95e 	bl	80022f8 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	e00a      	b.n	8003056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7ff f95a 	bl	80022f8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e04f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 020c 	and.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d1eb      	bne.n	8003040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d20c      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b22      	ldr	r3, [pc, #136]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e032      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4916      	ldr	r1, [pc, #88]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	490e      	ldr	r1, [pc, #56]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ce:	f000 f821 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	490a      	ldr	r1, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff f8be 	bl	8002270 <HAL_InitTick>

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023c00 	.word	0x40023c00
 8003104:	40023800 	.word	0x40023800
 8003108:	08005504 	.word	0x08005504
 800310c:	20000004 	.word	0x20000004
 8003110:	20000008 	.word	0x20000008

08003114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003118:	b090      	sub	sp, #64	; 0x40
 800311a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	2300      	movs	r3, #0
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003124:	2300      	movs	r3, #0
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_GetSysClockFreq+0x180>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d00d      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x40>
 8003138:	2b08      	cmp	r3, #8
 800313a:	f200 80a1 	bhi.w	8003280 <HAL_RCC_GetSysClockFreq+0x16c>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x34>
 8003142:	2b04      	cmp	r3, #4
 8003144:	d003      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0x3a>
 8003146:	e09b      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_GetSysClockFreq+0x184>)
 800314a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800314c:	e09b      	b.n	8003286 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800314e:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_GetSysClockFreq+0x188>)
 8003150:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003152:	e098      	b.n	8003286 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003154:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <HAL_RCC_GetSysClockFreq+0x180>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315e:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_RCC_GetSysClockFreq+0x180>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d028      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316a:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <HAL_RCC_GetSysClockFreq+0x180>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	2200      	movs	r2, #0
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	627a      	str	r2, [r7, #36]	; 0x24
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800317c:	2100      	movs	r1, #0
 800317e:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_GetSysClockFreq+0x188>)
 8003180:	fb03 f201 	mul.w	r2, r3, r1
 8003184:	2300      	movs	r3, #0
 8003186:	fb00 f303 	mul.w	r3, r0, r3
 800318a:	4413      	add	r3, r2
 800318c:	4a43      	ldr	r2, [pc, #268]	; (800329c <HAL_RCC_GetSysClockFreq+0x188>)
 800318e:	fba0 1202 	umull	r1, r2, r0, r2
 8003192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003194:	460a      	mov	r2, r1
 8003196:	62ba      	str	r2, [r7, #40]	; 0x28
 8003198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319a:	4413      	add	r3, r2
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a0:	2200      	movs	r2, #0
 80031a2:	61bb      	str	r3, [r7, #24]
 80031a4:	61fa      	str	r2, [r7, #28]
 80031a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031ae:	f7fd fced 	bl	8000b8c <__aeabi_uldivmod>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4613      	mov	r3, r2
 80031b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ba:	e053      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <HAL_RCC_GetSysClockFreq+0x180>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	2200      	movs	r2, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	617a      	str	r2, [r7, #20]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031ce:	f04f 0b00 	mov.w	fp, #0
 80031d2:	4652      	mov	r2, sl
 80031d4:	465b      	mov	r3, fp
 80031d6:	f04f 0000 	mov.w	r0, #0
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	0159      	lsls	r1, r3, #5
 80031e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e4:	0150      	lsls	r0, r2, #5
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	ebb2 080a 	subs.w	r8, r2, sl
 80031ee:	eb63 090b 	sbc.w	r9, r3, fp
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003202:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003206:	ebb2 0408 	subs.w	r4, r2, r8
 800320a:	eb63 0509 	sbc.w	r5, r3, r9
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	00eb      	lsls	r3, r5, #3
 8003218:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800321c:	00e2      	lsls	r2, r4, #3
 800321e:	4614      	mov	r4, r2
 8003220:	461d      	mov	r5, r3
 8003222:	eb14 030a 	adds.w	r3, r4, sl
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	eb45 030b 	adc.w	r3, r5, fp
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	e9d7 4500 	ldrd	r4, r5, [r7]
 800323a:	4629      	mov	r1, r5
 800323c:	028b      	lsls	r3, r1, #10
 800323e:	4621      	mov	r1, r4
 8003240:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003244:	4621      	mov	r1, r4
 8003246:	028a      	lsls	r2, r1, #10
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324e:	2200      	movs	r2, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	60fa      	str	r2, [r7, #12]
 8003254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003258:	f7fd fc98 	bl	8000b8c <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_GetSysClockFreq+0x180>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	3301      	adds	r3, #1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800327e:	e002      	b.n	8003286 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetSysClockFreq+0x184>)
 8003282:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003288:	4618      	mov	r0, r3
 800328a:	3740      	adds	r7, #64	; 0x40
 800328c:	46bd      	mov	sp, r7
 800328e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	00f42400 	.word	0x00f42400
 800329c:	017d7840 	.word	0x017d7840

080032a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032bc:	f7ff fff0 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0a9b      	lsrs	r3, r3, #10
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4903      	ldr	r1, [pc, #12]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40023800 	.word	0x40023800
 80032dc:	08005514 	.word	0x08005514

080032e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032e4:	f7ff ffdc 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	0b5b      	lsrs	r3, r3, #13
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4903      	ldr	r1, [pc, #12]	; (8003304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	08005514 	.word	0x08005514

08003308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e041      	b.n	800339e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe fe46 	bl	8001fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f000 fc5e 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d001      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e044      	b.n	800344a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <HAL_TIM_Base_Start_IT+0xb0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d018      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x6c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d013      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x6c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1a      	ldr	r2, [pc, #104]	; (800345c <HAL_TIM_Base_Start_IT+0xb4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00e      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x6c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_TIM_Base_Start_IT+0xb8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x6c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <HAL_TIM_Base_Start_IT+0xbc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x6c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <HAL_TIM_Base_Start_IT+0xc0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d111      	bne.n	8003438 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b06      	cmp	r3, #6
 8003424:	d010      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	e007      	b.n	8003448 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40010000 	.word	0x40010000
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	40000c00 	.word	0x40000c00
 8003468:	40014000 	.word	0x40014000

0800346c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e041      	b.n	8003502 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f839 	bl	800350a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 fbac 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_TIM_PWM_Start+0x24>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e022      	b.n	800358a <HAL_TIM_PWM_Start+0x6a>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b04      	cmp	r3, #4
 8003548:	d109      	bne.n	800355e <HAL_TIM_PWM_Start+0x3e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e015      	b.n	800358a <HAL_TIM_PWM_Start+0x6a>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d109      	bne.n	8003578 <HAL_TIM_PWM_Start+0x58>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e008      	b.n	800358a <HAL_TIM_PWM_Start+0x6a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e068      	b.n	8003664 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0x82>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	e013      	b.n	80035ca <HAL_TIM_PWM_Start+0xaa>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0x92>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b0:	e00b      	b.n	80035ca <HAL_TIM_PWM_Start+0xaa>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c0:	e003      	b.n	80035ca <HAL_TIM_PWM_Start+0xaa>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	6839      	ldr	r1, [r7, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fdbe 	bl	8004154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a23      	ldr	r2, [pc, #140]	; (800366c <HAL_TIM_PWM_Start+0x14c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d107      	bne.n	80035f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1d      	ldr	r2, [pc, #116]	; (800366c <HAL_TIM_PWM_Start+0x14c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d018      	beq.n	800362e <HAL_TIM_PWM_Start+0x10e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003604:	d013      	beq.n	800362e <HAL_TIM_PWM_Start+0x10e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_TIM_PWM_Start+0x150>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_TIM_PWM_Start+0x10e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_TIM_PWM_Start+0x154>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_TIM_PWM_Start+0x10e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a16      	ldr	r2, [pc, #88]	; (8003678 <HAL_TIM_PWM_Start+0x158>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_TIM_PWM_Start+0x10e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <HAL_TIM_PWM_Start+0x15c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d111      	bne.n	8003652 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b06      	cmp	r3, #6
 800363e:	d010      	beq.n	8003662 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	e007      	b.n	8003662 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40010000 	.word	0x40010000
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40000c00 	.word	0x40000c00
 800367c:	40014000 	.word	0x40014000

08003680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b02      	cmp	r3, #2
 8003694:	d122      	bne.n	80036dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d11b      	bne.n	80036dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0202 	mvn.w	r2, #2
 80036ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa81 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fa73 	bl	8003bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fa84 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d122      	bne.n	8003730 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d11b      	bne.n	8003730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0204 	mvn.w	r2, #4
 8003700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fa57 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 800371c:	e005      	b.n	800372a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa49 	bl	8003bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fa5a 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b08      	cmp	r3, #8
 800373c:	d122      	bne.n	8003784 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b08      	cmp	r3, #8
 800374a:	d11b      	bne.n	8003784 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0208 	mvn.w	r2, #8
 8003754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2204      	movs	r2, #4
 800375a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fa2d 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa1f 	bl	8003bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fa30 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b10      	cmp	r3, #16
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b10      	cmp	r3, #16
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0210 	mvn.w	r2, #16
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2208      	movs	r2, #8
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa03 	bl	8003bca <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f9f5 	bl	8003bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fa06 	bl	8003bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d107      	bne.n	8003804 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0201 	mvn.w	r2, #1
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9cf 	bl	8003ba2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b80      	cmp	r3, #128	; 0x80
 8003810:	d10e      	bne.n	8003830 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b80      	cmp	r3, #128	; 0x80
 800381e:	d107      	bne.n	8003830 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fd30 	bl	8004290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d10e      	bne.n	800385c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d107      	bne.n	800385c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f9cb 	bl	8003bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b20      	cmp	r3, #32
 8003868:	d10e      	bne.n	8003888 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b20      	cmp	r3, #32
 8003876:	d107      	bne.n	8003888 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0220 	mvn.w	r2, #32
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fcfa 	bl	800427c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0ae      	b.n	8003a0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	f200 809f 	bhi.w	80039fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	080039fd 	.word	0x080039fd
 80038cc:	080039fd 	.word	0x080039fd
 80038d0:	080039fd 	.word	0x080039fd
 80038d4:	08003939 	.word	0x08003939
 80038d8:	080039fd 	.word	0x080039fd
 80038dc:	080039fd 	.word	0x080039fd
 80038e0:	080039fd 	.word	0x080039fd
 80038e4:	0800397b 	.word	0x0800397b
 80038e8:	080039fd 	.word	0x080039fd
 80038ec:	080039fd 	.word	0x080039fd
 80038f0:	080039fd 	.word	0x080039fd
 80038f4:	080039bb 	.word	0x080039bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fa02 	bl	8003d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0208 	orr.w	r2, r2, #8
 8003912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6999      	ldr	r1, [r3, #24]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	619a      	str	r2, [r3, #24]
      break;
 8003936:	e064      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fa48 	bl	8003dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6999      	ldr	r1, [r3, #24]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	021a      	lsls	r2, r3, #8
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	619a      	str	r2, [r3, #24]
      break;
 8003978:	e043      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fa93 	bl	8003eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0208 	orr.w	r2, r2, #8
 8003994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0204 	bic.w	r2, r2, #4
 80039a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69d9      	ldr	r1, [r3, #28]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	61da      	str	r2, [r3, #28]
      break;
 80039b8:	e023      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fadd 	bl	8003f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69d9      	ldr	r1, [r3, #28]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	021a      	lsls	r2, r3, #8
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	61da      	str	r2, [r3, #28]
      break;
 80039fa:	e002      	b.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003a00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIM_ConfigClockSource+0x1c>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0b4      	b.n	8003b9a <HAL_TIM_ConfigClockSource+0x186>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a68:	d03e      	beq.n	8003ae8 <HAL_TIM_ConfigClockSource+0xd4>
 8003a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6e:	f200 8087 	bhi.w	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a76:	f000 8086 	beq.w	8003b86 <HAL_TIM_ConfigClockSource+0x172>
 8003a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7e:	d87f      	bhi.n	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003a80:	2b70      	cmp	r3, #112	; 0x70
 8003a82:	d01a      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0xa6>
 8003a84:	2b70      	cmp	r3, #112	; 0x70
 8003a86:	d87b      	bhi.n	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003a88:	2b60      	cmp	r3, #96	; 0x60
 8003a8a:	d050      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x11a>
 8003a8c:	2b60      	cmp	r3, #96	; 0x60
 8003a8e:	d877      	bhi.n	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003a90:	2b50      	cmp	r3, #80	; 0x50
 8003a92:	d03c      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0xfa>
 8003a94:	2b50      	cmp	r3, #80	; 0x50
 8003a96:	d873      	bhi.n	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d058      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x13a>
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d86f      	bhi.n	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa0:	2b30      	cmp	r3, #48	; 0x30
 8003aa2:	d064      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x15a>
 8003aa4:	2b30      	cmp	r3, #48	; 0x30
 8003aa6:	d86b      	bhi.n	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d060      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x15a>
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d867      	bhi.n	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d05c      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x15a>
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d05a      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x15a>
 8003ab8:	e062      	b.n	8003b80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6899      	ldr	r1, [r3, #8]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f000 fb23 	bl	8004114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003adc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	609a      	str	r2, [r3, #8]
      break;
 8003ae6:	e04f      	b.n	8003b88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	6899      	ldr	r1, [r3, #8]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f000 fb0c 	bl	8004114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b0a:	609a      	str	r2, [r3, #8]
      break;
 8003b0c:	e03c      	b.n	8003b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f000 fa80 	bl	8004020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2150      	movs	r1, #80	; 0x50
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fad9 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003b2c:	e02c      	b.n	8003b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f000 fa9f 	bl	800407e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2160      	movs	r1, #96	; 0x60
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fac9 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003b4c:	e01c      	b.n	8003b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 fa60 	bl	8004020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2140      	movs	r1, #64	; 0x40
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fab9 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e00c      	b.n	8003b88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f000 fab0 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003b7e:	e003      	b.n	8003b88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      break;
 8003b84:	e000      	b.n	8003b88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a34      	ldr	r2, [pc, #208]	; (8003cec <TIM_Base_SetConfig+0xe4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00f      	beq.n	8003c40 <TIM_Base_SetConfig+0x38>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d00b      	beq.n	8003c40 <TIM_Base_SetConfig+0x38>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a31      	ldr	r2, [pc, #196]	; (8003cf0 <TIM_Base_SetConfig+0xe8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_Base_SetConfig+0x38>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a30      	ldr	r2, [pc, #192]	; (8003cf4 <TIM_Base_SetConfig+0xec>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_Base_SetConfig+0x38>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <TIM_Base_SetConfig+0xf0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d108      	bne.n	8003c52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a25      	ldr	r2, [pc, #148]	; (8003cec <TIM_Base_SetConfig+0xe4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01b      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d017      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <TIM_Base_SetConfig+0xe8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <TIM_Base_SetConfig+0xec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00f      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a20      	ldr	r2, [pc, #128]	; (8003cf8 <TIM_Base_SetConfig+0xf0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00b      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <TIM_Base_SetConfig+0xf4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d007      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <TIM_Base_SetConfig+0xf8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <TIM_Base_SetConfig+0xfc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d108      	bne.n	8003ca4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a08      	ldr	r2, [pc, #32]	; (8003cec <TIM_Base_SetConfig+0xe4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d103      	bne.n	8003cd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	615a      	str	r2, [r3, #20]
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800

08003d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f023 0302 	bic.w	r3, r3, #2
 8003d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <TIM_OC1_SetConfig+0xc8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d10c      	bne.n	8003d7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f023 0308 	bic.w	r3, r3, #8
 8003d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 0304 	bic.w	r3, r3, #4
 8003d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <TIM_OC1_SetConfig+0xc8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d111      	bne.n	8003daa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	621a      	str	r2, [r3, #32]
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40010000 	.word	0x40010000

08003dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0210 	bic.w	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 0320 	bic.w	r3, r3, #32
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <TIM_OC2_SetConfig+0xd4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10d      	bne.n	8003e50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <TIM_OC2_SetConfig+0xd4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d113      	bne.n	8003e80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40010000 	.word	0x40010000

08003eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <TIM_OC3_SetConfig+0xd0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10d      	bne.n	8003f26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <TIM_OC3_SetConfig+0xd0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d113      	bne.n	8003f56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40010000 	.word	0x40010000

08003f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a10      	ldr	r2, [pc, #64]	; (800401c <TIM_OC4_SetConfig+0x9c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d109      	bne.n	8003ff4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	019b      	lsls	r3, r3, #6
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40010000 	.word	0x40010000

08004020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 030a 	bic.w	r3, r3, #10
 800405c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407e:	b480      	push	{r7}
 8004080:	b087      	sub	sp, #28
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0210 	bic.w	r2, r3, #16
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	031b      	lsls	r3, r3, #12
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f043 0307 	orr.w	r3, r3, #7
 8004100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800412e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	021a      	lsls	r2, r3, #8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	431a      	orrs	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4313      	orrs	r3, r2
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	2201      	movs	r2, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1a      	ldr	r2, [r3, #32]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	43db      	mvns	r3, r3
 8004176:	401a      	ands	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1a      	ldr	r2, [r3, #32]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e050      	b.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d013      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a18      	ldr	r2, [pc, #96]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a16      	ldr	r2, [pc, #88]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a15      	ldr	r2, [pc, #84]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a13      	ldr	r2, [pc, #76]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d10c      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40014000 	.word	0x40014000

0800427c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e03f      	b.n	8004336 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fef8 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fd7b 	bl	8004de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800431c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b08a      	sub	sp, #40	; 0x28
 8004342:	af02      	add	r7, sp, #8
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b20      	cmp	r3, #32
 800435c:	d17c      	bne.n	8004458 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_UART_Transmit+0x2c>
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e075      	b.n	800445a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_UART_Transmit+0x3e>
 8004378:	2302      	movs	r3, #2
 800437a:	e06e      	b.n	800445a <HAL_UART_Transmit+0x11c>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2221      	movs	r2, #33	; 0x21
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004392:	f7fd ffb1 	bl	80022f8 <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ac:	d108      	bne.n	80043c0 <HAL_UART_Transmit+0x82>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	e003      	b.n	80043c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043d0:	e02a      	b.n	8004428 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	; 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 faf9 	bl	80049d4 <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e036      	b.n	800445a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3302      	adds	r3, #2
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e007      	b.n	800441a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	781a      	ldrb	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	3301      	adds	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1cf      	bne.n	80043d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	2140      	movs	r1, #64	; 0x40
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fac9 	bl	80049d4 <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e006      	b.n	800445a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e000      	b.n	800445a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b0ba      	sub	sp, #232	; 0xe8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800448a:	2300      	movs	r3, #0
 800448c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_UART_IRQHandler+0x66>
 80044b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fbd3 	bl	8004c6e <UART_Receive_IT>
      return;
 80044c8:	e256      	b.n	8004978 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80de 	beq.w	8004690 <HAL_UART_IRQHandler+0x22c>
 80044d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d106      	bne.n	80044ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80d1 	beq.w	8004690 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <HAL_UART_IRQHandler+0xae>
 80044fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f043 0201 	orr.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_UART_IRQHandler+0xd2>
 800451e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f043 0202 	orr.w	r2, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <HAL_UART_IRQHandler+0xf6>
 8004542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d011      	beq.n	800458a <HAL_UART_IRQHandler+0x126>
 8004566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d105      	bne.n	800457e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f043 0208 	orr.w	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 81ed 	beq.w	800496e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_UART_IRQHandler+0x14e>
 80045a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fb5e 	bl	8004c6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <HAL_UART_IRQHandler+0x17a>
 80045d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d04f      	beq.n	800467e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fa66 	bl	8004ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d141      	bne.n	8004676 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3314      	adds	r3, #20
 80045f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800460c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800461e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800462a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1d9      	bne.n	80045f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	2b00      	cmp	r3, #0
 8004644:	d013      	beq.n	800466e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	4a7d      	ldr	r2, [pc, #500]	; (8004840 <HAL_UART_IRQHandler+0x3dc>)
 800464c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe f801 	bl	800265a <HAL_DMA_Abort_IT>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004668:	4610      	mov	r0, r2
 800466a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	e00e      	b.n	800468c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f99a 	bl	80049a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	e00a      	b.n	800468c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f996 	bl	80049a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467c:	e006      	b.n	800468c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f992 	bl	80049a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800468a:	e170      	b.n	800496e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468c:	bf00      	nop
    return;
 800468e:	e16e      	b.n	800496e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	2b01      	cmp	r3, #1
 8004696:	f040 814a 	bne.w	800492e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8143 	beq.w	800492e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 813c 	beq.w	800492e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b40      	cmp	r3, #64	; 0x40
 80046d8:	f040 80b4 	bne.w	8004844 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8140 	beq.w	8004972 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046fa:	429a      	cmp	r2, r3
 80046fc:	f080 8139 	bcs.w	8004972 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004706:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004712:	f000 8088 	beq.w	8004826 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800472c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004742:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800474e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800475a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1d9      	bne.n	8004716 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3314      	adds	r3, #20
 8004782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004786:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800478a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800478e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e1      	bne.n	8004762 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3314      	adds	r3, #20
 80047be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e3      	bne.n	800479e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f6:	f023 0310 	bic.w	r3, r3, #16
 80047fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	330c      	adds	r3, #12
 8004804:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004808:	65ba      	str	r2, [r7, #88]	; 0x58
 800480a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800480e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e3      	bne.n	80047e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	4618      	mov	r0, r3
 8004822:	f7fd feaa 	bl	800257a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800482e:	b29b      	uxth	r3, r3
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	b29b      	uxth	r3, r3
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8c0 	bl	80049bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800483c:	e099      	b.n	8004972 <HAL_UART_IRQHandler+0x50e>
 800483e:	bf00      	nop
 8004840:	08004b77 	.word	0x08004b77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800484c:	b29b      	uxth	r3, r3
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 808b 	beq.w	8004976 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8086 	beq.w	8004976 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800488e:	647a      	str	r2, [r7, #68]	; 0x44
 8004890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800489c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e3      	bne.n	800486a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3314      	adds	r3, #20
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	623b      	str	r3, [r7, #32]
   return(result);
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048c6:	633a      	str	r2, [r7, #48]	; 0x30
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e3      	bne.n	80048a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0310 	bic.w	r3, r3, #16
 80048fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800490c:	61fa      	str	r2, [r7, #28]
 800490e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	69b9      	ldr	r1, [r7, #24]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	617b      	str	r3, [r7, #20]
   return(result);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e3      	bne.n	80048e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f848 	bl	80049bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800492c:	e023      	b.n	8004976 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_UART_IRQHandler+0x4ea>
 800493a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f929 	bl	8004b9e <UART_Transmit_IT>
    return;
 800494c:	e014      	b.n	8004978 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800494e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00e      	beq.n	8004978 <HAL_UART_IRQHandler+0x514>
 800495a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f969 	bl	8004c3e <UART_EndTransmit_IT>
    return;
 800496c:	e004      	b.n	8004978 <HAL_UART_IRQHandler+0x514>
    return;
 800496e:	bf00      	nop
 8004970:	e002      	b.n	8004978 <HAL_UART_IRQHandler+0x514>
      return;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <HAL_UART_IRQHandler+0x514>
      return;
 8004976:	bf00      	nop
  }
}
 8004978:	37e8      	adds	r7, #232	; 0xe8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop

08004980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b090      	sub	sp, #64	; 0x40
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e4:	e050      	b.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d04c      	beq.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80049f4:	f7fd fc80 	bl	80022f8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d241      	bcs.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	330c      	adds	r3, #12
 8004a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a24:	637a      	str	r2, [r7, #52]	; 0x34
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e5      	bne.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	613b      	str	r3, [r7, #16]
   return(result);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3314      	adds	r3, #20
 8004a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a58:	623a      	str	r2, [r7, #32]
 8004a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	69f9      	ldr	r1, [r7, #28]
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e5      	bne.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e00f      	b.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4013      	ands	r3, r2
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d09f      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3740      	adds	r7, #64	; 0x40
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b095      	sub	sp, #84	; 0x54
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ad8:	643a      	str	r2, [r7, #64]	; 0x40
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e5      	bne.n	8004ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3314      	adds	r3, #20
 8004af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3314      	adds	r3, #20
 8004b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d119      	bne.n	8004b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f023 0310 	bic.w	r3, r3, #16
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b48:	61ba      	str	r2, [r7, #24]
 8004b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6979      	ldr	r1, [r7, #20]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	613b      	str	r3, [r7, #16]
   return(result);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e5      	bne.n	8004b28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b6a:	bf00      	nop
 8004b6c:	3754      	adds	r7, #84	; 0x54
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7ff ff09 	bl	80049a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b21      	cmp	r3, #33	; 0x21
 8004bb0:	d13e      	bne.n	8004c30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d114      	bne.n	8004be6 <UART_Transmit_IT+0x48>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d110      	bne.n	8004be6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	1c9a      	adds	r2, r3, #2
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	621a      	str	r2, [r3, #32]
 8004be4:	e008      	b.n	8004bf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6211      	str	r1, [r2, #32]
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4619      	mov	r1, r3
 8004c06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10f      	bne.n	8004c2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fe8e 	bl	8004980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b08c      	sub	sp, #48	; 0x30
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b22      	cmp	r3, #34	; 0x22
 8004c80:	f040 80ab 	bne.w	8004dda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8c:	d117      	bne.n	8004cbe <UART_Receive_IT+0x50>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d113      	bne.n	8004cbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	1c9a      	adds	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
 8004cbc:	e026      	b.n	8004d0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd0:	d007      	beq.n	8004ce2 <UART_Receive_IT+0x74>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <UART_Receive_IT+0x82>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	e008      	b.n	8004d02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d15a      	bne.n	8004dd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0220 	bic.w	r2, r2, #32
 8004d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d135      	bne.n	8004dcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	613b      	str	r3, [r7, #16]
   return(result);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d86:	623a      	str	r2, [r7, #32]
 8004d88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	69f9      	ldr	r1, [r7, #28]
 8004d8c:	6a3a      	ldr	r2, [r7, #32]
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e5      	bne.n	8004d66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d10a      	bne.n	8004dbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff fdf9 	bl	80049bc <HAL_UARTEx_RxEventCallback>
 8004dca:	e002      	b.n	8004dd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff fde1 	bl	8004994 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e002      	b.n	8004ddc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3730      	adds	r7, #48	; 0x30
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de8:	b0c0      	sub	sp, #256	; 0x100
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	68d9      	ldr	r1, [r3, #12]
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	ea40 0301 	orr.w	r3, r0, r1
 8004e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e3c:	f021 010c 	bic.w	r1, r1, #12
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5e:	6999      	ldr	r1, [r3, #24]
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	ea40 0301 	orr.w	r3, r0, r1
 8004e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b8f      	ldr	r3, [pc, #572]	; (80050b0 <UART_SetConfig+0x2cc>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d005      	beq.n	8004e84 <UART_SetConfig+0xa0>
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b8d      	ldr	r3, [pc, #564]	; (80050b4 <UART_SetConfig+0x2d0>)
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d104      	bne.n	8004e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e84:	f7fe fa2c 	bl	80032e0 <HAL_RCC_GetPCLK2Freq>
 8004e88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e8c:	e003      	b.n	8004e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e8e:	f7fe fa13 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8004e92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	f040 810c 	bne.w	80050bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004eae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	462b      	mov	r3, r5
 8004eba:	1891      	adds	r1, r2, r2
 8004ebc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ebe:	415b      	adcs	r3, r3
 8004ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	eb12 0801 	adds.w	r8, r2, r1
 8004ecc:	4629      	mov	r1, r5
 8004ece:	eb43 0901 	adc.w	r9, r3, r1
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee6:	4690      	mov	r8, r2
 8004ee8:	4699      	mov	r9, r3
 8004eea:	4623      	mov	r3, r4
 8004eec:	eb18 0303 	adds.w	r3, r8, r3
 8004ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	eb49 0303 	adc.w	r3, r9, r3
 8004efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f12:	460b      	mov	r3, r1
 8004f14:	18db      	adds	r3, r3, r3
 8004f16:	653b      	str	r3, [r7, #80]	; 0x50
 8004f18:	4613      	mov	r3, r2
 8004f1a:	eb42 0303 	adc.w	r3, r2, r3
 8004f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f28:	f7fb fe30 	bl	8000b8c <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <UART_SetConfig+0x2d4>)
 8004f32:	fba3 2302 	umull	r2, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	011c      	lsls	r4, r3, #4
 8004f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f54:	415b      	adcs	r3, r3
 8004f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f62:	4649      	mov	r1, r9
 8004f64:	eb43 0b01 	adc.w	fp, r3, r1
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f7c:	4692      	mov	sl, r2
 8004f7e:	469b      	mov	fp, r3
 8004f80:	4643      	mov	r3, r8
 8004f82:	eb1a 0303 	adds.w	r3, sl, r3
 8004f86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	18db      	adds	r3, r3, r3
 8004fac:	643b      	str	r3, [r7, #64]	; 0x40
 8004fae:	4613      	mov	r3, r2
 8004fb0:	eb42 0303 	adc.w	r3, r2, r3
 8004fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fbe:	f7fb fde5 	bl	8000b8c <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <UART_SetConfig+0x2d4>)
 8004fca:	fba3 2301 	umull	r2, r3, r3, r1
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	2264      	movs	r2, #100	; 0x64
 8004fd2:	fb02 f303 	mul.w	r3, r2, r3
 8004fd6:	1acb      	subs	r3, r1, r3
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fde:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <UART_SetConfig+0x2d4>)
 8004fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fec:	441c      	add	r4, r3
 8004fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	1891      	adds	r1, r2, r2
 8005006:	63b9      	str	r1, [r7, #56]	; 0x38
 8005008:	415b      	adcs	r3, r3
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800500c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005010:	4641      	mov	r1, r8
 8005012:	1851      	adds	r1, r2, r1
 8005014:	6339      	str	r1, [r7, #48]	; 0x30
 8005016:	4649      	mov	r1, r9
 8005018:	414b      	adcs	r3, r1
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005028:	4659      	mov	r1, fp
 800502a:	00cb      	lsls	r3, r1, #3
 800502c:	4651      	mov	r1, sl
 800502e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005032:	4651      	mov	r1, sl
 8005034:	00ca      	lsls	r2, r1, #3
 8005036:	4610      	mov	r0, r2
 8005038:	4619      	mov	r1, r3
 800503a:	4603      	mov	r3, r0
 800503c:	4642      	mov	r2, r8
 800503e:	189b      	adds	r3, r3, r2
 8005040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005044:	464b      	mov	r3, r9
 8005046:	460a      	mov	r2, r1
 8005048:	eb42 0303 	adc.w	r3, r2, r3
 800504c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800505c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005064:	460b      	mov	r3, r1
 8005066:	18db      	adds	r3, r3, r3
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
 800506a:	4613      	mov	r3, r2
 800506c:	eb42 0303 	adc.w	r3, r2, r3
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800507a:	f7fb fd87 	bl	8000b8c <__aeabi_uldivmod>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <UART_SetConfig+0x2d4>)
 8005084:	fba3 1302 	umull	r1, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	2164      	movs	r1, #100	; 0x64
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	3332      	adds	r3, #50	; 0x32
 8005096:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <UART_SetConfig+0x2d4>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	f003 0207 	and.w	r2, r3, #7
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4422      	add	r2, r4
 80050aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050ac:	e105      	b.n	80052ba <UART_SetConfig+0x4d6>
 80050ae:	bf00      	nop
 80050b0:	40011000 	.word	0x40011000
 80050b4:	40011400 	.word	0x40011400
 80050b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050ce:	4642      	mov	r2, r8
 80050d0:	464b      	mov	r3, r9
 80050d2:	1891      	adds	r1, r2, r2
 80050d4:	6239      	str	r1, [r7, #32]
 80050d6:	415b      	adcs	r3, r3
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
 80050da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050de:	4641      	mov	r1, r8
 80050e0:	1854      	adds	r4, r2, r1
 80050e2:	4649      	mov	r1, r9
 80050e4:	eb43 0501 	adc.w	r5, r3, r1
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	00eb      	lsls	r3, r5, #3
 80050f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f6:	00e2      	lsls	r2, r4, #3
 80050f8:	4614      	mov	r4, r2
 80050fa:	461d      	mov	r5, r3
 80050fc:	4643      	mov	r3, r8
 80050fe:	18e3      	adds	r3, r4, r3
 8005100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005104:	464b      	mov	r3, r9
 8005106:	eb45 0303 	adc.w	r3, r5, r3
 800510a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800511a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800512a:	4629      	mov	r1, r5
 800512c:	008b      	lsls	r3, r1, #2
 800512e:	4621      	mov	r1, r4
 8005130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005134:	4621      	mov	r1, r4
 8005136:	008a      	lsls	r2, r1, #2
 8005138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800513c:	f7fb fd26 	bl	8000b8c <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4b60      	ldr	r3, [pc, #384]	; (80052c8 <UART_SetConfig+0x4e4>)
 8005146:	fba3 2302 	umull	r2, r3, r3, r2
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	011c      	lsls	r4, r3, #4
 800514e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800515c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	1891      	adds	r1, r2, r2
 8005166:	61b9      	str	r1, [r7, #24]
 8005168:	415b      	adcs	r3, r3
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005170:	4641      	mov	r1, r8
 8005172:	1851      	adds	r1, r2, r1
 8005174:	6139      	str	r1, [r7, #16]
 8005176:	4649      	mov	r1, r9
 8005178:	414b      	adcs	r3, r1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005188:	4659      	mov	r1, fp
 800518a:	00cb      	lsls	r3, r1, #3
 800518c:	4651      	mov	r1, sl
 800518e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005192:	4651      	mov	r1, sl
 8005194:	00ca      	lsls	r2, r1, #3
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	4603      	mov	r3, r0
 800519c:	4642      	mov	r2, r8
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051a4:	464b      	mov	r3, r9
 80051a6:	460a      	mov	r2, r1
 80051a8:	eb42 0303 	adc.w	r3, r2, r3
 80051ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80051ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051c8:	4649      	mov	r1, r9
 80051ca:	008b      	lsls	r3, r1, #2
 80051cc:	4641      	mov	r1, r8
 80051ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d2:	4641      	mov	r1, r8
 80051d4:	008a      	lsls	r2, r1, #2
 80051d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051da:	f7fb fcd7 	bl	8000b8c <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <UART_SetConfig+0x4e4>)
 80051e4:	fba3 1302 	umull	r1, r3, r3, r2
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	2164      	movs	r1, #100	; 0x64
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	3332      	adds	r3, #50	; 0x32
 80051f6:	4a34      	ldr	r2, [pc, #208]	; (80052c8 <UART_SetConfig+0x4e4>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005202:	441c      	add	r4, r3
 8005204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005208:	2200      	movs	r2, #0
 800520a:	673b      	str	r3, [r7, #112]	; 0x70
 800520c:	677a      	str	r2, [r7, #116]	; 0x74
 800520e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005212:	4642      	mov	r2, r8
 8005214:	464b      	mov	r3, r9
 8005216:	1891      	adds	r1, r2, r2
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	415b      	adcs	r3, r3
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005222:	4641      	mov	r1, r8
 8005224:	1851      	adds	r1, r2, r1
 8005226:	6039      	str	r1, [r7, #0]
 8005228:	4649      	mov	r1, r9
 800522a:	414b      	adcs	r3, r1
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800523a:	4659      	mov	r1, fp
 800523c:	00cb      	lsls	r3, r1, #3
 800523e:	4651      	mov	r1, sl
 8005240:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005244:	4651      	mov	r1, sl
 8005246:	00ca      	lsls	r2, r1, #3
 8005248:	4610      	mov	r0, r2
 800524a:	4619      	mov	r1, r3
 800524c:	4603      	mov	r3, r0
 800524e:	4642      	mov	r2, r8
 8005250:	189b      	adds	r3, r3, r2
 8005252:	66bb      	str	r3, [r7, #104]	; 0x68
 8005254:	464b      	mov	r3, r9
 8005256:	460a      	mov	r2, r1
 8005258:	eb42 0303 	adc.w	r3, r2, r3
 800525c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	663b      	str	r3, [r7, #96]	; 0x60
 8005268:	667a      	str	r2, [r7, #100]	; 0x64
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005276:	4649      	mov	r1, r9
 8005278:	008b      	lsls	r3, r1, #2
 800527a:	4641      	mov	r1, r8
 800527c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005280:	4641      	mov	r1, r8
 8005282:	008a      	lsls	r2, r1, #2
 8005284:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005288:	f7fb fc80 	bl	8000b8c <__aeabi_uldivmod>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <UART_SetConfig+0x4e4>)
 8005292:	fba3 1302 	umull	r1, r3, r3, r2
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	2164      	movs	r1, #100	; 0x64
 800529a:	fb01 f303 	mul.w	r3, r1, r3
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	3332      	adds	r3, #50	; 0x32
 80052a4:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <UART_SetConfig+0x4e4>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	f003 020f 	and.w	r2, r3, #15
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4422      	add	r2, r4
 80052b8:	609a      	str	r2, [r3, #8]
}
 80052ba:	bf00      	nop
 80052bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052c0:	46bd      	mov	sp, r7
 80052c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052c6:	bf00      	nop
 80052c8:	51eb851f 	.word	0x51eb851f

080052cc <__errno>:
 80052cc:	4b01      	ldr	r3, [pc, #4]	; (80052d4 <__errno+0x8>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000010 	.word	0x20000010

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4d0d      	ldr	r5, [pc, #52]	; (8005310 <__libc_init_array+0x38>)
 80052dc:	4c0d      	ldr	r4, [pc, #52]	; (8005314 <__libc_init_array+0x3c>)
 80052de:	1b64      	subs	r4, r4, r5
 80052e0:	10a4      	asrs	r4, r4, #2
 80052e2:	2600      	movs	r6, #0
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	4d0b      	ldr	r5, [pc, #44]	; (8005318 <__libc_init_array+0x40>)
 80052ea:	4c0c      	ldr	r4, [pc, #48]	; (800531c <__libc_init_array+0x44>)
 80052ec:	f000 f8fe 	bl	80054ec <_init>
 80052f0:	1b64      	subs	r4, r4, r5
 80052f2:	10a4      	asrs	r4, r4, #2
 80052f4:	2600      	movs	r6, #0
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	f855 3b04 	ldr.w	r3, [r5], #4
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	08005524 	.word	0x08005524
 8005314:	08005524 	.word	0x08005524
 8005318:	08005524 	.word	0x08005524
 800531c:	08005528 	.word	0x08005528

08005320 <memset>:
 8005320:	4402      	add	r2, r0
 8005322:	4603      	mov	r3, r0
 8005324:	4293      	cmp	r3, r2
 8005326:	d100      	bne.n	800532a <memset+0xa>
 8005328:	4770      	bx	lr
 800532a:	f803 1b01 	strb.w	r1, [r3], #1
 800532e:	e7f9      	b.n	8005324 <memset+0x4>

08005330 <sqrt>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	ed2d 8b02 	vpush	{d8}
 8005336:	ec55 4b10 	vmov	r4, r5, d0
 800533a:	f000 f825 	bl	8005388 <__ieee754_sqrt>
 800533e:	4622      	mov	r2, r4
 8005340:	462b      	mov	r3, r5
 8005342:	4620      	mov	r0, r4
 8005344:	4629      	mov	r1, r5
 8005346:	eeb0 8a40 	vmov.f32	s16, s0
 800534a:	eef0 8a60 	vmov.f32	s17, s1
 800534e:	f7fb fb97 	bl	8000a80 <__aeabi_dcmpun>
 8005352:	b990      	cbnz	r0, 800537a <sqrt+0x4a>
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	4620      	mov	r0, r4
 800535a:	4629      	mov	r1, r5
 800535c:	f7fb fb68 	bl	8000a30 <__aeabi_dcmplt>
 8005360:	b158      	cbz	r0, 800537a <sqrt+0x4a>
 8005362:	f7ff ffb3 	bl	80052cc <__errno>
 8005366:	2321      	movs	r3, #33	; 0x21
 8005368:	6003      	str	r3, [r0, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	2300      	movs	r3, #0
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	f7fb fa15 	bl	80007a0 <__aeabi_ddiv>
 8005376:	ec41 0b18 	vmov	d8, r0, r1
 800537a:	eeb0 0a48 	vmov.f32	s0, s16
 800537e:	eef0 0a68 	vmov.f32	s1, s17
 8005382:	ecbd 8b02 	vpop	{d8}
 8005386:	bd38      	pop	{r3, r4, r5, pc}

08005388 <__ieee754_sqrt>:
 8005388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800538c:	ec55 4b10 	vmov	r4, r5, d0
 8005390:	4e55      	ldr	r6, [pc, #340]	; (80054e8 <__ieee754_sqrt+0x160>)
 8005392:	43ae      	bics	r6, r5
 8005394:	ee10 0a10 	vmov	r0, s0
 8005398:	ee10 3a10 	vmov	r3, s0
 800539c:	462a      	mov	r2, r5
 800539e:	4629      	mov	r1, r5
 80053a0:	d110      	bne.n	80053c4 <__ieee754_sqrt+0x3c>
 80053a2:	ee10 2a10 	vmov	r2, s0
 80053a6:	462b      	mov	r3, r5
 80053a8:	f7fb f8d0 	bl	800054c <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4620      	mov	r0, r4
 80053b2:	4629      	mov	r1, r5
 80053b4:	f7fa ff14 	bl	80001e0 <__adddf3>
 80053b8:	4604      	mov	r4, r0
 80053ba:	460d      	mov	r5, r1
 80053bc:	ec45 4b10 	vmov	d0, r4, r5
 80053c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c4:	2d00      	cmp	r5, #0
 80053c6:	dc10      	bgt.n	80053ea <__ieee754_sqrt+0x62>
 80053c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80053cc:	4330      	orrs	r0, r6
 80053ce:	d0f5      	beq.n	80053bc <__ieee754_sqrt+0x34>
 80053d0:	b15d      	cbz	r5, 80053ea <__ieee754_sqrt+0x62>
 80053d2:	ee10 2a10 	vmov	r2, s0
 80053d6:	462b      	mov	r3, r5
 80053d8:	ee10 0a10 	vmov	r0, s0
 80053dc:	f7fa fefe 	bl	80001dc <__aeabi_dsub>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	f7fb f9dc 	bl	80007a0 <__aeabi_ddiv>
 80053e8:	e7e6      	b.n	80053b8 <__ieee754_sqrt+0x30>
 80053ea:	1512      	asrs	r2, r2, #20
 80053ec:	d074      	beq.n	80054d8 <__ieee754_sqrt+0x150>
 80053ee:	07d4      	lsls	r4, r2, #31
 80053f0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80053f4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80053f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80053fc:	bf5e      	ittt	pl
 80053fe:	0fda      	lsrpl	r2, r3, #31
 8005400:	005b      	lslpl	r3, r3, #1
 8005402:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005406:	2400      	movs	r4, #0
 8005408:	0fda      	lsrs	r2, r3, #31
 800540a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800540e:	107f      	asrs	r7, r7, #1
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	2516      	movs	r5, #22
 8005414:	4620      	mov	r0, r4
 8005416:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800541a:	1886      	adds	r6, r0, r2
 800541c:	428e      	cmp	r6, r1
 800541e:	bfde      	ittt	le
 8005420:	1b89      	suble	r1, r1, r6
 8005422:	18b0      	addle	r0, r6, r2
 8005424:	18a4      	addle	r4, r4, r2
 8005426:	0049      	lsls	r1, r1, #1
 8005428:	3d01      	subs	r5, #1
 800542a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800542e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005432:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005436:	d1f0      	bne.n	800541a <__ieee754_sqrt+0x92>
 8005438:	462a      	mov	r2, r5
 800543a:	f04f 0e20 	mov.w	lr, #32
 800543e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005442:	4281      	cmp	r1, r0
 8005444:	eb06 0c05 	add.w	ip, r6, r5
 8005448:	dc02      	bgt.n	8005450 <__ieee754_sqrt+0xc8>
 800544a:	d113      	bne.n	8005474 <__ieee754_sqrt+0xec>
 800544c:	459c      	cmp	ip, r3
 800544e:	d811      	bhi.n	8005474 <__ieee754_sqrt+0xec>
 8005450:	f1bc 0f00 	cmp.w	ip, #0
 8005454:	eb0c 0506 	add.w	r5, ip, r6
 8005458:	da43      	bge.n	80054e2 <__ieee754_sqrt+0x15a>
 800545a:	2d00      	cmp	r5, #0
 800545c:	db41      	blt.n	80054e2 <__ieee754_sqrt+0x15a>
 800545e:	f100 0801 	add.w	r8, r0, #1
 8005462:	1a09      	subs	r1, r1, r0
 8005464:	459c      	cmp	ip, r3
 8005466:	bf88      	it	hi
 8005468:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800546c:	eba3 030c 	sub.w	r3, r3, ip
 8005470:	4432      	add	r2, r6
 8005472:	4640      	mov	r0, r8
 8005474:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005478:	f1be 0e01 	subs.w	lr, lr, #1
 800547c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005480:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005484:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005488:	d1db      	bne.n	8005442 <__ieee754_sqrt+0xba>
 800548a:	430b      	orrs	r3, r1
 800548c:	d006      	beq.n	800549c <__ieee754_sqrt+0x114>
 800548e:	1c50      	adds	r0, r2, #1
 8005490:	bf13      	iteet	ne
 8005492:	3201      	addne	r2, #1
 8005494:	3401      	addeq	r4, #1
 8005496:	4672      	moveq	r2, lr
 8005498:	f022 0201 	bicne.w	r2, r2, #1
 800549c:	1063      	asrs	r3, r4, #1
 800549e:	0852      	lsrs	r2, r2, #1
 80054a0:	07e1      	lsls	r1, r4, #31
 80054a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80054a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80054aa:	bf48      	it	mi
 80054ac:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80054b0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80054b4:	4614      	mov	r4, r2
 80054b6:	e781      	b.n	80053bc <__ieee754_sqrt+0x34>
 80054b8:	0ad9      	lsrs	r1, r3, #11
 80054ba:	3815      	subs	r0, #21
 80054bc:	055b      	lsls	r3, r3, #21
 80054be:	2900      	cmp	r1, #0
 80054c0:	d0fa      	beq.n	80054b8 <__ieee754_sqrt+0x130>
 80054c2:	02cd      	lsls	r5, r1, #11
 80054c4:	d50a      	bpl.n	80054dc <__ieee754_sqrt+0x154>
 80054c6:	f1c2 0420 	rsb	r4, r2, #32
 80054ca:	fa23 f404 	lsr.w	r4, r3, r4
 80054ce:	1e55      	subs	r5, r2, #1
 80054d0:	4093      	lsls	r3, r2
 80054d2:	4321      	orrs	r1, r4
 80054d4:	1b42      	subs	r2, r0, r5
 80054d6:	e78a      	b.n	80053ee <__ieee754_sqrt+0x66>
 80054d8:	4610      	mov	r0, r2
 80054da:	e7f0      	b.n	80054be <__ieee754_sqrt+0x136>
 80054dc:	0049      	lsls	r1, r1, #1
 80054de:	3201      	adds	r2, #1
 80054e0:	e7ef      	b.n	80054c2 <__ieee754_sqrt+0x13a>
 80054e2:	4680      	mov	r8, r0
 80054e4:	e7bd      	b.n	8005462 <__ieee754_sqrt+0xda>
 80054e6:	bf00      	nop
 80054e8:	7ff00000 	.word	0x7ff00000

080054ec <_init>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr

080054f8 <_fini>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr
